// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/compromise/src/API/world.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var methods = {
  one: {},
  two: {},
  three: {},
  four: {}
};
var model = {
  one: {},
  two: {},
  three: {}
};
var compute = {};
var hooks = [];
var _default = exports.default = {
  methods: methods,
  model: model,
  compute: compute,
  hooks: hooks
};
},{}],"node_modules/compromise/src/API/methods/compute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _readOnlyError(r) { throw new TypeError('"' + r + '" is read-only'); }
var isArray = function isArray(input) {
  return Object.prototype.toString.call(input) === '[object Array]';
};
var fns = {
  /** add metadata to term objects */
  compute: function compute(input) {
    var _this = this;
    var world = this.world;
    var compute = world.compute;
    // do one method
    if (typeof input === 'string' && compute.hasOwnProperty(input)) {
      compute[input](this);
    }
    // allow a list of methods
    else if (isArray(input)) {
      input.forEach(function (name) {
        if (world.compute.hasOwnProperty(name)) {
          compute[name](_this);
        } else {
          console.warn('no compute:', input); // eslint-disable-line
        }
      });
    }
    // allow a custom compute function
    else if (typeof input === 'function') {
      input(this);
    } else {
      console.warn('no compute:', input); // eslint-disable-line
    }
    return this;
  }
};
var _default = exports.default = fns;
},{}],"node_modules/compromise/src/API/methods/loops.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
// wrappers for loops in javascript arrays

var forEach = function forEach(cb) {
  var _this = this;
  var ptrs = this.fullPointer;
  ptrs.forEach(function (ptr, i) {
    var view = _this.update([ptr]);
    cb(view, i);
  });
  return this;
};
var map = function map(cb, empty) {
  var _this2 = this;
  var ptrs = this.fullPointer;
  var res = ptrs.map(function (ptr, i) {
    var view = _this2.update([ptr]);
    var out = cb(view, i);
    // if we returned nothing, return a view
    if (out === undefined) {
      return _this2.none();
    }
    return out;
  });
  if (res.length === 0) {
    return empty || this.update([]);
  }
  // return an array of values, or View objects?
  // user can return either from their callback
  if (res[0] !== undefined) {
    // array of strings
    if (typeof res[0] === 'string') {
      return res;
    }
    // array of objects
    if (_typeof(res[0]) === 'object' && (res[0] === null || !res[0].isView)) {
      return res;
    }
  }
  // return a View object
  var all = [];
  res.forEach(function (ptr) {
    all = all.concat(ptr.fullPointer);
  });
  return this.toView(all);
};
var filter = function filter(cb) {
  var _this3 = this;
  var ptrs = this.fullPointer;
  ptrs = ptrs.filter(function (ptr, i) {
    var view = _this3.update([ptr]);
    return cb(view, i);
  });
  var res = this.update(ptrs);
  return res;
};
var find = function find(cb) {
  var _this4 = this;
  var ptrs = this.fullPointer;
  var found = ptrs.find(function (ptr, i) {
    var view = _this4.update([ptr]);
    return cb(view, i);
  });
  return this.update([found]);
};
var some = function some(cb) {
  var _this5 = this;
  var ptrs = this.fullPointer;
  return ptrs.some(function (ptr, i) {
    var view = _this5.update([ptr]);
    return cb(view, i);
  });
};
var random = function random() {
  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var ptrs = this.fullPointer;
  var r = Math.floor(Math.random() * ptrs.length);
  //prevent it from going over the end
  if (r + n > this.length) {
    r = this.length - n;
    r = r < 0 ? 0 : r;
  }
  ptrs = ptrs.slice(r, r + n);
  return this.update(ptrs);
};
var _default = exports.default = {
  forEach: forEach,
  map: map,
  filter: filter,
  find: find,
  some: some,
  random: random
};
},{}],"node_modules/compromise/src/API/methods/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var utils = {
  /** */
  termList: function termList() {
    return this.methods.one.termList(this.docs);
  },
  /** return individual terms*/
  terms: function terms(n) {
    var m = this.match('.');
    // this is a bit faster than .match('.') 
    // let ptrs = []
    // this.docs.forEach((terms) => {
    //   terms.forEach((term) => {
    //     let [y, x] = term.index || []
    //     ptrs.push([y, x, x + 1])
    //   })
    // })
    // let m = this.update(ptrs)
    return typeof n === 'number' ? m.eq(n) : m;
  },
  /** */
  groups: function groups(group) {
    var _this = this;
    if (group || group === 0) {
      return this.update(this._groups[group] || []);
    }
    // return an object of Views
    var res = {};
    Object.keys(this._groups).forEach(function (k) {
      res[k] = _this.update(_this._groups[k]);
    });
    // this._groups = null
    return res;
  },
  /** */
  eq: function eq(n) {
    var ptr = this.pointer;
    if (!ptr) {
      ptr = this.docs.map(function (_doc, i) {
        return [i];
      });
    }
    if (ptr[n]) {
      return this.update([ptr[n]]);
    }
    return this.none();
  },
  /** */
  first: function first() {
    return this.eq(0);
  },
  /** */
  last: function last() {
    var n = this.fullPointer.length - 1;
    return this.eq(n);
  },
  /** grab term[0] for every match */
  firstTerms: function firstTerms() {
    return this.match('^.');
  },
  /** grab the last term for every match  */
  lastTerms: function lastTerms() {
    return this.match('.$');
  },
  /** */
  slice: function slice(min, max) {
    var pntrs = this.pointer || this.docs.map(function (_o, n) {
      return [n];
    });
    pntrs = pntrs.slice(min, max);
    return this.update(pntrs);
  },
  /** return a view of the entire document */
  all: function all() {
    return this.update().toView();
  },
  /**  */
  fullSentences: function fullSentences() {
    var ptrs = this.fullPointer.map(function (a) {
      return [a[0]];
    }); //lazy!
    return this.update(ptrs).toView();
  },
  /** return a view of no parts of the document */
  none: function none() {
    return this.update([]);
  },
  /** are these two views looking at the same words? */
  isDoc: function isDoc(b) {
    if (!b || !b.isView) {
      return false;
    }
    var aPtr = this.fullPointer;
    var bPtr = b.fullPointer;
    if (!aPtr.length === bPtr.length) {
      return false;
    }
    // ensure pointers are the same
    return aPtr.every(function (ptr, i) {
      if (!bPtr[i]) {
        return false;
      }
      // ensure [n, start, end] are all the same
      return ptr[0] === bPtr[i][0] && ptr[1] === bPtr[i][1] && ptr[2] === bPtr[i][2];
    });
  },
  /** how many seperate terms does the document have? */
  wordCount: function wordCount() {
    return this.docs.reduce(function (count, terms) {
      count += terms.filter(function (t) {
        return t.text !== '';
      }).length;
      return count;
    }, 0);
  },
  // is the pointer the full sentence?
  isFull: function isFull() {
    var ptrs = this.pointer;
    if (!ptrs) {
      return true;
    }
    // must start at beginning
    if (ptrs.length === 0 || ptrs[0][0] !== 0) {
      return false;
    }
    var wantTerms = 0;
    var haveTerms = 0;
    this.document.forEach(function (terms) {
      return wantTerms += terms.length;
    });
    this.docs.forEach(function (terms) {
      return haveTerms += terms.length;
    });
    return wantTerms === haveTerms;
    // for (let i = 0; i < ptrs.length; i += 1) {
    //   let [n, start, end] = ptrs[i]
    //   // it's not the start
    //   if (n !== i || start !== 0) {
    //     return false
    //   }
    //   // it's too short
    //   if (document[n].length > end) {
    //     return false
    //   }
    // }
    // return true
  },
  // return the nth elem of a doc
  getNth: function getNth(n) {
    if (typeof n === 'number') {
      return this.eq(n);
    } else if (typeof n === 'string') {
      return this.if(n);
    }
    return this;
  }
};
utils.group = utils.groups;
utils.fullSentence = utils.fullSentences;
utils.sentence = utils.fullSentences;
utils.lastTerm = utils.lastTerms;
utils.firstTerm = utils.firstTerms;
var _default = exports.default = utils;
},{}],"node_modules/compromise/src/API/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _compute = _interopRequireDefault(require("./compute.js"));
var _loops = _interopRequireDefault(require("./loops.js"));
var _utils = _interopRequireDefault(require("./utils.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var methods = Object.assign({}, _utils.default, _compute.default, _loops.default);

// aliases
methods.get = methods.eq;
var _default = exports.default = methods;
},{"./compute.js":"node_modules/compromise/src/API/methods/compute.js","./loops.js":"node_modules/compromise/src/API/methods/loops.js","./utils.js":"node_modules/compromise/src/API/methods/utils.js"}],"node_modules/compromise/src/API/View.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _world = _interopRequireDefault(require("./world.js"));
var _index = _interopRequireDefault(require("./methods/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var View = /*#__PURE__*/function () {
  function View(document, pointer) {
    var _this = this;
    var groups = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, View);
    // invisible props
    var props = [['document', document], ['world', _world.default], ['_groups', groups], ['_cache', null], ['viewType', 'View']];
    props.forEach(function (a) {
      Object.defineProperty(_this, a[0], {
        value: a[1],
        writable: true
      });
    });
    this.ptrs = pointer;
  }
  /* getters:  */
  return _createClass(View, [{
    key: "docs",
    get: function get() {
      var docs = this.document;
      if (this.ptrs) {
        docs = _world.default.methods.one.getDoc(this.ptrs, this.document);
      }
      return docs;
    }
  }, {
    key: "pointer",
    get: function get() {
      return this.ptrs;
    }
  }, {
    key: "methods",
    get: function get() {
      return this.world.methods;
    }
  }, {
    key: "model",
    get: function get() {
      return this.world.model;
    }
  }, {
    key: "hooks",
    get: function get() {
      return this.world.hooks;
    }
  }, {
    key: "isView",
    get: function get() {
      return true; //this comes in handy sometimes
    }
    // is the view not-empty?
  }, {
    key: "found",
    get: function get() {
      return this.docs.length > 0;
    }
    // how many matches we have
  }, {
    key: "length",
    get: function get() {
      return this.docs.length;
    }
    // return a more-hackable pointer
  }, {
    key: "fullPointer",
    get: function get() {
      var docs = this.docs,
        ptrs = this.ptrs,
        document = this.document;
      // compute a proper pointer, from docs
      var pointers = ptrs || docs.map(function (_d, n) {
        return [n];
      });
      // do we need to repair it, first?
      return pointers.map(function (a) {
        var _a = _slicedToArray(a, 5),
          n = _a[0],
          start = _a[1],
          end = _a[2],
          id = _a[3],
          endId = _a[4];
        start = start || 0;
        end = end || (document[n] || []).length;
        //add frozen id, for good-measure
        if (document[n] && document[n][start]) {
          id = id || document[n][start].id;
          if (document[n][end - 1]) {
            endId = endId || document[n][end - 1].id;
          }
        }
        return [n, start, end, id, endId];
      });
    }
    // create a new View, from this one
  }, {
    key: "update",
    value: function update(pointer) {
      var _this2 = this;
      var m = new View(this.document, pointer);
      // send the cache down, too?
      if (this._cache && pointer && pointer.length > 0) {
        // only keep cache if it's a full-sentence
        var cache = [];
        pointer.forEach(function (ptr, i) {
          var _ptr = _slicedToArray(ptr, 3),
            n = _ptr[0],
            start = _ptr[1],
            end = _ptr[2];
          if (ptr.length === 1) {
            cache[i] = _this2._cache[n];
          } else if (start === 0 && _this2.document[n].length === end) {
            cache[i] = _this2._cache[n];
          }
        });
        if (cache.length > 0) {
          m._cache = cache;
        }
      }
      m.world = this.world;
      return m;
    }
    // create a new View, from this one
  }, {
    key: "toView",
    value: function toView(pointer) {
      return new View(this.document, pointer || this.pointer);
    }
  }, {
    key: "fromText",
    value: function fromText(input) {
      var methods = this.methods;
      //assume ./01-tokenize is installed
      var document = methods.one.tokenize.fromString(input, this.world);
      var doc = new View(document);
      doc.world = this.world;
      doc.compute(['normal', 'freeze', 'lexicon']);
      if (this.world.compute.preTagger) {
        doc.compute('preTagger');
      }
      doc.compute('unfreeze');
      return doc;
    }
  }, {
    key: "clone",
    value: function clone() {
      // clone the whole document
      var document = this.document.slice(0); //node 17: structuredClone(document);
      document = document.map(function (terms) {
        return terms.map(function (term) {
          term = Object.assign({}, term);
          term.tags = new Set(term.tags);
          return term;
        });
      });
      // clone only sub-document ?
      var m = this.update(this.pointer);
      m.document = document;
      m._cache = this._cache; //clone this too?
      return m;
    }
  }]);
}();
Object.assign(View.prototype, _index.default);
var _default = exports.default = View;
},{"./world.js":"node_modules/compromise/src/API/world.js","./methods/index.js":"node_modules/compromise/src/API/methods/index.js"}],"node_modules/compromise/src/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = '14.14.4';
},{}],"node_modules/compromise/src/API/extend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var isObject = function isObject(item) {
  return item && _typeof(item) === 'object' && !Array.isArray(item);
};

// recursive merge of objects
function mergeDeep(model, plugin) {
  if (isObject(plugin)) {
    for (var key in plugin) {
      if (isObject(plugin[key])) {
        if (!model[key]) Object.assign(model, _defineProperty({}, key, {}));
        mergeDeep(model[key], plugin[key]); //recursion
      } else {
        Object.assign(model, _defineProperty({}, key, plugin[key]));
      }
    }
  }
  return model;
}
// const merged = mergeDeep({ a: 1 }, { b: { c: { d: { e: 12345 } } } })
// console.dir(merged, { depth: 5 })

// vroom
function mergeQuick(model, plugin) {
  for (var key in plugin) {
    model[key] = model[key] || {};
    Object.assign(model[key], plugin[key]);
  }
  return model;
}
var addIrregulars = function addIrregulars(model, conj) {
  var m = model.two.models || {};
  Object.keys(conj).forEach(function (k) {
    // verb forms
    if (conj[k].pastTense) {
      if (m.toPast) {
        m.toPast.ex[k] = conj[k].pastTense;
      }
      if (m.fromPast) {
        m.fromPast.ex[conj[k].pastTense] = k;
      }
    }
    if (conj[k].presentTense) {
      if (m.toPresent) {
        m.toPresent.ex[k] = conj[k].presentTense;
      }
      if (m.fromPresent) {
        m.fromPresent.ex[conj[k].presentTense] = k;
      }
    }
    if (conj[k].gerund) {
      if (m.toGerund) {
        m.toGerund.ex[k] = conj[k].gerund;
      }
      if (m.fromGerund) {
        m.fromGerund.ex[conj[k].gerund] = k;
      }
    }
    // adjective forms
    if (conj[k].comparative) {
      if (m.toComparative) {
        m.toComparative.ex[k] = conj[k].comparative;
      }
      if (m.fromComparative) {
        m.fromComparative.ex[conj[k].comparative] = k;
      }
    }
    if (conj[k].superlative) {
      if (m.toSuperlative) {
        m.toSuperlative.ex[k] = conj[k].superlative;
      }
      if (m.fromSuperlative) {
        m.fromSuperlative.ex[conj[k].superlative] = k;
      }
    }
  });
};
var extend = function extend(plugin, world, View, nlp) {
  var methods = world.methods,
    model = world.model,
    compute = world.compute,
    hooks = world.hooks;
  if (plugin.methods) {
    mergeQuick(methods, plugin.methods);
  }
  if (plugin.model) {
    mergeDeep(model, plugin.model);
  }
  if (plugin.irregulars) {
    addIrregulars(model, plugin.irregulars);
  }
  // shallow-merge compute
  if (plugin.compute) {
    Object.assign(compute, plugin.compute);
  }
  // append new hooks
  if (hooks) {
    world.hooks = hooks.concat(plugin.hooks || []);
  }
  // assign new class methods
  if (plugin.api) {
    plugin.api(View);
  }
  if (plugin.lib) {
    Object.keys(plugin.lib).forEach(function (k) {
      return nlp[k] = plugin.lib[k];
    });
  }
  if (plugin.tags) {
    nlp.addTags(plugin.tags);
  }
  if (plugin.words) {
    nlp.addWords(plugin.words);
  }
  if (plugin.frozen) {
    nlp.addWords(plugin.frozen, true);
  }
  if (plugin.mutate) {
    plugin.mutate(world, nlp);
  }
};
var _default = exports.default = extend;
},{}],"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};

// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};
},{}],"node_modules/compromise/src/API/_lib.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verbose = void 0;
/** log the decision-making to console */
var verbose = exports.verbose = function verbose(set) {
  var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env; //use window, in browser
  env.DEBUG_TAGS = set === 'tagger' || set === true ? true : '';
  env.DEBUG_MATCH = set === 'match' || set === true ? true : '';
  env.DEBUG_CHUNKS = set === 'chunker' || set === true ? true : '';
  return this;
};
},{"process":"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/compromise/src/API/inputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isObject = function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
};
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

// internal Term objects are slightly different
var fromJson = function fromJson(json) {
  return json.map(function (o) {
    return o.terms.map(function (term) {
      if (isArray(term.tags)) {
        term.tags = new Set(term.tags);
      }
      return term;
    });
  });
};

// interpret an array-of-arrays
var preTokenized = function preTokenized(arr) {
  return arr.map(function (a) {
    return a.map(function (str) {
      return {
        text: str,
        normal: str,
        //cleanup
        pre: '',
        post: ' ',
        tags: new Set()
      };
    });
  });
};
var inputs = function inputs(input, View, world) {
  var methods = world.methods;
  var doc = new View([]);
  doc.world = world;
  // support a number
  if (typeof input === 'number') {
    input = String(input);
  }
  // return empty doc
  if (!input) {
    return doc;
  }
  // parse a string
  if (typeof input === 'string') {
    var document = methods.one.tokenize.fromString(input, world);
    return new View(document);
  }
  // handle compromise View
  if (isObject(input) && input.isView) {
    return new View(input.document, input.ptrs);
  }
  // handle json input
  if (isArray(input)) {
    // pre-tokenized array-of-arrays 
    if (isArray(input[0])) {
      var _document = preTokenized(input);
      return new View(_document);
    }
    // handle json output
    var _document2 = fromJson(input);
    return new View(_document2);
  }
  return doc;
};
var _default = exports.default = inputs;
},{}],"node_modules/compromise/src/nlp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _View = _interopRequireDefault(require("./API/View.js"));
var _world = _interopRequireDefault(require("./API/world.js"));
var _version = _interopRequireDefault(require("./_version.js"));
var _extend = _interopRequireDefault(require("./API/extend.js"));
var _lib = require("./API/_lib.js");
var _inputs = _interopRequireDefault(require("./API/inputs.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var world = Object.assign({}, _world.default);
var _nlp = function nlp(input, lex) {
  if (lex) {
    _nlp.addWords(lex);
  }
  var doc = (0, _inputs.default)(input, _View.default, world);
  if (input) {
    doc.compute(world.hooks);
  }
  return doc;
};
Object.defineProperty(_nlp, '_world', {
  value: world,
  writable: true
});

/** don't run the POS-tagger */
_nlp.tokenize = function (input, lex) {
  var compute = this._world.compute;
  // add user-given words to lexicon
  if (lex) {
    _nlp.addWords(lex);
  }
  // run the tokenizer
  var doc = (0, _inputs.default)(input, _View.default, world);
  // give contractions a shot, at least
  if (compute.contractions) {
    doc.compute(['alias', 'normal', 'machine', 'contractions']); //run it if we've got it
  }
  return doc;
};

/** extend compromise functionality */
_nlp.plugin = function (plugin) {
  (0, _extend.default)(plugin, this._world, _View.default, this);
  return this;
};
_nlp.extend = _nlp.plugin;

/** reach-into compromise internals */
_nlp.world = function () {
  return this._world;
};
_nlp.model = function () {
  return this._world.model;
};
_nlp.methods = function () {
  return this._world.methods;
};
_nlp.hooks = function () {
  return this._world.hooks;
};

/** log the decision-making to console */
_nlp.verbose = _lib.verbose;
/** current library release version */
_nlp.version = _version.default;
var _default = exports.default = _nlp;
},{"./API/View.js":"node_modules/compromise/src/API/View.js","./API/world.js":"node_modules/compromise/src/API/world.js","./_version.js":"node_modules/compromise/src/_version.js","./API/extend.js":"node_modules/compromise/src/API/extend.js","./API/_lib.js":"node_modules/compromise/src/API/_lib.js","./API/inputs.js":"node_modules/compromise/src/API/inputs.js"}],"node_modules/compromise/src/1-one/cache/methods/cacheDoc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var createCache = function createCache(document) {
  var cache = document.map(function (terms) {
    var items = new Set();
    terms.forEach(function (term) {
      // add words
      if (term.normal !== '') {
        items.add(term.normal);
      }
      // cache switch-status - '%Noun|Verb%'
      if (term.switch) {
        items.add("%".concat(term.switch, "%"));
      }
      // cache implicit words, too
      if (term.implicit) {
        items.add(term.implicit);
      }
      if (term.machine) {
        items.add(term.machine);
      }
      if (term.root) {
        items.add(term.root);
      }
      // cache slashes words, etc
      if (term.alias) {
        term.alias.forEach(function (str) {
          return items.add(str);
        });
      }
      var tags = Array.from(term.tags);
      for (var t = 0; t < tags.length; t += 1) {
        items.add('#' + tags[t]);
      }
    });
    return items;
  });
  return cache;
};
var _default = exports.default = createCache;
},{}],"node_modules/compromise/src/1-one/cache/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _cacheDoc = _interopRequireDefault(require("./cacheDoc.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  one: {
    cacheDoc: _cacheDoc.default
  }
};
},{"./cacheDoc.js":"node_modules/compromise/src/1-one/cache/methods/cacheDoc.js"}],"node_modules/compromise/src/1-one/cache/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var methods = {
  /** */
  cache: function cache() {
    this._cache = this.methods.one.cacheDoc(this.document);
    return this;
  },
  /** */
  uncache: function uncache() {
    this._cache = null;
    return this;
  }
};
var addAPI = function addAPI(View) {
  Object.assign(View.prototype, methods);
};
var _default = exports.default = addAPI;
},{}],"node_modules/compromise/src/1-one/cache/compute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  cache: function cache(view) {
    view._cache = view.methods.one.cacheDoc(view.document);
  }
};
},{}],"node_modules/compromise/src/1-one/cache/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./methods/index.js"));
var _api = _interopRequireDefault(require("./api.js"));
var _compute = _interopRequireDefault(require("./compute.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _api.default,
  compute: _compute.default,
  methods: _index.default
};
},{"./methods/index.js":"node_modules/compromise/src/1-one/cache/methods/index.js","./api.js":"node_modules/compromise/src/1-one/cache/api.js","./compute.js":"node_modules/compromise/src/1-one/cache/compute.js"}],"node_modules/compromise/src/1-one/change/api/case.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  /** */
  toLowerCase: function toLowerCase() {
    this.termList().forEach(function (t) {
      t.text = t.text.toLowerCase();
    });
    return this;
  },
  /** */
  toUpperCase: function toUpperCase() {
    this.termList().forEach(function (t) {
      t.text = t.text.toUpperCase();
    });
    return this;
  },
  /** */
  toTitleCase: function toTitleCase() {
    this.termList().forEach(function (t) {
      t.text = t.text.replace(/^ *[a-z\u00C0-\u00FF]/, function (x) {
        return x.toUpperCase();
      }); //support unicode?
    });
    return this;
  },
  /** */
  toCamelCase: function toCamelCase() {
    this.docs.forEach(function (terms) {
      terms.forEach(function (t, i) {
        if (i !== 0) {
          t.text = t.text.replace(/^ *[a-z\u00C0-\u00FF]/, function (x) {
            return x.toUpperCase();
          }); //support unicode?
        }
        if (i !== terms.length - 1) {
          t.post = '';
        }
      });
    });
    return this;
  }
};
},{}],"node_modules/compromise/src/1-one/change/api/lib/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spliceArr = exports.cleanPrepend = exports.cleanAppend = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// case logic
var isTitleCase = function isTitleCase(str) {
  return /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])(?:['a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2019\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/.test(str) || /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])$/.test(str);
};
var toTitleCase = function toTitleCase(str) {
  return str.replace(/^(?:[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/, function (x) {
    return x.toUpperCase();
  });
};
var toLowerCase = function toLowerCase(str) {
  return str.replace(/^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])/, function (x) {
    return x.toLowerCase();
  });
};

// splice an array into an array
var spliceArr = exports.spliceArr = function spliceArr(parent, index, child) {
  // tag them as dirty
  child.forEach(function (term) {
    return term.dirty = true;
  });
  if (parent) {
    var args = [index, 0].concat(child);
    Array.prototype.splice.apply(parent, args);
  }
  return parent;
};

// add a space at end, if required
var endSpace = function endSpace(terms) {
  var hasSpace = / $/;
  var hasDash = /[-–—]/;
  var lastTerm = terms[terms.length - 1];
  if (lastTerm && !hasSpace.test(lastTerm.post) && !hasDash.test(lastTerm.post)) {
    lastTerm.post += ' ';
  }
};

// sentence-ending punctuation should move in append
var movePunct = function movePunct(source, end, needle) {
  var juicy = /[-.?!,;:)–—'"]/g;
  var wasLast = source[end - 1];
  if (!wasLast) {
    return;
  }
  var post = wasLast.post;
  if (juicy.test(post)) {
    var punct = post.match(juicy).join(''); //not perfect
    var last = needle[needle.length - 1];
    last.post = punct + last.post;
    // remove it, from source
    wasLast.post = wasLast.post.replace(juicy, '');
  }
};
var moveTitleCase = function moveTitleCase(home, start, needle) {
  var from = home[start];
  // should we bother?
  if (start !== 0 || !isTitleCase(from.text)) {
    return;
  }
  // titlecase new first term
  needle[0].text = toTitleCase(needle[0].text);
  // should we un-titlecase the old word?
  var old = home[start];
  if (old.tags.has('ProperNoun') || old.tags.has('Acronym')) {
    return;
  }
  if (isTitleCase(old.text) && old.text.length > 1) {
    old.text = toLowerCase(old.text);
  }
};

// put these words before the others
var cleanPrepend = exports.cleanPrepend = function cleanPrepend(home, ptr, needle, document) {
  var _ptr = _slicedToArray(ptr, 3),
    n = _ptr[0],
    start = _ptr[1],
    end = _ptr[2];
  // introduce spaces appropriately
  if (start === 0) {
    // at start - need space in insert
    endSpace(needle);
  } else if (end === document[n].length) {
    // at end - need space in home
    endSpace(needle);
  } else {
    // in middle - need space in home and insert
    endSpace(needle);
    endSpace([home[ptr[1]]]);
  }
  moveTitleCase(home, start, needle);
  // movePunct(home, end, needle)
  spliceArr(home, start, needle);
};
var cleanAppend = exports.cleanAppend = function cleanAppend(home, ptr, needle, document) {
  var _ptr2 = _slicedToArray(ptr, 3),
    n = _ptr2[0],
    end = _ptr2[2];
  var total = (document[n] || []).length;
  if (end < total) {
    // are we in the middle?
    // add trailing space on self
    movePunct(home, end, needle);
    endSpace(needle);
  } else if (total === end) {
    // are we at the end?
    // add a space to predecessor
    endSpace(home);
    // very end, move period
    movePunct(home, end, needle);
    // is there another sentence after?
    if (document[n + 1]) {
      needle[needle.length - 1].post += ' ';
    }
  }
  spliceArr(home, ptr[2], needle);
  // set new endId
  ptr[4] = needle[needle.length - 1].id;
};
},{}],"node_modules/compromise/src/1-one/change/compute/uuid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
/*
unique & ordered term ids, based on time & term index

Base 36 (numbers+ascii)
  3 digit 4,600
  2 digit 1,200
  1 digit 36

  TTT|NNN|II|R

TTT -> 46 terms since load
NNN -> 46 thousand sentences (>1 inf-jest)
II  -> 1,200 words in a sentence (nuts)
R   -> 1-36 random number 

novels: 
  avg 80,000 words
    15 words per sentence
  5,000 sentences

Infinite Jest:
  36,247 sentences
  https://en.wikipedia.org/wiki/List_of_longest_novels

collisions are more-likely after
    46 seconds have passed,
  and 
    after 46-thousand sentences

*/
var index = 0;
var pad3 = function pad3(str) {
  str = str.length < 3 ? '0' + str : str;
  return str.length < 3 ? '0' + str : str;
};
var toId = function toId(term) {
  var _ref = term.index || [0, 0],
    _ref2 = _slicedToArray(_ref, 2),
    n = _ref2[0],
    i = _ref2[1];
  index += 1;

  //don't overflow index
  index = index > 46655 ? 0 : index;
  //don't overflow sentences
  n = n > 46655 ? 0 : n;
  // //don't overflow terms
  i = i > 1294 ? 0 : i;

  // 3 digits for time
  var id = pad3(index.toString(36));
  // 3 digit  for sentence index (46k)
  id += pad3(n.toString(36));

  // 1 digit for term index (36)
  var tx = i.toString(36);
  tx = tx.length < 2 ? '0' + tx : tx; //pad2
  id += tx;

  // 1 digit random number
  var r = parseInt(Math.random() * 36, 10);
  id += r.toString(36);
  return term.normal + '|' + id.toUpperCase();
};
var _default = exports.default = toId; // setInterval(() => console.log(toId(4, 12)), 100)
},{}],"node_modules/compromise/src/1-one/change/api/insert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _insert = require("./lib/insert.js");
var _uuid = _interopRequireDefault(require("../compute/uuid.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
// are we inserting inside a contraction?
// expand it first
var expand = function expand(m) {
  if (m.has('@hasContraction') && typeof m.contractions === 'function') {
    //&& m.after('^.').has('@hasContraction')
    var more = m.grow('@hasContraction');
    more.contractions().expand();
  }
};
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

// set new ids for each terms
var addIds = function addIds(terms) {
  terms = terms.map(function (term) {
    term.id = (0, _uuid.default)(term);
    return term;
  });
  return terms;
};
var getTerms = function getTerms(input, world) {
  var methods = world.methods;
  // create our terms from a string
  if (typeof input === 'string') {
    return methods.one.tokenize.fromString(input, world)[0]; //assume one sentence
  }
  //allow a view object
  if (_typeof(input) === 'object' && input.isView) {
    return input.clone().docs[0] || []; //assume one sentence
  }
  //allow an array of terms, too
  if (isArray(input)) {
    return isArray(input[0]) ? input[0] : input;
  }
  return [];
};
var insert = function insert(input, view, prepend) {
  var document = view.document,
    world = view.world;
  view.uncache();
  // insert words at end of each doc
  var ptrs = view.fullPointer;
  var selfPtrs = view.fullPointer;
  view.forEach(function (m, i) {
    var ptr = m.fullPointer[0];
    var _ptr = _slicedToArray(ptr, 1),
      n = _ptr[0];
    // add-in the words
    var home = document[n];
    var terms = getTerms(input, world);
    // are we inserting nothing?
    if (terms.length === 0) {
      return;
    }
    terms = addIds(terms);
    if (prepend) {
      expand(view.update([ptr]).firstTerm());
      (0, _insert.cleanPrepend)(home, ptr, terms, document);
    } else {
      expand(view.update([ptr]).lastTerm());
      (0, _insert.cleanAppend)(home, ptr, terms, document);
    }
    // harden the pointer
    if (document[n] && document[n][ptr[1]]) {
      ptr[3] = document[n][ptr[1]].id;
    }
    // change self backwards by len
    selfPtrs[i] = ptr;
    // extend the pointer
    ptr[2] += terms.length;
    ptrs[i] = ptr;
  });
  var doc = view.toView(ptrs);
  // shift our self pointer, if necessary
  view.ptrs = selfPtrs;
  // try to tag them, too
  doc.compute(['id', 'index', 'freeze', 'lexicon']);
  if (doc.world.compute.preTagger) {
    doc.compute('preTagger');
  }
  doc.compute('unfreeze');
  return doc;
};
var fns = {
  insertAfter: function insertAfter(input) {
    return insert(input, this, false);
  },
  insertBefore: function insertBefore(input) {
    return insert(input, this, true);
  }
};
fns.append = fns.insertAfter;
fns.prepend = fns.insertBefore;
fns.insert = fns.insertAfter;
var _default = exports.default = fns;
},{"./lib/insert.js":"node_modules/compromise/src/1-one/change/api/lib/insert.js","../compute/uuid.js":"node_modules/compromise/src/1-one/change/compute/uuid.js"}],"node_modules/compromise/src/1-one/change/api/replace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var dollarStub = /\$[0-9a-z]+/g;
var fns = {};

// case logic
var isTitleCase = function isTitleCase(str) {
  return /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])(?:['a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2019\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/.test(str) || /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])$/.test(str);
};
var toTitleCase = function toTitleCase(str) {
  return str.replace(/^(?:[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/, function (x) {
    return x.toUpperCase();
  });
};
var toLowerCase = function toLowerCase(str) {
  return str.replace(/^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])/, function (x) {
    return x.toLowerCase();
  });
};

// doc.replace('foo', (m)=>{})
var replaceByFn = function replaceByFn(main, fn, keep) {
  main.forEach(function (m) {
    var out = fn(m);
    m.replaceWith(out, keep);
  });
  return main;
};

// support 'foo $0' replacements
var subDollarSign = function subDollarSign(input, main) {
  if (typeof input !== 'string') {
    return input;
  }
  var groups = main.groups();
  input = input.replace(dollarStub, function (a) {
    var num = a.replace(/\$/, '');
    if (groups.hasOwnProperty(num)) {
      return groups[num].text();
    }
    return a;
  });
  return input;
};
fns.replaceWith = function (input) {
  var keep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ptrs = this.fullPointer;
  var main = this;
  this.uncache();
  if (typeof input === 'function') {
    return replaceByFn(main, input, keep);
  }
  var terms = main.docs[0];
  if (!terms) return main;
  var isOriginalPossessive = keep.possessives && terms[terms.length - 1].tags.has('Possessive');
  var isOriginalTitleCase = keep.case && isTitleCase(terms[0].text);
  // support 'foo $0' replacements
  input = subDollarSign(input, main);
  var original = this.update(ptrs);
  // soften-up pointer
  ptrs = ptrs.map(function (ptr) {
    return ptr.slice(0, 3);
  });
  // original.freeze()
  var oldTags = (original.docs[0] || []).map(function (term) {
    return Array.from(term.tags);
  });
  var originalPre = original.docs[0][0].pre;
  var originalPost = original.docs[0][original.docs[0].length - 1].post;
  // slide this in
  if (typeof input === 'string') {
    input = this.fromText(input).compute('id');
  }
  main.insertAfter(input);
  // are we replacing part of a contraction?
  if (original.has('@hasContraction') && main.contractions) {
    var more = main.grow('@hasContraction+');
    more.contractions().expand();
  }
  // delete the original terms
  main.delete(original); //science.

  // keep "John's"
  if (isOriginalPossessive) {
    var tmp = main.docs[0];
    var term = tmp[tmp.length - 1];
    if (!term.tags.has('Possessive')) {
      term.text += "'s";
      term.normal += "'s";
      term.tags.add('Possessive');
    }
  }

  // try to keep some pre-punctuation
  if (originalPre && main.docs[0]) {
    main.docs[0][0].pre = originalPre;
  }
  // try to keep any post-punctuation
  if (originalPost && main.docs[0]) {
    var lastOne = main.docs[0][main.docs[0].length - 1];
    if (!lastOne.post.trim()) {
      lastOne.post = originalPost;
    }
  }

  // what should we return?
  var m = main.toView(ptrs).compute(['index', 'freeze', 'lexicon']);
  if (m.world.compute.preTagger) {
    m.compute('preTagger');
  }
  m.compute('unfreeze');
  // replace any old tags
  if (keep.tags) {
    m.terms().forEach(function (term, i) {
      term.tagSafe(oldTags[i]);
    });
  }
  if (!m.docs[0] || !m.docs[0][0]) return m;

  // try to co-erce case, too
  if (keep.case) {
    var transformCase = isOriginalTitleCase ? toTitleCase : toLowerCase;
    m.docs[0][0].text = transformCase(m.docs[0][0].text);
  }

  // console.log(input.docs[0])
  // let regs = input.docs[0].map(t => {
  //   return { id: t.id, optional: true }
  // })
  // m.after('(a|hoy)').debug()
  // m.growRight('(a|hoy)').debug()
  // console.log(m)
  return m;
};
fns.replace = function (match, input, keep) {
  if (match && !input) {
    return this.replaceWith(match, keep);
  }
  var m = this.match(match);
  if (!m.found) {
    return this;
  }
  this.soften();
  return m.replaceWith(input, keep);
};
var _default = exports.default = fns;
},{}],"node_modules/compromise/src/1-one/change/api/lib/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// transfer sentence-ending punctuation
var repairPunct = function repairPunct(terms, len) {
  var last = terms.length - 1;
  var from = terms[last];
  var to = terms[last - len];
  if (to && from) {
    to.post += from.post; //this isn't perfect.
    to.post = to.post.replace(/ +([.?!,;:])/, '$1');
    // don't allow any silly punctuation outcomes like ',!'
    to.post = to.post.replace(/[,;:]+([.?!])/, '$1');
  }
};

// remove terms from document json
var pluckOut = function pluckOut(document, nots) {
  nots.forEach(function (ptr) {
    var _ptr = _slicedToArray(ptr, 3),
      n = _ptr[0],
      start = _ptr[1],
      end = _ptr[2];
    var len = end - start;
    if (!document[n]) {
      return; // weird!
    }
    if (end === document[n].length && end > 1) {
      repairPunct(document[n], len);
    }
    document[n].splice(start, len); // replaces len terms at index start
  });
  // remove any now-empty sentences
  // (foreach + splice = 'mutable filter')
  for (var i = document.length - 1; i >= 0; i -= 1) {
    if (document[i].length === 0) {
      document.splice(i, 1);
      // remove any trailing whitespace before our removed sentence
      if (i === document.length && document[i - 1]) {
        var terms = document[i - 1];
        var lastTerm = terms[terms.length - 1];
        if (lastTerm) {
          lastTerm.post = lastTerm.post.trimEnd();
        }
      }
      // repair any downstream indexes
      // for (let k = i; k < document.length; k += 1) {
      //   document[k].forEach(term => term.index[0] -= 1)
      // }
    }
  }
  return document;
};
var _default = exports.default = pluckOut;
},{}],"node_modules/compromise/src/1-one/change/api/remove.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _remove = _interopRequireDefault(require("./lib/remove.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var fixPointers = function fixPointers(ptrs, gonePtrs) {
  ptrs = ptrs.map(function (ptr) {
    var _ptr = _slicedToArray(ptr, 1),
      n = _ptr[0];
    if (!gonePtrs[n]) {
      return ptr;
    }
    gonePtrs[n].forEach(function (no) {
      var len = no[2] - no[1];
      // does it effect our pointer?
      if (ptr[1] <= no[1] && ptr[2] >= no[2]) {
        ptr[2] -= len;
      }
    });
    return ptr;
  });

  // decrement any pointers after a now-empty pointer
  ptrs.forEach(function (ptr, i) {
    // is the pointer now empty?
    if (ptr[1] === 0 && ptr[2] == 0) {
      // go down subsequent pointers
      for (var n = i + 1; n < ptrs.length; n += 1) {
        ptrs[n][0] -= 1;
        if (ptrs[n][0] < 0) {
          ptrs[n][0] = 0;
        }
      }
    }
  });
  // remove any now-empty pointers
  ptrs = ptrs.filter(function (ptr) {
    return ptr[2] - ptr[1] > 0;
  });

  // remove old hard-pointers
  ptrs = ptrs.map(function (ptr) {
    ptr[3] = null;
    ptr[4] = null;
    return ptr;
  });
  return ptrs;
};
var methods = {
  /** */
  remove: function remove(reg) {
    var indexN = this.methods.one.pointer.indexN;
    this.uncache();
    // two modes:
    //  - a. remove self, from full parent
    var self = this.all();
    var not = this;
    //  - b. remove a match, from self
    if (reg) {
      self = this;
      not = this.match(reg);
    }
    var isFull = !self.ptrs;
    // is it part of a contraction?
    if (not.has('@hasContraction') && not.contractions) {
      var more = not.grow('@hasContraction');
      more.contractions().expand();
    }
    var ptrs = self.fullPointer;
    var nots = not.fullPointer.reverse();
    // remove them from the actual document)
    var document = (0, _remove.default)(this.document, nots);
    // repair our pointers
    var gonePtrs = indexN(nots);
    ptrs = fixPointers(ptrs, gonePtrs);
    // clean up our original inputs
    self.ptrs = ptrs;
    self.document = document;
    self.compute('index');
    // if we started zoomed-out, try to end zoomed-out
    if (isFull) {
      self.ptrs = undefined;
    }
    if (!reg) {
      this.ptrs = [];
      return self.none();
    }
    var res = self.toView(ptrs); //return new document
    return res;
  }
};

// aliases
methods.delete = methods.remove;
var _default = exports.default = methods;
},{"./lib/remove.js":"node_modules/compromise/src/1-one/change/api/lib/remove.js"}],"node_modules/compromise/src/1-one/change/api/whitespace.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var methods = {
  /** add this punctuation or whitespace before each match: */
  pre: function pre(str, concat) {
    if (str === undefined && this.found) {
      return this.docs[0][0].pre;
    }
    this.docs.forEach(function (terms) {
      var term = terms[0];
      if (concat === true) {
        term.pre += str;
      } else {
        term.pre = str;
      }
    });
    return this;
  },
  /** add this punctuation or whitespace after each match: */
  post: function post(str, concat) {
    if (str === undefined) {
      var last = this.docs[this.docs.length - 1];
      return last[last.length - 1].post;
    }
    this.docs.forEach(function (terms) {
      var term = terms[terms.length - 1];
      if (concat === true) {
        term.post += str;
      } else {
        term.post = str;
      }
    });
    return this;
  },
  /** remove whitespace from start/end */
  trim: function trim() {
    if (!this.found) {
      return this;
    }
    var docs = this.docs;
    var start = docs[0][0];
    start.pre = start.pre.trimStart();
    var last = docs[docs.length - 1];
    var end = last[last.length - 1];
    end.post = end.post.trimEnd();
    return this;
  },
  /** connect words with hyphen, and remove whitespace */
  hyphenate: function hyphenate() {
    this.docs.forEach(function (terms) {
      //remove whitespace
      terms.forEach(function (t, i) {
        if (i !== 0) {
          t.pre = '';
        }
        if (terms[i + 1]) {
          t.post = '-';
        }
      });
    });
    return this;
  },
  /** remove hyphens between words, and set whitespace */
  dehyphenate: function dehyphenate() {
    var hasHyphen = /[-–—]/;
    this.docs.forEach(function (terms) {
      //remove whitespace
      terms.forEach(function (t) {
        if (hasHyphen.test(t.post)) {
          t.post = ' ';
        }
      });
    });
    return this;
  },
  /** add quotations around these matches */
  toQuotations: function toQuotations(start, end) {
    start = start || "\"";
    end = end || "\"";
    this.docs.forEach(function (terms) {
      terms[0].pre = start + terms[0].pre;
      var last = terms[terms.length - 1];
      last.post = end + last.post;
    });
    return this;
  },
  /** add brackets around these matches */
  toParentheses: function toParentheses(start, end) {
    start = start || "(";
    end = end || ")";
    this.docs.forEach(function (terms) {
      terms[0].pre = start + terms[0].pre;
      var last = terms[terms.length - 1];
      last.post = end + last.post;
    });
    return this;
  }
};

// aliases
methods.deHyphenate = methods.dehyphenate;
methods.toQuotation = methods.toQuotations;
var _default = exports.default = methods;
},{}],"node_modules/compromise/src/1-one/change/api/lib/_sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/** alphabetical order */
var alpha = function alpha(a, b) {
  if (a.normal < b.normal) {
    return -1;
  }
  if (a.normal > b.normal) {
    return 1;
  }
  return 0;
};

/** count the # of characters of each match */
var length = function length(a, b) {
  var left = a.normal.trim().length;
  var right = b.normal.trim().length;
  if (left < right) {
    return 1;
  }
  if (left > right) {
    return -1;
  }
  return 0;
};

/** count the # of terms in each match */
var wordCount = function wordCount(a, b) {
  if (a.words < b.words) {
    return 1;
  }
  if (a.words > b.words) {
    return -1;
  }
  return 0;
};

/** count the # of terms in each match */
var sequential = function sequential(a, b) {
  if (a[0] < b[0]) {
    return 1;
  }
  if (a[0] > b[0]) {
    return -1;
  }
  return a[1] > b[1] ? 1 : -1;
};

/** sort by # of duplicates in the document*/
var byFreq = function byFreq(arr) {
  var counts = {};
  arr.forEach(function (o) {
    counts[o.normal] = counts[o.normal] || 0;
    counts[o.normal] += 1;
  });
  // sort by freq
  arr.sort(function (a, b) {
    var left = counts[a.normal];
    var right = counts[b.normal];
    if (left < right) {
      return 1;
    }
    if (left > right) {
      return -1;
    }
    return 0;
  });
  return arr;
};
var _default = exports.default = {
  alpha: alpha,
  length: length,
  wordCount: wordCount,
  sequential: sequential,
  byFreq: byFreq
};
},{}],"node_modules/compromise/src/1-one/change/api/sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _sort = _interopRequireDefault(require("./lib/_sort.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// aliases
var seqNames = new Set(['index', 'sequence', 'seq', 'sequential', 'chron', 'chronological']);
var freqNames = new Set(['freq', 'frequency', 'topk', 'repeats']);
var alphaNames = new Set(['alpha', 'alphabetical']);

// support function as parameter
var customSort = function customSort(view, fn) {
  var ptrs = view.fullPointer;
  ptrs = ptrs.sort(function (a, b) {
    a = view.update([a]);
    b = view.update([b]);
    return fn(a, b);
  });
  view.ptrs = ptrs; //mutate original
  return view;
};

/** re-arrange the order of the matches (in place) */
var sort = function sort(input) {
  var docs = this.docs,
    pointer = this.pointer;
  this.uncache();
  if (typeof input === 'function') {
    return customSort(this, input);
  }
  input = input || 'alpha';
  var ptrs = pointer || docs.map(function (_d, n) {
    return [n];
  });
  var arr = docs.map(function (terms, n) {
    return {
      index: n,
      words: terms.length,
      normal: terms.map(function (t) {
        return t.machine || t.normal || '';
      }).join(' '),
      pointer: ptrs[n]
    };
  });
  // 'chronological' sorting
  if (seqNames.has(input)) {
    input = 'sequential';
  }
  // alphabetical sorting
  if (alphaNames.has(input)) {
    input = 'alpha';
  }
  // sort by frequency
  if (freqNames.has(input)) {
    arr = _sort.default.byFreq(arr);
    return this.update(arr.map(function (o) {
      return o.pointer;
    }));
  }
  // apply sort method on each phrase
  if (typeof _sort.default[input] === 'function') {
    arr = arr.sort(_sort.default[input]);
    return this.update(arr.map(function (o) {
      return o.pointer;
    }));
  }
  return this;
};

/** reverse the order of the matches, but not the words or index */
var reverse = function reverse() {
  var ptrs = this.pointer || this.docs.map(function (_d, n) {
    return [n];
  });
  ptrs = [].concat(ptrs);
  ptrs = ptrs.reverse();
  if (this._cache) {
    this._cache = this._cache.reverse();
  }
  return this.update(ptrs);
};

/** remove any duplicate matches */
var unique = function unique() {
  var already = new Set();
  var res = this.filter(function (m) {
    var txt = m.text('machine');
    if (already.has(txt)) {
      return false;
    }
    already.add(txt);
    return true;
  });
  // this.ptrs = res.ptrs //mutate original?
  return res; //.compute('index')
};
var _default = exports.default = {
  unique: unique,
  reverse: reverse,
  sort: sort
};
},{"./lib/_sort.js":"node_modules/compromise/src/1-one/change/api/lib/_sort.js"}],"node_modules/compromise/src/1-one/change/api/concat.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

// append a new document, somehow
var combineDocs = function combineDocs(homeDocs, inputDocs) {
  if (homeDocs.length > 0) {
    // add a space
    var end = homeDocs[homeDocs.length - 1];
    var last = end[end.length - 1];
    if (/ /.test(last.post) === false) {
      last.post += ' ';
    }
  }
  homeDocs = homeDocs.concat(inputDocs);
  return homeDocs;
};
var combineViews = function combineViews(home, input) {
  // is it a view from the same document?
  if (home.document === input.document) {
    var _ptrs = home.fullPointer.concat(input.fullPointer);
    return home.toView(_ptrs).compute('index');
  }
  // update n of new pointer, to end of our pointer
  var ptrs = input.fullPointer;
  ptrs.forEach(function (a) {
    a[0] += home.document.length;
  });
  home.document = combineDocs(home.document, input.docs);
  return home.all();
};
var _default = exports.default = {
  // add string as new match/sentence
  concat: function concat(input) {
    // parse and splice-in new terms
    if (typeof input === 'string') {
      var more = this.fromText(input);
      // easy concat
      if (!this.found || !this.ptrs) {
        this.document = this.document.concat(more.document);
      } else {
        var _this$document;
        // if we are in the middle, this is actually a splice operation
        var ptrs = this.fullPointer;
        var at = ptrs[ptrs.length - 1][0];
        (_this$document = this.document).splice.apply(_this$document, [at, 0].concat(_toConsumableArray(more.document)));
      }
      // put the docs
      return this.all().compute('index');
    }
    // plop some view objects together
    if (_typeof(input) === 'object' && input.isView) {
      return combineViews(this, input);
    }
    // assume it's an array of terms
    if (isArray(input)) {
      var docs = combineDocs(this.document, input);
      this.document = docs;
      return this.all();
    }
    return this;
  }
};
},{}],"node_modules/compromise/src/1-one/change/api/harden.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// add indexes to pointers
var harden = function harden() {
  this.ptrs = this.fullPointer;
  return this;
};
// remove indexes from pointers
var soften = function soften() {
  var ptr = this.ptrs;
  if (!ptr || ptr.length < 1) {
    return this;
  }
  ptr = ptr.map(function (a) {
    return a.slice(0, 3);
  });
  this.ptrs = ptr;
  return this;
};
var _default = exports.default = {
  harden: harden,
  soften: soften
};
},{}],"node_modules/compromise/src/1-one/change/api/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _case = _interopRequireDefault(require("./case.js"));
var _insert = _interopRequireDefault(require("./insert.js"));
var _replace = _interopRequireDefault(require("./replace.js"));
var _remove = _interopRequireDefault(require("./remove.js"));
var _whitespace = _interopRequireDefault(require("./whitespace.js"));
var _sort = _interopRequireDefault(require("./sort.js"));
var _concat = _interopRequireDefault(require("./concat.js"));
var _harden = _interopRequireDefault(require("./harden.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var methods = Object.assign({}, _case.default, _insert.default, _replace.default, _remove.default, _whitespace.default, _sort.default, _concat.default, _harden.default);
var addAPI = function addAPI(View) {
  Object.assign(View.prototype, methods);
};
var _default = exports.default = addAPI;
},{"./case.js":"node_modules/compromise/src/1-one/change/api/case.js","./insert.js":"node_modules/compromise/src/1-one/change/api/insert.js","./replace.js":"node_modules/compromise/src/1-one/change/api/replace.js","./remove.js":"node_modules/compromise/src/1-one/change/api/remove.js","./whitespace.js":"node_modules/compromise/src/1-one/change/api/whitespace.js","./sort.js":"node_modules/compromise/src/1-one/change/api/sort.js","./concat.js":"node_modules/compromise/src/1-one/change/api/concat.js","./harden.js":"node_modules/compromise/src/1-one/change/api/harden.js"}],"node_modules/compromise/src/1-one/change/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _uuid = _interopRequireDefault(require("./uuid.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var compute = {
  id: function id(view) {
    var docs = view.docs;
    for (var n = 0; n < docs.length; n += 1) {
      for (var i = 0; i < docs[n].length; i += 1) {
        var term = docs[n][i];
        term.id = term.id || (0, _uuid.default)(term);
      }
    }
  }
};
var _default = exports.default = compute;
},{"./uuid.js":"node_modules/compromise/src/1-one/change/compute/uuid.js"}],"node_modules/compromise/src/1-one/change/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./api/index.js"));
var _index2 = _interopRequireDefault(require("./compute/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _index.default,
  compute: _index2.default
};
},{"./api/index.js":"node_modules/compromise/src/1-one/change/api/index.js","./compute/index.js":"node_modules/compromise/src/1-one/change/compute/index.js"}],"node_modules/compromise/src/1-one/contraction-one/model/contractions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// simple mappings
{
  word: '@',
  out: ['at']
}, {
  word: 'arent',
  out: ['are', 'not']
}, {
  word: 'alot',
  out: ['a', 'lot']
}, {
  word: 'brb',
  out: ['be', 'right', 'back']
}, {
  word: 'cannot',
  out: ['can', 'not']
}, {
  word: 'dun',
  out: ['do', 'not']
}, {
  word: "can't",
  out: ['can', 'not']
}, {
  word: "shan't",
  out: ['should', 'not']
}, {
  word: "won't",
  out: ['will', 'not']
}, {
  word: "that's",
  out: ['that', 'is']
}, {
  word: "what's",
  out: ['what', 'is']
}, {
  word: "let's",
  out: ['let', 'us']
},
// { word: "there's", out: ['there', 'is'] },
{
  word: 'dunno',
  out: ['do', 'not', 'know']
}, {
  word: 'gonna',
  out: ['going', 'to']
}, {
  word: 'gotta',
  out: ['have', 'got', 'to']
},
//hmm
{
  word: 'gimme',
  out: ['give', 'me']
}, {
  word: 'outta',
  out: ['out', 'of']
}, {
  word: 'tryna',
  out: ['trying', 'to']
}, {
  word: 'gtg',
  out: ['got', 'to', 'go']
}, {
  word: 'im',
  out: ['i', 'am']
}, {
  word: 'imma',
  out: ['I', 'will']
}, {
  word: 'imo',
  out: ['in', 'my', 'opinion']
}, {
  word: 'irl',
  out: ['in', 'real', 'life']
}, {
  word: 'ive',
  out: ['i', 'have']
}, {
  word: 'rn',
  out: ['right', 'now']
}, {
  word: 'tbh',
  out: ['to', 'be', 'honest']
}, {
  word: 'wanna',
  out: ['want', 'to']
}, {
  word: "c'mere",
  out: ['come', 'here']
}, {
  word: "c'mon",
  out: ['come', 'on']
},
// shoulda, coulda
{
  word: 'shoulda',
  out: ['should', 'have']
}, {
  word: 'coulda',
  out: ['coulda', 'have']
}, {
  word: 'woulda',
  out: ['woulda', 'have']
}, {
  word: 'musta',
  out: ['must', 'have']
}, {
  word: "tis",
  out: ['it', 'is']
}, {
  word: "twas",
  out: ['it', 'was']
}, {
  word: "y'know",
  out: ['you', 'know']
}, {
  word: "ne'er",
  out: ['never']
}, {
  word: "o'er",
  out: ['over']
},
// contraction-part mappings
{
  after: 'll',
  out: ['will']
}, {
  after: 've',
  out: ['have']
}, {
  after: 're',
  out: ['are']
}, {
  after: 'm',
  out: ['am']
},
// french contractions
{
  before: 'c',
  out: ['ce']
}, {
  before: 'm',
  out: ['me']
}, {
  before: 'n',
  out: ['ne']
}, {
  before: 'qu',
  out: ['que']
}, {
  before: 's',
  out: ['se']
}, {
  before: 't',
  out: ['tu']
},
// t'aime

// missing apostrophes
{
  word: 'shouldnt',
  out: ['should', 'not']
}, {
  word: 'couldnt',
  out: ['could', 'not']
}, {
  word: 'wouldnt',
  out: ['would', 'not']
}, {
  word: 'hasnt',
  out: ['has', 'not']
}, {
  word: 'wasnt',
  out: ['was', 'not']
}, {
  word: 'isnt',
  out: ['is', 'not']
}, {
  word: 'cant',
  out: ['can', 'not']
}, {
  word: 'dont',
  out: ['do', 'not']
}, {
  word: 'wont',
  out: ['will', 'not']
},
// apostrophe d
{
  word: 'howd',
  out: ['how', 'did']
}, {
  word: 'whatd',
  out: ['what', 'did']
}, {
  word: 'whend',
  out: ['when', 'did']
}, {
  word: 'whered',
  out: ['where', 'did']
}];
},{}],"node_modules/compromise/src/1-one/contraction-one/model/number-suffix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// number suffixes that are not units
var t = true;
var _default = exports.default = {
  'st': t,
  'nd': t,
  'rd': t,
  'th': t,
  'am': t,
  'pm': t,
  'max': t,
  '°': t,
  's': t,
  // 1990s
  'e': t,
  // 18e - french/spanish ordinal
  'er': t,
  //french 1er
  'ère': t,
  //''
  'ème': t //french 2ème
};
},{}],"node_modules/compromise/src/1-one/contraction-one/model/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _contractions = _interopRequireDefault(require("./contractions.js"));
var _numberSuffix = _interopRequireDefault(require("./number-suffix.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  one: {
    contractions: _contractions.default,
    numberSuffixes: _numberSuffix.default
  }
};
},{"./contractions.js":"node_modules/compromise/src/1-one/contraction-one/model/contractions.js","./number-suffix.js":"node_modules/compromise/src/1-one/contraction-one/model/number-suffix.js"}],"node_modules/compromise/src/1-one/contraction-one/compute/contractions/_splice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// put n new words where 1 word was
var insertContraction = function insertContraction(document, point, words) {
  var _document$n;
  var _point = _slicedToArray(point, 2),
    n = _point[0],
    w = _point[1];
  if (!words || words.length === 0) {
    return;
  }
  words = words.map(function (word, i) {
    word.implicit = word.text;
    word.machine = word.text;
    word.pre = '';
    word.post = '';
    word.text = '';
    word.normal = '';
    word.index = [n, w + i];
    return word;
  });
  if (words[0]) {
    // move whitespace over
    words[0].pre = document[n][w].pre;
    words[words.length - 1].post = document[n][w].post;
    // add the text/normal to the first term
    words[0].text = document[n][w].text;
    words[0].normal = document[n][w].normal; // move tags too?
  }
  // do the splice
  (_document$n = document[n]).splice.apply(_document$n, [w, 1].concat(_toConsumableArray(words)));
};
var _default = exports.default = insertContraction;
},{}],"node_modules/compromise/src/1-one/contraction-one/compute/contractions/apostrophe-d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasContraction = /'/;
//look for a past-tense verb
// const hasPastTense = (terms, i) => {
//   let after = terms.slice(i + 1, i + 3)
//   return after.some(t => t.tags.has('PastTense'))
// }
// he'd walked -> had
// how'd -> did
// he'd go -> would

var alwaysDid = new Set(['what', 'how', 'when', 'where', 'why']);

// after-words
var useWould = new Set(['be', 'go', 'start', 'think', 'need']);
var useHad = new Set(['been', 'gone']);
// they'd gone
// they'd go

// he'd been
//    he had been
//    he would been

var _apostropheD = function _apostropheD(terms, i) {
  var before = terms[i].normal.split(hasContraction)[0];

  // what'd, how'd
  if (alwaysDid.has(before)) {
    return [before, 'did'];
  }
  if (terms[i + 1]) {
    // they'd gone
    if (useHad.has(terms[i + 1].normal)) {
      return [before, 'had'];
    }
    // they'd go
    if (useWould.has(terms[i + 1].normal)) {
      return [before, 'would'];
    }
  }
  return null;
  //   if (hasPastTense(terms, i) === true) {
  //     return [before, 'had']
  //   }
  //   // had/would/did
  //   return [before, 'would']
};
var _default = exports.default = _apostropheD;
},{}],"node_modules/compromise/src/1-one/contraction-one/compute/contractions/apostrophe-t.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//ain't -> are/is not
var apostropheT = function apostropheT(terms, i) {
  if (terms[i].normal === "ain't" || terms[i].normal === 'aint') {
    return null; //do this in ./two/
  }
  var before = terms[i].normal.replace(/n't/, '');
  return [before, 'not'];
};
var _default = exports.default = apostropheT;
},{}],"node_modules/compromise/src/1-one/contraction-one/compute/contractions/french.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasContraction = /'/;
var isFeminine = /(e|é|aison|sion|tion)$/;
var isMasculine = /(age|isme|acle|ege|oire)$/;
// l'amour
var preL = function preL(terms, i) {
  // le/la
  var after = terms[i].normal.split(hasContraction)[1];
  // quick french gender disambig (rough)
  if (after && after.endsWith('e')) {
    return ['la', after];
  }
  return ['le', after];
};

// d'amerique
var preD = function preD(terms, i) {
  var after = terms[i].normal.split(hasContraction)[1];
  // quick guess for noun-agreement (rough)
  if (after && isFeminine.test(after) && !isMasculine.test(after)) {
    return ['du', after];
  } else if (after && after.endsWith('s')) {
    return ['des', after];
  }
  return ['de', after];
};

// j'aime
var preJ = function preJ(terms, i) {
  var after = terms[i].normal.split(hasContraction)[1];
  return ['je', after];
};
var _default = exports.default = {
  preJ: preJ,
  preL: preL,
  preD: preD
};
},{}],"node_modules/compromise/src/1-one/contraction-one/compute/contractions/number-range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isRange = /^([0-9.]{1,4}[a-z]{0,2}) ?[-–—] ?([0-9]{1,4}[a-z]{0,2})$/i;
var timeRange = /^([0-9]{1,2}(:[0-9][0-9])?(am|pm)?) ?[-–—] ?([0-9]{1,2}(:[0-9][0-9])?(am|pm)?)$/i;
var phoneNum = /^[0-9]{3}-[0-9]{4}$/;
var numberRange = function numberRange(terms, i) {
  var term = terms[i];
  var parts = term.text.match(isRange);
  if (parts !== null) {
    // 123-1234 is a phone number, not a number-range
    if (term.tags.has('PhoneNumber') === true || phoneNum.test(term.text)) {
      return null;
    }
    return [parts[1], 'to', parts[2]];
  } else {
    parts = term.text.match(timeRange);
    if (parts !== null) {
      return [parts[1], 'to', parts[4]];
    }
  }
  return null;
};
var _default = exports.default = numberRange;
},{}],"node_modules/compromise/src/1-one/contraction-one/compute/contractions/number-unit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var numUnit = /^([+-]?[0-9][.,0-9]*)([a-z°²³µ/]+)$/; //(must be lowercase)

var numberUnit = function numberUnit(terms, i, world) {
  var notUnit = world.model.one.numberSuffixes || {};
  var term = terms[i];
  var parts = term.text.match(numUnit);
  if (parts !== null) {
    // is it a recognized unit, like 'km'?
    var unit = parts[2].toLowerCase().trim();
    // don't split '3rd'
    if (notUnit.hasOwnProperty(unit)) {
      return null;
    }
    return [parts[1], unit]; //split it
  }
  return null;
};
var _default = exports.default = numberUnit;
},{}],"node_modules/compromise/src/1-one/contraction-one/compute/contractions/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _splice = _interopRequireDefault(require("./_splice.js"));
var _apostropheD = _interopRequireDefault(require("./apostrophe-d.js"));
var _apostropheT = _interopRequireDefault(require("./apostrophe-t.js"));
var _french = _interopRequireDefault(require("./french.js"));
var _numberRange = _interopRequireDefault(require("./number-range.js"));
var _numberUnit = _interopRequireDefault(require("./number-unit.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var byApostrophe = /'/;
var numDash = /^[0-9][^-–—]*[-–—].*?[0-9]/;

// run tagger on our new implicit terms
var reTag = function reTag(terms, view, start, len) {
  var tmp = view.update();
  tmp.document = [terms];
  // offer to re-tag neighbours, too
  var end = start + len;
  if (start > 0) {
    start -= 1;
  }
  if (terms[end]) {
    end += 1;
  }
  tmp.ptrs = [[0, start, end]];
};
var byEnd = {
  // ain't
  t: function t(terms, i) {
    return (0, _apostropheT.default)(terms, i);
  },
  // how'd
  d: function d(terms, i) {
    return (0, _apostropheD.default)(terms, i);
  }
};
var byStart = {
  // j'aime
  j: function j(terms, i) {
    return _french.default.preJ(terms, i);
  },
  // l'amour
  l: function l(terms, i) {
    return _french.default.preL(terms, i);
  },
  // d'amerique
  d: function d(terms, i) {
    return _french.default.preD(terms, i);
  }
};

// pull-apart known contractions from model
var knownOnes = function knownOnes(list, term, before, after) {
  for (var i = 0; i < list.length; i += 1) {
    var o = list[i];
    // look for word-word match (cannot-> [can, not])
    if (o.word === term.normal) {
      return o.out;
    }
    // look for after-match ('re -> [_, are])
    else if (after !== null && after === o.after) {
      return [before].concat(o.out);
    }
    // look for before-match (l' -> [le, _])
    else if (before !== null && before === o.before && after && after.length > 2) {
      return o.out.concat(after);
      // return [o.out, after] //typeof o.out === 'string' ? [o.out, after] : o.out(terms, i)
    }
  }
  return null;
};
var toDocs = function toDocs(words, view) {
  var doc = view.fromText(words.join(' '));
  doc.compute(['id', 'alias']);
  return doc.docs[0];
};

// there's is usually [there, is]
// but can be 'there has' for 'there has (..) been'
var thereHas = function thereHas(terms, i) {
  for (var k = i + 1; k < 5; k += 1) {
    if (!terms[k]) {
      break;
    }
    if (terms[k].normal === 'been') {
      return ['there', 'has'];
    }
  }
  return ['there', 'is'];
};

//really easy ones
var contractions = function contractions(view) {
  var world = view.world,
    document = view.document;
  var model = world.model,
    methods = world.methods;
  var list = model.one.contractions || [];
  // let units = new Set(model.one.units || [])
  // each sentence
  document.forEach(function (terms, n) {
    // loop through terms backwards
    for (var i = terms.length - 1; i >= 0; i -= 1) {
      var before = null;
      var after = null;
      if (byApostrophe.test(terms[i].normal) === true) {
        var res = terms[i].normal.split(byApostrophe);
        before = res[0];
        after = res[1];
      }
      // any known-ones, like 'dunno'?
      var words = knownOnes(list, terms[i], before, after);
      // ['foo', 's']
      if (!words && byEnd.hasOwnProperty(after)) {
        words = byEnd[after](terms, i, world);
      }
      // ['j', 'aime']
      if (!words && byStart.hasOwnProperty(before)) {
        words = byStart[before](terms, i);
      }
      // 'there is' vs 'there has'
      if (before === 'there' && after === 's') {
        words = thereHas(terms, i);
      }
      // actually insert the new terms
      if (words) {
        words = toDocs(words, view);
        (0, _splice.default)(document, [n, i], words);
        reTag(document[n], view, i, words.length);
        continue;
      }
      // '44-2' has special care
      if (numDash.test(terms[i].normal)) {
        words = (0, _numberRange.default)(terms, i);
        if (words) {
          words = toDocs(words, view);
          (0, _splice.default)(document, [n, i], words);
          methods.one.setTag(words, 'NumberRange', world); //add custom tag
          // is it a time-range, like '5-9pm'
          if (words[2] && words[2].tags.has('Time')) {
            methods.one.setTag([words[0]], 'Time', world, null, 'time-range');
          }
          reTag(document[n], view, i, words.length);
        }
        continue;
      }
      // split-apart '4km'
      words = (0, _numberUnit.default)(terms, i, world);
      if (words) {
        words = toDocs(words, view);
        (0, _splice.default)(document, [n, i], words);
        methods.one.setTag([words[1]], 'Unit', world, null, 'contraction-unit');
      }
    }
  });
};
var _default = exports.default = contractions;
},{"./_splice.js":"node_modules/compromise/src/1-one/contraction-one/compute/contractions/_splice.js","./apostrophe-d.js":"node_modules/compromise/src/1-one/contraction-one/compute/contractions/apostrophe-d.js","./apostrophe-t.js":"node_modules/compromise/src/1-one/contraction-one/compute/contractions/apostrophe-t.js","./french.js":"node_modules/compromise/src/1-one/contraction-one/compute/contractions/french.js","./number-range.js":"node_modules/compromise/src/1-one/contraction-one/compute/contractions/number-range.js","./number-unit.js":"node_modules/compromise/src/1-one/contraction-one/compute/contractions/number-unit.js"}],"node_modules/compromise/src/1-one/contraction-one/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./contractions/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  contractions: _index.default
};
},{"./contractions/index.js":"node_modules/compromise/src/1-one/contraction-one/compute/contractions/index.js"}],"node_modules/compromise/src/1-one/contraction-one/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./model/index.js"));
var _index2 = _interopRequireDefault(require("./compute/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var plugin = {
  model: _index.default,
  compute: _index2.default,
  hooks: ['contractions']
};
var _default = exports.default = plugin;
},{"./model/index.js":"node_modules/compromise/src/1-one/contraction-one/model/index.js","./compute/index.js":"node_modules/compromise/src/1-one/contraction-one/compute/index.js"}],"node_modules/compromise/src/1-one/freeze/compute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var freeze = function freeze(view) {
  var world = view.world;
  var _view$world = view.world,
    model = _view$world.model,
    methods = _view$world.methods;
  var setTag = methods.one.setTag;
  var frozenLex = model.one.frozenLex;
  var multi = model.one._multiCache || {};
  view.docs.forEach(function (terms) {
    for (var i = 0; i < terms.length; i += 1) {
      // basic lexicon lookup
      var t = terms[i];
      var word = t.machine || t.normal;

      // test a multi-word
      if (multi[word] !== undefined && terms[i + 1]) {
        var end = i + multi[word] - 1;
        for (var k = end; k > i; k -= 1) {
          var words = terms.slice(i, k + 1);
          var str = words.map(function (term) {
            return term.machine || term.normal;
          }).join(' ');
          // lookup frozen lexicon
          if (frozenLex.hasOwnProperty(str) === true) {
            setTag(words, frozenLex[str], world, false, '1-frozen-multi-lexicon');
            words.forEach(function (term) {
              return term.frozen = true;
            });
            continue;
          }
        }
      }
      // test single word
      if (frozenLex[word] !== undefined && frozenLex.hasOwnProperty(word)) {
        setTag([t], frozenLex[word], world, false, '1-freeze-lexicon');
        t.frozen = true;
        continue;
      }
    }
  });
};
var unfreeze = function unfreeze(view) {
  view.docs.forEach(function (ts) {
    ts.forEach(function (term) {
      delete term.frozen;
    });
  });
  return view;
};
var _default = exports.default = {
  frozen: freeze,
  freeze: freeze,
  unfreeze: unfreeze
};
},{}],"node_modules/compromise/src/1-one/freeze/debug.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/* eslint-disable no-console */
var blue = function blue(str) {
  return '\x1b[34m' + str + '\x1b[0m';
};
var dim = function dim(str) {
  return '\x1b[3m\x1b[2m' + str + '\x1b[0m';
};
var debug = function debug(view) {
  view.docs.forEach(function (terms) {
    console.log(blue('\n  ┌─────────'));
    terms.forEach(function (t) {
      var str = "  ".concat(dim('│'), "  ");
      var txt = t.implicit || t.text || '-';
      if (t.frozen === true) {
        str += "".concat(blue(txt), " \u2744\uFE0F");
      } else {
        str += dim(txt);
      }
      console.log(str);
    });
  });
};
var _default = exports.default = debug;
},{}],"node_modules/compromise/src/1-one/freeze/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _compute = _interopRequireDefault(require("./compute.js"));
var _debug = _interopRequireDefault(require("./debug.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  // add .compute('freeze')
  compute: _compute.default,
  mutate: function mutate(world) {
    var methods = world.methods.one;
    // add @isFrozen method
    methods.termMethods.isFrozen = function (term) {
      return term.frozen === true;
    };
    // adds `.debug('frozen')`
    methods.debug.freeze = _debug.default;
    methods.debug.frozen = _debug.default;
  },
  api: function api(View) {
    // set all terms to reject any desctructive tags
    View.prototype.freeze = function () {
      this.docs.forEach(function (ts) {
        ts.forEach(function (term) {
          term.frozen = true;
        });
      });
      return this;
    };
    // reset all terms to allow  any desctructive tags
    View.prototype.unfreeze = function () {
      this.compute('unfreeze');
    };
    // return all frozen terms
    View.prototype.isFrozen = function () {
      return this.match('@isFrozen+');
    };
  },
  // run it in init
  hooks: ['freeze']
};
},{"./compute.js":"node_modules/compromise/src/1-one/freeze/compute.js","./debug.js":"node_modules/compromise/src/1-one/freeze/debug.js"}],"node_modules/compromise/src/1-one/lexicon/compute/multi-word.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// scan-ahead to match multiple-word terms - 'jack rabbit'
var multiWord = function multiWord(terms, start_i, world) {
  var model = world.model,
    methods = world.methods;
  var setTag = methods.one.setTag;
  var multi = model.one._multiCache || {};
  var _ref = model.one || {},
    lexicon = _ref.lexicon;
  var t = terms[start_i];
  var word = t.machine || t.normal;

  // found a word to scan-ahead on
  if (multi[word] !== undefined && terms[start_i + 1]) {
    var end = start_i + multi[word] - 1;
    for (var i = end; i > start_i; i -= 1) {
      var words = terms.slice(start_i, i + 1);
      if (words.length <= 1) {
        return false;
      }
      var str = words.map(function (term) {
        return term.machine || term.normal;
      }).join(' ');
      // lookup regular lexicon
      if (lexicon.hasOwnProperty(str) === true) {
        var tag = lexicon[str];
        setTag(words, tag, world, false, '1-multi-lexicon');
        // special case for phrasal-verbs - 2nd word is a #Particle
        if (tag && tag.length === 2 && (tag[0] === 'PhrasalVerb' || tag[1] === 'PhrasalVerb')) {
          setTag([words[1]], 'Particle', world, false, '1-phrasal-particle');
        }
        return true;
      }
    }
    return false;
  }
  return null;
};
var _default = exports.default = multiWord;
},{}],"node_modules/compromise/src/1-one/lexicon/compute/single-word.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var prefix = /^(under|over|mis|re|un|dis|semi|pre|post)-?/;
// anti|non|extra|inter|intra|over
var allowPrefix = new Set(['Verb', 'Infinitive', 'PastTense', 'Gerund', 'PresentTense', 'Adjective', 'Participle']);

// tag any words in our lexicon
var checkLexicon = function checkLexicon(terms, i, world) {
  var model = world.model,
    methods = world.methods;
  // const fastTag = methods.one.fastTag
  var setTag = methods.one.setTag;
  var lexicon = model.one.lexicon;

  // basic lexicon lookup
  var t = terms[i];
  var word = t.machine || t.normal;
  // normal lexicon lookup
  if (lexicon[word] !== undefined && lexicon.hasOwnProperty(word)) {
    setTag([t], lexicon[word], world, false, '1-lexicon');
    return true;
  }
  // lookup aliases in the lexicon
  if (t.alias) {
    var found = t.alias.find(function (str) {
      return lexicon.hasOwnProperty(str);
    });
    if (found) {
      setTag([t], lexicon[found], world, false, '1-lexicon-alias');
      return true;
    }
  }
  // prefixing for verbs/adjectives
  if (prefix.test(word) === true) {
    var stem = word.replace(prefix, '');
    if (lexicon.hasOwnProperty(stem) && stem.length > 3) {
      // only allow prefixes for verbs/adjectives
      if (allowPrefix.has(lexicon[stem])) {
        // console.log('->', word, stem, lexicon[stem])
        setTag([t], lexicon[stem], world, false, '1-lexicon-prefix');
        return true;
      }
    }
  }
  return null;
};
var _default = exports.default = checkLexicon;
},{}],"node_modules/compromise/src/1-one/lexicon/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _multiWord = _interopRequireDefault(require("./multi-word.js"));
var _singleWord = _interopRequireDefault(require("./single-word.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// tag any words in our lexicon - even if it hasn't been filled-up yet
// rest of pre-tagger is in ./two/preTagger
var lexicon = function lexicon(view) {
  var world = view.world;
  // loop through our terms
  view.docs.forEach(function (terms) {
    for (var i = 0; i < terms.length; i += 1) {
      if (terms[i].tags.size === 0) {
        var found = null;
        found = found || (0, _multiWord.default)(terms, i, world);
        // lookup known words
        found = found || (0, _singleWord.default)(terms, i, world);
      }
    }
  });
};
var _default = exports.default = {
  lexicon: lexicon
};
},{"./multi-word.js":"node_modules/compromise/src/1-one/lexicon/compute/multi-word.js","./single-word.js":"node_modules/compromise/src/1-one/lexicon/compute/single-word.js"}],"node_modules/compromise/src/1-one/lexicon/methods/expand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// derive clever things from our lexicon key-value pairs
var expand = function expand(words) {
  // const { methods, model } = world
  var lex = {};
  // console.log('start:', Object.keys(lex).length)
  var _multi = {};
  // go through each word in this key-value obj:
  Object.keys(words).forEach(function (word) {
    var tag = words[word];
    // normalize lexicon a little bit
    word = word.toLowerCase().trim();
    word = word.replace(/'s\b/, '');
    // cache multi-word terms
    var split = word.split(/ /);
    if (split.length > 1) {
      // prefer longer ones
      if (_multi[split[0]] === undefined || split.length > _multi[split[0]]) {
        _multi[split[0]] = split.length;
      }
    }
    lex[word] = lex[word] || tag;
  });
  // cleanup
  delete lex[''];
  delete lex[null];
  delete lex[' '];
  return {
    lex: lex,
    _multi: _multi
  };
};
var _default = exports.default = expand;
},{}],"node_modules/compromise/src/1-one/lexicon/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _expand = _interopRequireDefault(require("./expand.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  one: {
    expandLexicon: _expand.default
  }
};
},{"./expand.js":"node_modules/compromise/src/1-one/lexicon/methods/expand.js"}],"node_modules/compromise/src/1-one/lexicon/lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/** insert new words/phrases into the lexicon */
var addWords = function addWords(words) {
  var isFrozen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var world = this.world();
  var methods = world.methods,
    model = world.model;
  if (!words) {
    return;
  }
  // normalize tag vals
  Object.keys(words).forEach(function (k) {
    if (typeof words[k] === 'string' && words[k].startsWith('#')) {
      words[k] = words[k].replace(/^#/, '');
    }
  });
  // these words go into a seperate lexicon
  if (isFrozen === true) {
    var _methods$one$expandLe = methods.one.expandLexicon(words, world),
      _lex = _methods$one$expandLe.lex,
      _multi2 = _methods$one$expandLe._multi;
    Object.assign(model.one._multiCache, _multi2);
    Object.assign(model.one.frozenLex, _lex);
    return;
  }
  // add some words to our lexicon
  if (methods.two.expandLexicon) {
    // do fancy ./two version
    var _methods$two$expandLe = methods.two.expandLexicon(words, world),
      _lex2 = _methods$two$expandLe.lex,
      _multi3 = _methods$two$expandLe._multi;
    Object.assign(model.one.lexicon, _lex2);
    Object.assign(model.one._multiCache, _multi3);
  }
  // do basic ./one version
  var _methods$one$expandLe2 = methods.one.expandLexicon(words, world),
    lex = _methods$one$expandLe2.lex,
    _multi = _methods$one$expandLe2._multi;
  Object.assign(model.one.lexicon, lex);
  Object.assign(model.one._multiCache, _multi);
};
var _default = exports.default = {
  addWords: addWords
};
},{}],"node_modules/compromise/src/1-one/lexicon/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./compute/index.js"));
var _index2 = _interopRequireDefault(require("./methods/index.js"));
var _lib = _interopRequireDefault(require("./lib.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var model = {
  one: {
    lexicon: {},
    //setup blank lexicon
    _multiCache: {},
    frozenLex: {} //2nd lexicon
  }
};
var _default = exports.default = {
  model: model,
  methods: _index2.default,
  compute: _index.default,
  lib: _lib.default,
  hooks: ['lexicon']
};
},{"./compute/index.js":"node_modules/compromise/src/1-one/lexicon/compute/index.js","./methods/index.js":"node_modules/compromise/src/1-one/lexicon/methods/index.js","./lib.js":"node_modules/compromise/src/1-one/lexicon/lib.js"}],"node_modules/compromise/src/1-one/lookup/api/buildTrie/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// edited by Spencer Kelly
// credit to https://github.com/BrunoRB/ahocorasick by Bruno Roberto Búrigo.

var tokenize = function tokenize(phrase, world) {
  var methods = world.methods,
    model = world.model;
  var terms = methods.one.tokenize.splitTerms(phrase, model).map(function (t) {
    return methods.one.tokenize.splitWhitespace(t, model);
  });
  return terms.map(function (term) {
    return term.text.toLowerCase();
  });
};

// turn an array or object into a compressed aho-corasick structure
var buildTrie = function buildTrie(phrases, world) {
  // const tokenize=methods.one.
  var goNext = [{}];
  var endAs = [null];
  var failTo = [0];
  var xs = [];
  var n = 0;
  phrases.forEach(function (phrase) {
    var curr = 0;
    // let wordsB = phrase.split(/ /g).filter(w => w)
    var words = tokenize(phrase, world);
    for (var i = 0; i < words.length; i++) {
      var word = words[i];
      if (goNext[curr] && goNext[curr].hasOwnProperty(word)) {
        curr = goNext[curr][word];
      } else {
        n++;
        goNext[curr][word] = n;
        goNext[n] = {};
        curr = n;
        endAs[n] = null;
      }
    }
    endAs[curr] = [words.length];
  });
  // f(s) = 0 for all states of depth 1 (the ones from which the 0 state can transition to)
  for (var word in goNext[0]) {
    n = goNext[0][word];
    failTo[n] = 0;
    xs.push(n);
  }
  while (xs.length) {
    var r = xs.shift();
    // for each symbol a such that g(r, a) = s
    var keys = Object.keys(goNext[r]);
    for (var i = 0; i < keys.length; i += 1) {
      var _word = keys[i];
      var s = goNext[r][_word];
      xs.push(s);
      // set state = f(r)
      n = failTo[r];
      while (n > 0 && !goNext[n].hasOwnProperty(_word)) {
        n = failTo[n];
      }
      if (goNext.hasOwnProperty(n)) {
        var fs = goNext[n][_word];
        failTo[s] = fs;
        if (endAs[fs]) {
          endAs[s] = endAs[s] || [];
          endAs[s] = endAs[s].concat(endAs[fs]);
        }
      } else {
        failTo[s] = 0;
      }
    }
  }
  return {
    goNext: goNext,
    endAs: endAs,
    failTo: failTo
  };
};
var _default = exports.default = buildTrie; // console.log(buildTrie(['smart and cool', 'smart and nice']))
},{}],"node_modules/compromise/src/1-one/lookup/api/scan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// follow our trie structure
var scanWords = function scanWords(terms, trie, opts) {
  var n = 0;
  var results = [];
  for (var i = 0; i < terms.length; i++) {
    var word = terms[i][opts.form] || terms[i].normal;
    // main match-logic loop:
    while (n > 0 && (trie.goNext[n] === undefined || !trie.goNext[n].hasOwnProperty(word))) {
      n = trie.failTo[n] || 0; // (usually back to 0)
    }
    // did we fail?
    if (!trie.goNext[n].hasOwnProperty(word)) {
      continue;
    }
    n = trie.goNext[n][word];
    if (trie.endAs[n]) {
      var arr = trie.endAs[n];
      for (var o = 0; o < arr.length; o++) {
        var len = arr[o];
        var term = terms[i - len + 1];
        var _term$index = _slicedToArray(term.index, 2),
          no = _term$index[0],
          start = _term$index[1];
        results.push([no, start, start + len, term.id]);
      }
    }
  }
  return results;
};
var cacheMiss = function cacheMiss(words, cache) {
  for (var i = 0; i < words.length; i += 1) {
    if (cache.has(words[i]) === true) {
      return false;
    }
  }
  return true;
};
var scan = function scan(view, trie, opts) {
  var results = [];
  opts.form = opts.form || 'normal';
  var docs = view.docs;
  if (!trie.goNext || !trie.goNext[0]) {
    console.error('Compromise invalid lookup trie'); //eslint-disable-line
    return view.none();
  }
  var firstWords = Object.keys(trie.goNext[0]);
  // do each phrase
  for (var i = 0; i < docs.length; i++) {
    // can we skip the phrase, all together?
    if (view._cache && view._cache[i] && cacheMiss(firstWords, view._cache[i]) === true) {
      continue;
    }
    var terms = docs[i];
    var found = scanWords(terms, trie, opts);
    if (found.length > 0) {
      results = results.concat(found);
    }
  }
  return view.update(results);
};
var _default = exports.default = scan;
},{}],"node_modules/compromise/src/1-one/lookup/api/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _index = _interopRequireDefault(require("./buildTrie/index.js"));
var _scan = _interopRequireDefault(require("./scan.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var isObject = function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
};
function _default(View) {
  /** find all matches in this document */
  View.prototype.lookup = function (input) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!input) {
      return this.none();
    }
    if (typeof input === 'string') {
      input = [input];
    }
    var trie = isObject(input) ? input : (0, _index.default)(input, this.world);
    var res = (0, _scan.default)(this, trie, opts);
    res = res.settle();
    return res;
  };
}
},{"./buildTrie/index.js":"node_modules/compromise/src/1-one/lookup/api/buildTrie/index.js","./scan.js":"node_modules/compromise/src/1-one/lookup/api/scan.js"}],"node_modules/compromise/src/1-one/lookup/api/buildTrie/compress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// chop-off tail of redundant vals at end of array
var truncate = function truncate(list, val) {
  for (var i = list.length - 1; i >= 0; i -= 1) {
    if (list[i] !== val) {
      list = list.slice(0, i + 1);
      return list;
    }
  }
  return list;
};

// prune trie a bit
var compress = function compress(trie) {
  trie.goNext = trie.goNext.map(function (o) {
    if (Object.keys(o).length === 0) {
      return undefined;
    }
    return o;
  });
  // chop-off tail of undefined vals in goNext array
  trie.goNext = truncate(trie.goNext, undefined);
  // chop-off tail of zeros in failTo array
  trie.failTo = truncate(trie.failTo, 0);
  // chop-off tail of nulls in endAs array
  trie.endAs = truncate(trie.endAs, null);
  return trie;
};
var _default = exports.default = compress;
},{}],"node_modules/compromise/src/1-one/lookup/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./api/index.js"));
var _compress = _interopRequireDefault(require("./api/buildTrie/compress.js"));
var _index2 = _interopRequireDefault(require("./api/buildTrie/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/** pre-compile a list of matches to lookup */
var lib = {
  /** turn an array or object into a compressed trie*/
  buildTrie: function buildTrie(input) {
    var trie = (0, _index2.default)(input, this.world());
    return (0, _compress.default)(trie);
  }
};
// add alias
lib.compile = lib.buildTrie;
var _default = exports.default = {
  api: _index.default,
  lib: lib
};
},{"./api/index.js":"node_modules/compromise/src/1-one/lookup/api/index.js","./api/buildTrie/compress.js":"node_modules/compromise/src/1-one/lookup/api/buildTrie/compress.js","./api/buildTrie/index.js":"node_modules/compromise/src/1-one/lookup/api/buildTrie/index.js"}],"node_modules/compromise/src/1-one/match/api/_lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relPointer = exports.parseRegs = exports.isView = exports.isNet = exports.fixPointers = void 0;
var relPointer = exports.relPointer = function relPointer(ptrs, parent) {
  if (!parent) {
    return ptrs;
  }
  ptrs.forEach(function (ptr) {
    var n = ptr[0];
    if (parent[n]) {
      ptr[0] = parent[n][0]; //n
      ptr[1] += parent[n][1]; //start
      ptr[2] += parent[n][1]; //end
    }
  });
  return ptrs;
};

// make match-result relative to whole document
var fixPointers = exports.fixPointers = function fixPointers(res, parent) {
  var ptrs = res.ptrs,
    byGroup = res.byGroup;
  ptrs = relPointer(ptrs, parent);
  Object.keys(byGroup).forEach(function (k) {
    byGroup[k] = relPointer(byGroup[k], parent);
  });
  return {
    ptrs: ptrs,
    byGroup: byGroup
  };
};

// turn any matchable input intp a list of matches
var parseRegs = exports.parseRegs = function parseRegs(regs, opts, world) {
  var one = world.methods.one;
  if (typeof regs === 'number') {
    regs = String(regs);
  }
  // support param as string
  if (typeof regs === 'string') {
    regs = one.killUnicode(regs, world);
    regs = one.parseMatch(regs, opts, world);
  }
  return regs;
};
var isObject = function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
};

// did they pass-in a compromise object?
var isView = exports.isView = function isView(val) {
  return val && isObject(val) && val.isView === true;
};
var isNet = exports.isNet = function isNet(val) {
  return val && isObject(val) && val.isNet === true;
};
},{}],"node_modules/compromise/src/1-one/match/api/match.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("./_lib.js");
var match = function match(regs, group, opts) {
  var one = this.methods.one;
  // support param as view object
  if ((0, _lib.isView)(regs)) {
    return this.intersection(regs);
  }
  // support a compiled set of matches
  if ((0, _lib.isNet)(regs)) {
    return this.sweep(regs, {
      tagger: false
    }).view.settle();
  }
  regs = (0, _lib.parseRegs)(regs, opts, this.world);
  var todo = {
    regs: regs,
    group: group
  };
  var res = one.match(this.docs, todo, this._cache);
  var _fixPointers = (0, _lib.fixPointers)(res, this.fullPointer),
    ptrs = _fixPointers.ptrs,
    byGroup = _fixPointers.byGroup;
  var view = this.toView(ptrs);
  view._groups = byGroup;
  return view;
};
var matchOne = function matchOne(regs, group, opts) {
  var one = this.methods.one;
  // support at view as a param
  if ((0, _lib.isView)(regs)) {
    return this.intersection(regs).eq(0);
  }
  // support a compiled set of matches
  if ((0, _lib.isNet)(regs)) {
    return this.sweep(regs, {
      tagger: false,
      matchOne: true
    }).view;
  }
  regs = (0, _lib.parseRegs)(regs, opts, this.world);
  var todo = {
    regs: regs,
    group: group,
    justOne: true
  };
  var res = one.match(this.docs, todo, this._cache);
  var _fixPointers2 = (0, _lib.fixPointers)(res, this.fullPointer),
    ptrs = _fixPointers2.ptrs,
    byGroup = _fixPointers2.byGroup;
  var view = this.toView(ptrs);
  view._groups = byGroup;
  return view;
};
var has = function has(regs, group, opts) {
  var one = this.methods.one;
  // support view as input
  if ((0, _lib.isView)(regs)) {
    var _ptrs = this.intersection(regs).fullPointer;
    return _ptrs.length > 0;
  }
  // support a compiled set of matches
  if ((0, _lib.isNet)(regs)) {
    return this.sweep(regs, {
      tagger: false
    }).view.found;
  }
  regs = (0, _lib.parseRegs)(regs, opts, this.world);
  var todo = {
    regs: regs,
    group: group,
    justOne: true
  };
  var ptrs = one.match(this.docs, todo, this._cache).ptrs;
  return ptrs.length > 0;
};

// 'if'
var ifFn = function ifFn(regs, group, opts) {
  var _this = this;
  var one = this.methods.one;
  // support view as input
  if ((0, _lib.isView)(regs)) {
    return this.filter(function (m) {
      return m.intersection(regs).found;
    });
  }
  // support a compiled set of matches
  if ((0, _lib.isNet)(regs)) {
    var m = this.sweep(regs, {
      tagger: false
    }).view.settle();
    return this.if(m); //recurse with result
  }
  regs = (0, _lib.parseRegs)(regs, opts, this.world);
  var todo = {
    regs: regs,
    group: group,
    justOne: true
  };
  var ptrs = this.fullPointer;
  var cache = this._cache || [];
  ptrs = ptrs.filter(function (ptr, i) {
    var m = _this.update([ptr]);
    var res = one.match(m.docs, todo, cache[i]).ptrs;
    return res.length > 0;
  });
  var view = this.update(ptrs);
  // try and reconstruct the cache
  if (this._cache) {
    view._cache = ptrs.map(function (ptr) {
      return cache[ptr[0]];
    });
  }
  return view;
};
var ifNo = function ifNo(regs, group, opts) {
  var methods = this.methods;
  var one = methods.one;
  // support a view object as input
  if ((0, _lib.isView)(regs)) {
    return this.filter(function (m) {
      return !m.intersection(regs).found;
    });
  }
  // support a compiled set of matches
  if ((0, _lib.isNet)(regs)) {
    var m = this.sweep(regs, {
      tagger: false
    }).view.settle();
    return this.ifNo(m);
  }
  // otherwise parse the match string
  regs = (0, _lib.parseRegs)(regs, opts, this.world);
  var cache = this._cache || [];
  var view = this.filter(function (m, i) {
    var todo = {
      regs: regs,
      group: group,
      justOne: true
    };
    var ptrs = one.match(m.docs, todo, cache[i]).ptrs;
    return ptrs.length === 0;
  });
  // try to reconstruct the cache
  if (this._cache) {
    view._cache = view.ptrs.map(function (ptr) {
      return cache[ptr[0]];
    });
  }
  return view;
};
var _default = exports.default = {
  matchOne: matchOne,
  match: match,
  has: has,
  if: ifFn,
  ifNo: ifNo
};
},{"./_lib.js":"node_modules/compromise/src/1-one/match/api/_lib.js"}],"node_modules/compromise/src/1-one/match/api/lookaround.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var before = function before(regs, group, opts) {
  var indexN = this.methods.one.pointer.indexN;
  var pre = [];
  var byN = indexN(this.fullPointer);
  Object.keys(byN).forEach(function (k) {
    // check only the earliest match in the sentence
    var first = byN[k].sort(function (a, b) {
      return a[1] > b[1] ? 1 : -1;
    })[0];
    if (first[1] > 0) {
      pre.push([first[0], 0, first[1]]);
    }
  });
  var preWords = this.toView(pre);
  if (!regs) {
    return preWords;
  }
  return preWords.match(regs, group, opts);
};
var after = function after(regs, group, opts) {
  var indexN = this.methods.one.pointer.indexN;
  var post = [];
  var byN = indexN(this.fullPointer);
  var document = this.document;
  Object.keys(byN).forEach(function (k) {
    // check only the latest match in the sentence
    var last = byN[k].sort(function (a, b) {
      return a[1] > b[1] ? -1 : 1;
    })[0];
    var _last = _slicedToArray(last, 3),
      n = _last[0],
      end = _last[2];
    if (end < document[n].length) {
      post.push([n, end, document[n].length]);
    }
  });
  var postWords = this.toView(post);
  if (!regs) {
    return postWords;
  }
  return postWords.match(regs, group, opts);
};
var growLeft = function growLeft(regs, group, opts) {
  if (typeof regs === 'string') {
    regs = this.world.methods.one.parseMatch(regs, opts, this.world);
  }
  regs[regs.length - 1].end = true; // ensure matches are beside us ←
  var ptrs = this.fullPointer;
  this.forEach(function (m, n) {
    var more = m.before(regs, group);
    if (more.found) {
      var terms = more.terms();
      ptrs[n][1] -= terms.length;
      ptrs[n][3] = terms.docs[0][0].id;
    }
  });
  return this.update(ptrs);
};
var growRight = function growRight(regs, group, opts) {
  if (typeof regs === 'string') {
    regs = this.world.methods.one.parseMatch(regs, opts, this.world);
  }
  regs[0].start = true; // ensure matches are beside us →
  var ptrs = this.fullPointer;
  this.forEach(function (m, n) {
    var more = m.after(regs, group);
    if (more.found) {
      var terms = more.terms();
      ptrs[n][2] += terms.length;
      ptrs[n][4] = null; //remove end-id
    }
  });
  return this.update(ptrs);
};
var grow = function grow(regs, group, opts) {
  return this.growRight(regs, group, opts).growLeft(regs, group, opts);
};
var _default = exports.default = {
  before: before,
  after: after,
  growLeft: growLeft,
  growRight: growRight,
  grow: grow
};
},{}],"node_modules/compromise/src/1-one/match/api/split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var combine = function combine(left, right) {
  return [left[0], left[1], right[2]];
};
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};
var getDoc = function getDoc(reg, view, group) {
  if (typeof reg === 'string' || isArray(reg)) {
    return view.match(reg, group);
  }
  if (!reg) {
    return view.none();
  }
  return reg;
};
var addIds = function addIds(ptr, view) {
  var _ptr = _slicedToArray(ptr, 3),
    n = _ptr[0],
    start = _ptr[1],
    end = _ptr[2];
  if (view.document[n] && view.document[n][start]) {
    ptr[3] = ptr[3] || view.document[n][start].id;
    if (view.document[n][end - 1]) {
      ptr[4] = ptr[4] || view.document[n][end - 1].id;
    }
  }
  return ptr;
};
var methods = {};
// [before], [match], [after]
methods.splitOn = function (m, group) {
  var _this = this;
  var splitAll = this.methods.one.pointer.splitAll;
  var splits = getDoc(m, this, group).fullPointer;
  var all = splitAll(this.fullPointer, splits);
  var res = [];
  all.forEach(function (o) {
    res.push(o.passthrough);
    res.push(o.before);
    res.push(o.match);
    res.push(o.after);
  });
  res = res.filter(function (p) {
    return p;
  });
  res = res.map(function (p) {
    return addIds(p, _this);
  });
  return this.update(res);
};

// [before], [match after]
methods.splitBefore = function (m, group) {
  var _this2 = this;
  var splitAll = this.methods.one.pointer.splitAll;
  var splits = getDoc(m, this, group).fullPointer;
  var all = splitAll(this.fullPointer, splits);
  // repair matches to favor [match, after]
  // - instead of [before, match]
  for (var i = 0; i < all.length; i += 1) {
    // move a before to a preceding after
    if (!all[i].after && all[i + 1] && all[i + 1].before) {
      // ensure it's from the same original sentence
      if (all[i].match && all[i].match[0] === all[i + 1].before[0]) {
        all[i].after = all[i + 1].before;
        delete all[i + 1].before;
      }
    }
  }
  var res = [];
  all.forEach(function (o) {
    res.push(o.passthrough);
    res.push(o.before);
    // a, [x, b]
    if (o.match && o.after) {
      res.push(combine(o.match, o.after));
    } else {
      // a, [x], b
      res.push(o.match);
    }
  });
  res = res.filter(function (p) {
    return p;
  });
  res = res.map(function (p) {
    return addIds(p, _this2);
  });
  return this.update(res);
};

// [before match], [after]
methods.splitAfter = function (m, group) {
  var _this3 = this;
  var splitAll = this.methods.one.pointer.splitAll;
  var splits = getDoc(m, this, group).fullPointer;
  var all = splitAll(this.fullPointer, splits);
  var res = [];
  all.forEach(function (o) {
    res.push(o.passthrough);
    if (o.before && o.match) {
      res.push(combine(o.before, o.match));
    } else {
      res.push(o.before);
      res.push(o.match);
    }
    res.push(o.after);
  });
  res = res.filter(function (p) {
    return p;
  });
  res = res.map(function (p) {
    return addIds(p, _this3);
  });
  return this.update(res);
};
methods.split = methods.splitAfter;
var _default = exports.default = methods;
},{}],"node_modules/compromise/src/1-one/match/api/join.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// check if two pointers are perfectly consecutive
var isNeighbour = function isNeighbour(ptrL, ptrR) {
  // validate
  if (!ptrL || !ptrR) {
    return false;
  }
  // same sentence
  if (ptrL[0] !== ptrR[0]) {
    return false;
  }
  // ensure R starts where L ends
  return ptrL[2] === ptrR[1];
};

// join two neighbouring words, if they both match
var mergeIf = function mergeIf(doc, lMatch, rMatch) {
  var world = doc.world;
  var parseMatch = world.methods.one.parseMatch;
  lMatch = lMatch || '.$'; //defaults
  rMatch = rMatch || '^.';
  var leftMatch = parseMatch(lMatch, {}, world);
  var rightMatch = parseMatch(rMatch, {}, world);
  // ensure end-requirement to left-match, start-requiremnts to right match
  leftMatch[leftMatch.length - 1].end = true;
  rightMatch[0].start = true;
  // let's get going.
  var ptrs = doc.fullPointer;
  var res = [ptrs[0]];
  for (var i = 1; i < ptrs.length; i += 1) {
    var ptrL = res[res.length - 1];
    var ptrR = ptrs[i];
    var left = doc.update([ptrL]);
    var right = doc.update([ptrR]);
    // should we marge left+right?
    if (isNeighbour(ptrL, ptrR) && left.has(leftMatch) && right.has(rightMatch)) {
      // merge right ptr into existing result
      res[res.length - 1] = [ptrL[0], ptrL[1], ptrR[2], ptrL[3], ptrR[4]];
    } else {
      res.push(ptrR);
    }
  }
  // return new pointers
  return doc.update(res);
};
var methods = {
  //  merge only if conditions are met
  joinIf: function joinIf(lMatch, rMatch) {
    return mergeIf(this, lMatch, rMatch);
  },
  // merge all neighbouring matches
  join: function join() {
    return mergeIf(this);
  }
};
var _default = exports.default = methods;
},{}],"node_modules/compromise/src/1-one/match/api/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _match = _interopRequireDefault(require("./match.js"));
var _lookaround = _interopRequireDefault(require("./lookaround.js"));
var _split = _interopRequireDefault(require("./split.js"));
var _join = _interopRequireDefault(require("./join.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var methods = Object.assign({}, _match.default, _lookaround.default, _split.default, _join.default);
// aliases
methods.lookBehind = methods.before;
methods.lookBefore = methods.before;
methods.lookAhead = methods.after;
methods.lookAfter = methods.after;
methods.notIf = methods.ifNo;
var matchAPI = function matchAPI(View) {
  Object.assign(View.prototype, methods);
};
var _default = exports.default = matchAPI;
},{"./match.js":"node_modules/compromise/src/1-one/match/api/match.js","./lookaround.js":"node_modules/compromise/src/1-one/match/api/lookaround.js","./split.js":"node_modules/compromise/src/1-one/match/api/split.js","./join.js":"node_modules/compromise/src/1-one/match/api/join.js"}],"node_modules/compromise/src/1-one/match/methods/parseMatch/01-parseBlocks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// match  'foo /yes/' and not 'foo/no/bar'
var bySlashes = /(?:^|\s)([![^]*(?:<[^<]*>)?\/.*?[^\\/]\/[?\]+*$~]*)(?:\s|$)/;
// match '(yes) but not foo(no)bar'
var byParentheses = /([!~[^]*(?:<[^<]*>)?\([^)]+[^\\)]\)[?\]+*$~]*)(?:\s|$)/;
// okay
var byWord = / /g;
var isBlock = function isBlock(str) {
  return /^[![^]*(<[^<]*>)?\(/.test(str) && /\)[?\]+*$~]*$/.test(str);
};
var isReg = function isReg(str) {
  return /^[![^]*(<[^<]*>)?\//.test(str) && /\/[?\]+*$~]*$/.test(str);
};
var cleanUp = function cleanUp(arr) {
  arr = arr.map(function (str) {
    return str.trim();
  });
  arr = arr.filter(function (str) {
    return str;
  });
  return arr;
};
var parseBlocks = function parseBlocks(txt) {
  // parse by /regex/ first
  var arr = txt.split(bySlashes);
  var res = [];
  // parse by (blocks), next
  arr.forEach(function (str) {
    if (isReg(str)) {
      res.push(str);
      return;
    }
    res = res.concat(str.split(byParentheses));
  });
  res = cleanUp(res);
  // split by spaces, now
  var final = [];
  res.forEach(function (str) {
    if (isBlock(str)) {
      final.push(str);
    } else if (isReg(str)) {
      final.push(str);
    } else {
      final = final.concat(str.split(byWord));
    }
  });
  final = cleanUp(final);
  return final;
};
var _default = exports.default = parseBlocks;
},{}],"node_modules/compromise/src/1-one/match/methods/parseMatch/02-parseToken.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasMinMax = /\{([0-9]+)?(, *[0-9]*)?\}/;
var andSign = /&&/;
// const hasDash = /\p{Letter}[-–—]\p{Letter}/u
var captureName = new RegExp(/^<\s*(\S+)\s*>/);
/* break-down a match expression into this:
{
  word:'',
  tag:'',
  regex:'',

  start:false,
  end:false,
  negative:false,
  anything:false,
  greedy:false,
  optional:false,

  named:'',
  choices:[],
}
*/
var titleCase = function titleCase(str) {
  return str.charAt(0).toUpperCase() + str.substring(1);
};
var end = function end(str) {
  return str.charAt(str.length - 1);
};
var start = function start(str) {
  return str.charAt(0);
};
var stripStart = function stripStart(str) {
  return str.substring(1);
};
var stripEnd = function stripEnd(str) {
  return str.substring(0, str.length - 1);
};
var stripBoth = function stripBoth(str) {
  str = stripStart(str);
  str = stripEnd(str);
  return str;
};
//
var _parseToken = function parseToken(w, opts) {
  var obj = {};
  //collect any flags (do it twice)
  for (var i = 0; i < 2; i += 1) {
    //end-flag
    if (end(w) === '$') {
      obj.end = true;
      w = stripEnd(w);
    }
    //front-flag
    if (start(w) === '^') {
      obj.start = true;
      w = stripStart(w);
    }
    if (end(w) === '?') {
      obj.optional = true;
      w = stripEnd(w);
    }
    //capture group (this one can span multiple-terms)
    if (start(w) === '[' || end(w) === ']') {
      obj.group = null;
      if (start(w) === '[') {
        obj.groupStart = true;
      }
      if (end(w) === ']') {
        obj.groupEnd = true;
      }
      w = w.replace(/^\[/, '');
      w = w.replace(/\]$/, '');
      // Use capture group name
      if (start(w) === '<') {
        var res = captureName.exec(w);
        if (res.length >= 2) {
          obj.group = res[1];
          w = w.replace(res[0], '');
        }
      }
    }
    //back-flags
    if (end(w) === '+') {
      obj.greedy = true;
      w = stripEnd(w);
    }
    if (w !== '*' && end(w) === '*' && w !== '\\*') {
      obj.greedy = true;
      w = stripEnd(w);
    }
    if (start(w) === '!') {
      obj.negative = true;
      // obj.optional = true
      w = stripStart(w);
    }
    //soft-match
    if (start(w) === '~' && end(w) === '~' && w.length > 2) {
      w = stripBoth(w);
      obj.fuzzy = true;
      obj.min = opts.fuzzy || 0.85;
      if (/\(/.test(w) === false) {
        obj.word = w;
        return obj;
      }
    }

    //regex
    if (start(w) === '/' && end(w) === '/') {
      w = stripBoth(w);
      if (opts.caseSensitive) {
        obj.use = 'text';
      }
      obj.regex = new RegExp(w); //potential vuln - security/detect-non-literal-regexp
      return obj;
    }

    // support foo{1,9}
    if (hasMinMax.test(w) === true) {
      w = w.replace(hasMinMax, function (_a, b, c) {
        if (c === undefined) {
          // '{3}'	Exactly three times
          obj.min = Number(b);
          obj.max = Number(b);
        } else {
          c = c.replace(/, */, '');
          if (b === undefined) {
            // '{,9}' implied zero min
            obj.min = 0;
            obj.max = Number(c);
          } else {
            // '{2,4}' Two to four times
            obj.min = Number(b);
            // '{3,}' Three or more times
            obj.max = Number(c || 999);
          }
        }
        // use same method as '+'
        obj.greedy = true;
        // 0 as min means the same as '?'
        if (!obj.min) {
          obj.optional = true;
        }
        return '';
      });
    }

    //wrapped-flags
    if (start(w) === '(' && end(w) === ')') {
      // support (one && two)
      if (andSign.test(w)) {
        obj.choices = w.split(andSign);
        obj.operator = 'and';
      } else {
        obj.choices = w.split('|');
        obj.operator = 'or';
      }
      //remove '(' and ')'
      obj.choices[0] = stripStart(obj.choices[0]);
      var last = obj.choices.length - 1;
      obj.choices[last] = stripEnd(obj.choices[last]);
      // clean up the results
      obj.choices = obj.choices.map(function (s) {
        return s.trim();
      });
      obj.choices = obj.choices.filter(function (s) {
        return s;
      });
      //recursion alert!
      obj.choices = obj.choices.map(function (str) {
        return str.split(/ /g).map(function (s) {
          return _parseToken(s, opts);
        });
      });
      w = '';
    }

    //root/sense overloaded
    if (start(w) === '{' && end(w) === '}') {
      w = stripBoth(w);
      // obj.sense = w
      obj.root = w;
      if (/\//.test(w)) {
        var split = obj.root.split(/\//);
        obj.root = split[0];
        obj.pos = split[1];
        if (obj.pos === 'adj') {
          obj.pos = 'Adjective';
        }
        // titlecase
        obj.pos = obj.pos.charAt(0).toUpperCase() + obj.pos.substr(1).toLowerCase();
        // add sense-number too
        if (split[2] !== undefined) {
          obj.sense = split[2];
        }
      }
      return obj;
    }
    //chunks
    if (start(w) === '<' && end(w) === '>') {
      w = stripBoth(w);
      obj.chunk = titleCase(w);
      obj.greedy = true;
      return obj;
    }
    if (start(w) === '%' && end(w) === '%') {
      w = stripBoth(w);
      obj.switch = w;
      return obj;
    }
  }
  //do the actual token content
  if (start(w) === '#') {
    obj.tag = stripStart(w);
    obj.tag = titleCase(obj.tag);
    return obj;
  }
  //dynamic function on a term object
  if (start(w) === '@') {
    obj.method = stripStart(w);
    return obj;
  }
  if (w === '.') {
    obj.anything = true;
    return obj;
  }
  //support alone-astrix
  if (w === '*') {
    obj.anything = true;
    obj.greedy = true;
    obj.optional = true;
    return obj;
  }
  if (w) {
    //somehow handle encoded-chars?
    w = w.replace('\\*', '*');
    w = w.replace('\\.', '.');
    if (opts.caseSensitive) {
      obj.use = 'text';
    } else {
      w = w.toLowerCase();
    }
    obj.word = w;
  }
  return obj;
};
var _default = exports.default = _parseToken;
},{}],"node_modules/compromise/src/1-one/match/methods/parseMatch/03-splitHyphens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasDash = /[a-z0-9][-–—][a-z]/i;

// match 're-do' -> ['re','do']
var splitHyphens = function splitHyphens(regs, world) {
  var prefixes = world.model.one.prefixes;
  var _loop = function _loop(i) {
    var reg = regs[i];
    if (reg.word && hasDash.test(reg.word)) {
      var words = reg.word.split(/[-–—]/g);
      // don't split 're-cycle', etc
      if (prefixes.hasOwnProperty(words[0])) {
        return 1; // continue
      }
      words = words.filter(function (w) {
        return w;
      }).reverse();
      regs.splice(i, 1);
      words.forEach(function (w) {
        var obj = Object.assign({}, reg);
        obj.word = w;
        regs.splice(i, 0, obj);
      });
    }
  };
  for (var i = regs.length - 1; i >= 0; i -= 1) {
    if (_loop(i)) continue;
  }
  return regs;
};
var _default = exports.default = splitHyphens;
},{}],"node_modules/compromise/src/1-one/match/methods/parseMatch/04-inflect-root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// add all conjugations of this verb
var addVerbs = function addVerbs(token, world) {
  var _ref = world.methods.two.transform.verb || {},
    all = _ref.all;
  var str = token.root;
  if (!all) {
    return [];
  }
  return all(str, world.model);
};

// add all inflections of this noun
var addNoun = function addNoun(token, world) {
  var _ref2 = world.methods.two.transform.noun || {},
    all = _ref2.all;
  if (!all) {
    return [token.root];
  }
  return all(token.root, world.model);
};

// add all inflections of this adjective
var addAdjective = function addAdjective(token, world) {
  var _ref3 = world.methods.two.transform.adjective || {},
    all = _ref3.all;
  if (!all) {
    return [token.root];
  }
  return all(token.root, world.model);
};

// turn '{walk}' into 'walking', 'walked', etc
var inflectRoot = function inflectRoot(regs, world) {
  // do we have compromise/two?
  regs = regs.map(function (token) {
    // a reg to convert '{foo}'
    if (token.root) {
      // check if compromise/two is loaded
      if (world.methods.two && world.methods.two.transform) {
        var choices = [];
        // have explicitly set from POS - '{sweet/adjective}'
        if (token.pos) {
          if (token.pos === 'Verb') {
            choices = choices.concat(addVerbs(token, world));
          } else if (token.pos === 'Noun') {
            choices = choices.concat(addNoun(token, world));
          } else if (token.pos === 'Adjective') {
            choices = choices.concat(addAdjective(token, world));
          }
        } else {
          // do verb/noun/adj by default
          choices = choices.concat(addVerbs(token, world));
          choices = choices.concat(addNoun(token, world));
          choices = choices.concat(addAdjective(token, world));
        }
        choices = choices.filter(function (str) {
          return str;
        });
        if (choices.length > 0) {
          token.operator = 'or';
          token.fastOr = new Set(choices);
        }
      } else {
        // if no compromise/two, drop down into 'machine' lookup
        token.machine = token.root;
        delete token.id;
        delete token.root;
      }
    }
    return token;
  });
  return regs;
};
var _default = exports.default = inflectRoot;
},{}],"node_modules/compromise/src/1-one/match/methods/parseMatch/05-postProcess.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// name any [unnamed] capture-groups with a number
var nameGroups = function nameGroups(regs) {
  var index = 0;
  var inGroup = null;
  //'fill in' capture groups between start-end
  for (var i = 0; i < regs.length; i++) {
    var token = regs[i];
    if (token.groupStart === true) {
      inGroup = token.group;
      if (inGroup === null) {
        inGroup = String(index);
        index += 1;
      }
    }
    if (inGroup !== null) {
      token.group = inGroup;
    }
    if (token.groupEnd === true) {
      inGroup = null;
    }
  }
  return regs;
};

// optimize an 'or' lookup, when the (a|b|c) list is simple or multi-word
var doFastOrMode = function doFastOrMode(tokens) {
  return tokens.map(function (token) {
    if (token.choices !== undefined) {
      // make sure it's an OR
      if (token.operator !== 'or') {
        return token;
      }
      if (token.fuzzy === true) {
        return token;
      }
      // are they all straight-up words? then optimize them.
      var shouldPack = token.choices.every(function (block) {
        if (block.length !== 1) {
          return false;
        }
        var reg = block[0];
        // ~fuzzy~ words need more care
        if (reg.fuzzy === true) {
          return false;
        }
        // ^ and $ get lost in fastOr
        if (reg.start || reg.end) {
          return false;
        }
        if (reg.word !== undefined && reg.negative !== true && reg.optional !== true && reg.method !== true) {
          return true; //reg is simple-enough
        }
        return false;
      });
      if (shouldPack === true) {
        token.fastOr = new Set();
        token.choices.forEach(function (block) {
          token.fastOr.add(block[0].word);
        });
        delete token.choices;
      }
    }
    return token;
  });
};

// support ~(a|b|c)~
var fuzzyOr = function fuzzyOr(regs) {
  return regs.map(function (reg) {
    if (reg.fuzzy && reg.choices) {
      // pass fuzzy-data to each OR choice
      reg.choices.forEach(function (r) {
        if (r.length === 1 && r[0].word) {
          r[0].fuzzy = true;
          r[0].min = reg.min;
        }
      });
    }
    return reg;
  });
};
var postProcess = function postProcess(regs) {
  // ensure all capture groups names are filled between start and end
  regs = nameGroups(regs);
  // convert 'choices' format to 'fastOr' format
  regs = doFastOrMode(regs);
  // support ~(foo|bar)~
  regs = fuzzyOr(regs);
  return regs;
};
var _default = exports.default = postProcess;
},{}],"node_modules/compromise/src/1-one/match/methods/parseMatch/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _parseBlocks = _interopRequireDefault(require("./01-parseBlocks.js"));
var _parseToken = _interopRequireDefault(require("./02-parseToken.js"));
var _splitHyphens = _interopRequireDefault(require("./03-splitHyphens.js"));
var _inflectRoot = _interopRequireDefault(require("./04-inflect-root.js"));
var _postProcess = _interopRequireDefault(require("./05-postProcess.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/** parse a match-syntax string into json */
var syntax = function syntax(input, opts, world) {
  // fail-fast
  if (input === null || input === undefined || input === '') {
    return [];
  }
  opts = opts || {};
  if (typeof input === 'number') {
    input = String(input); //go for it?
  }
  var tokens = (0, _parseBlocks.default)(input);
  //turn them into objects
  tokens = tokens.map(function (str) {
    return (0, _parseToken.default)(str, opts);
  });
  // '~re-do~'
  tokens = (0, _splitHyphens.default)(tokens, world);
  // '{walk}'
  tokens = (0, _inflectRoot.default)(tokens, world);
  //clean up anything weird
  tokens = (0, _postProcess.default)(tokens, opts);
  // console.log(tokens)
  return tokens;
};
var _default = exports.default = syntax;
},{"./01-parseBlocks.js":"node_modules/compromise/src/1-one/match/methods/parseMatch/01-parseBlocks.js","./02-parseToken.js":"node_modules/compromise/src/1-one/match/methods/parseMatch/02-parseToken.js","./03-splitHyphens.js":"node_modules/compromise/src/1-one/match/methods/parseMatch/03-splitHyphens.js","./04-inflect-root.js":"node_modules/compromise/src/1-one/match/methods/parseMatch/04-inflect-root.js","./05-postProcess.js":"node_modules/compromise/src/1-one/match/methods/parseMatch/05-postProcess.js"}],"node_modules/compromise/src/1-one/match/methods/match/01-failFast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var anyIntersection = function anyIntersection(setA, setB) {
  var _iterator = _createForOfIteratorHelper(setB),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var elem = _step.value;
      if (setA.has(elem)) {
        return true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return false;
};
// check words/tags against our cache
var failFast = function failFast(regs, cache) {
  for (var i = 0; i < regs.length; i += 1) {
    var reg = regs[i];
    if (reg.optional === true || reg.negative === true || reg.fuzzy === true) {
      continue;
    }
    // is the word missing from the cache?
    if (reg.word !== undefined && cache.has(reg.word) === false) {
      return true;
    }
    // is the tag missing?
    if (reg.tag !== undefined && cache.has('#' + reg.tag) === false) {
      return true;
    }
    // perform a speedup for fast-or
    if (reg.fastOr && anyIntersection(reg.fastOr, cache) === false) {
      return false;
    }
  }
  return false;
};
var _default = exports.default = failFast;
},{}],"node_modules/compromise/src/1-one/match/methods/match/term/_fuzzy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// fuzzy-match (damerau-levenshtein)
// Based on  tad-lispy /node-damerau-levenshtein
// https://github.com/tad-lispy/node-damerau-levenshtein/blob/master/index.js
// count steps (insertions, deletions, substitutions, or transpositions)
var editDistance = function editDistance(strA, strB) {
  var aLength = strA.length,
    bLength = strB.length;
  // fail-fast
  if (aLength === 0) {
    return bLength;
  }
  if (bLength === 0) {
    return aLength;
  }
  // If the limit is not defined it will be calculate from this and that args.
  var limit = (bLength > aLength ? bLength : aLength) + 1;
  if (Math.abs(aLength - bLength) > (limit || 100)) {
    return limit || 100;
  }
  // init the array
  var matrix = [];
  for (var i = 0; i < limit; i++) {
    matrix[i] = [i];
    matrix[i].length = limit;
  }
  for (var _i = 0; _i < limit; _i++) {
    matrix[0][_i] = _i;
  }
  // Calculate matrix.
  var j, a_index, b_index, cost, min, t;
  for (var _i2 = 1; _i2 <= aLength; ++_i2) {
    a_index = strA[_i2 - 1];
    for (j = 1; j <= bLength; ++j) {
      // Check the jagged distance total so far
      if (_i2 === j && matrix[_i2][j] > 4) {
        return aLength;
      }
      b_index = strB[j - 1];
      cost = a_index === b_index ? 0 : 1; // Step 5
      // Calculate the minimum (much faster than Math.min(...)).
      min = matrix[_i2 - 1][j] + 1; // Deletion.
      if ((t = matrix[_i2][j - 1] + 1) < min) min = t; // Insertion.
      if ((t = matrix[_i2 - 1][j - 1] + cost) < min) min = t; // Substitution.
      // Update matrix.
      var shouldUpdate = _i2 > 1 && j > 1 && a_index === strB[j - 2] && strA[_i2 - 2] === b_index && (t = matrix[_i2 - 2][j - 2] + cost) < min;
      if (shouldUpdate) {
        matrix[_i2][j] = t;
      } else {
        matrix[_i2][j] = min;
      }
    }
  }
  // return number of steps
  return matrix[aLength][bLength];
};
// score similarity by from 0-1 (steps/length)
var fuzzyMatch = function fuzzyMatch(strA, strB) {
  var minLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
  if (strA === strB) {
    return 1;
  }
  //don't even bother on tiny strings
  if (strA.length < minLength || strB.length < minLength) {
    return 0;
  }
  var steps = editDistance(strA, strB);
  var length = Math.max(strA.length, strB.length);
  var relative = length === 0 ? 0 : steps / length;
  var similarity = 1 - relative;
  return similarity;
};
var _default = exports.default = fuzzyMatch;
},{}],"node_modules/compromise/src/1-one/match/methods/termMethods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// these methods are called with '@hasComma' in the match syntax
// various unicode quotation-mark formats
var startQuote = /([\u0022\uFF02\u0027\u201C\u2018\u201F\u201B\u201E\u2E42\u201A\u00AB\u2039\u2035\u2036\u2037\u301D\u0060\u301F])/;
var endQuote = /([\u0022\uFF02\u0027\u201D\u2019\u00BB\u203A\u2032\u2033\u2034\u301E\u00B4])/;
var _hasHyphen = /^[-–—]$/;
var _hasDash = / [-–—]{1,3} /;

/** search the term's 'post' punctuation  */
var hasPost = function hasPost(term, punct) {
  return term.post.indexOf(punct) !== -1;
};
/** search the term's 'pre' punctuation  */
// const hasPre = (term, punct) => term.pre.indexOf(punct) !== -1

var methods = {
  /** does it have a quotation symbol?  */
  hasQuote: function hasQuote(term) {
    return startQuote.test(term.pre) || endQuote.test(term.post);
  },
  /** does it have a comma?  */
  hasComma: function hasComma(term) {
    return hasPost(term, ',');
  },
  /** does it end in a period? */
  hasPeriod: function hasPeriod(term) {
    return hasPost(term, '.') === true && hasPost(term, '...') === false;
  },
  /** does it end in an exclamation */
  hasExclamation: function hasExclamation(term) {
    return hasPost(term, '!');
  },
  /** does it end with a question mark? */
  hasQuestionMark: function hasQuestionMark(term) {
    return hasPost(term, '?') || hasPost(term, '¿');
  },
  /** is there a ... at the end? */
  hasEllipses: function hasEllipses(term) {
    return hasPost(term, '..') || hasPost(term, '…');
  },
  /** is there a semicolon after term word? */
  hasSemicolon: function hasSemicolon(term) {
    return hasPost(term, ';');
  },
  /** is there a colon after term word? */
  hasColon: function hasColon(term) {
    return hasPost(term, ':');
  },
  /** is there a slash '/' in term word? */
  hasSlash: function hasSlash(term) {
    return /\//.test(term.text);
  },
  /** a hyphen connects two words like-term */
  hasHyphen: function hasHyphen(term) {
    return _hasHyphen.test(term.post) || _hasHyphen.test(term.pre);
  },
  /** a dash separates words - like that */
  hasDash: function hasDash(term) {
    return _hasDash.test(term.post) || _hasDash.test(term.pre);
  },
  /** is it multiple words combinded */
  hasContraction: function hasContraction(term) {
    return Boolean(term.implicit);
  },
  /** is it an acronym */
  isAcronym: function isAcronym(term) {
    return term.tags.has('Acronym');
  },
  /** does it have any tags */
  isKnown: function isKnown(term) {
    return term.tags.size > 0;
  },
  /** uppercase first letter, then a lowercase */
  isTitleCase: function isTitleCase(term) {
    return /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])['a-z\xC0-\xFF]/.test(term.text);
  },
  /** uppercase all letters */
  isUpperCase: function isUpperCase(term) {
    return /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])+$/.test(term.text);
  }
};
// aliases
methods.hasQuotation = methods.hasQuote;
var _default = exports.default = methods;
},{}],"node_modules/compromise/src/1-one/match/methods/match/term/doesMatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fuzzy = _interopRequireDefault(require("./_fuzzy.js"));
var _termMethods = _interopRequireDefault(require("../../termMethods.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
//this should load off of 'methods.one.termMethods'

//declare it up here
var wrapMatch = function wrapMatch() {};
/** ignore optional/greedy logic, straight-up term match*/
var doesMatch = function doesMatch(term, reg, index, length) {
  // support '.'
  if (reg.anything === true) {
    return true;
  }
  // support '^' (in parentheses)
  if (reg.start === true && index !== 0) {
    return false;
  }
  // support '$' (in parentheses)
  if (reg.end === true && index !== length - 1) {
    return false;
  }
  // match an id
  if (reg.id !== undefined && reg.id === term.id) {
    return true;
  }
  //support a text match
  if (reg.word !== undefined) {
    // check case-sensitivity, etc
    if (reg.use) {
      return reg.word === term[reg.use];
    }
    //match contractions, machine-form
    if (term.machine !== null && term.machine === reg.word) {
      return true;
    }
    // term aliases for slashes and things
    if (term.alias !== undefined && term.alias.hasOwnProperty(reg.word)) {
      return true;
    }
    // support ~ fuzzy match
    if (reg.fuzzy === true) {
      if (reg.word === term.root) {
        return true;
      }
      var score = (0, _fuzzy.default)(reg.word, term.normal);
      if (score >= reg.min) {
        return true;
      }
    }
    // match slashes and things
    if (term.alias && term.alias.some(function (str) {
      return str === reg.word;
    })) {
      return true;
    }
    //match either .normal or .text
    return reg.word === term.text || reg.word === term.normal;
  }
  //support #Tag
  if (reg.tag !== undefined) {
    return term.tags.has(reg.tag) === true;
  }
  //support @method
  if (reg.method !== undefined) {
    if (typeof _termMethods.default[reg.method] === 'function' && _termMethods.default[reg.method](term) === true) {
      return true;
    }
    return false;
  }
  //support whitespace/punctuation
  if (reg.pre !== undefined) {
    return term.pre && term.pre.includes(reg.pre);
  }
  if (reg.post !== undefined) {
    return term.post && term.post.includes(reg.post);
  }
  //support /reg/
  if (reg.regex !== undefined) {
    var str = term.normal;
    if (reg.use) {
      str = term[reg.use];
    }
    return reg.regex.test(str);
  }
  //support <chunk>
  if (reg.chunk !== undefined) {
    return term.chunk === reg.chunk;
  }
  //support %Noun|Verb%
  if (reg.switch !== undefined) {
    return term.switch === reg.switch;
  }
  //support {machine}
  if (reg.machine !== undefined) {
    return term.normal === reg.machine || term.machine === reg.machine || term.root === reg.machine;
  }
  //support {word/sense}
  if (reg.sense !== undefined) {
    return term.sense === reg.sense;
  }
  // support optimized (one|two)
  if (reg.fastOr !== undefined) {
    // {work/verb} must be a verb
    if (reg.pos && !term.tags.has(reg.pos)) {
      return null;
    }
    var _str = term.root || term.implicit || term.machine || term.normal;
    return reg.fastOr.has(_str) || reg.fastOr.has(term.text);
  }
  //support slower (one|two)
  if (reg.choices !== undefined) {
    // try to support && operator
    if (reg.operator === 'and') {
      // must match them all
      return reg.choices.every(function (r) {
        return wrapMatch(term, r, index, length);
      });
    }
    // or must match one
    return reg.choices.some(function (r) {
      return wrapMatch(term, r, index, length);
    });
  }
  return false;
};
// wrap result for !negative match logic
wrapMatch = function wrapMatch(t, reg, index, length) {
  var result = doesMatch(t, reg, index, length);
  if (reg.negative === true) {
    return !result;
  }
  return result;
};
var _default = exports.default = wrapMatch;
},{"./_fuzzy.js":"node_modules/compromise/src/1-one/match/methods/match/term/_fuzzy.js","../../termMethods.js":"node_modules/compromise/src/1-one/match/methods/termMethods.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/logic/greedy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEndGreedy = exports.greedyTo = exports.getGreedy = void 0;
var _doesMatch = _interopRequireDefault(require("../../term/doesMatch.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// for greedy checking, we no longer care about the reg.start
// value, and leaving it can cause failures for anchored greedy
// matches.  ditto for end-greedy matches: we need an earlier non-
// ending match to succceed until we get to the actual end.
var getGreedy = exports.getGreedy = function getGreedy(state, endReg) {
  var reg = Object.assign({}, state.regs[state.r], {
    start: false,
    end: false
  });
  var start = state.t;
  for (; state.t < state.terms.length; state.t += 1) {
    //stop for next-reg match
    if (endReg && (0, _doesMatch.default)(state.terms[state.t], endReg, state.start_i + state.t, state.phrase_length)) {
      return state.t;
    }
    var count = state.t - start + 1;
    // is it max-length now?
    if (reg.max !== undefined && count === reg.max) {
      return state.t;
    }
    //stop here
    if ((0, _doesMatch.default)(state.terms[state.t], reg, state.start_i + state.t, state.phrase_length) === false) {
      // is it too short?
      if (reg.min !== undefined && count < reg.min) {
        return null;
      }
      return state.t;
    }
  }
  return state.t;
};
var greedyTo = exports.greedyTo = function greedyTo(state, nextReg) {
  var t = state.t;
  //if there's no next one, just go off the end!
  if (!nextReg) {
    return state.terms.length;
  }
  //otherwise, we're looking for the next one
  for (; t < state.terms.length; t += 1) {
    if ((0, _doesMatch.default)(state.terms[t], nextReg, state.start_i + t, state.phrase_length) === true) {
      // console.log(`greedyTo ${state.terms[t].normal}`)
      return t;
    }
  }
  //guess it doesn't exist, then.
  return null;
};
var isEndGreedy = exports.isEndGreedy = function isEndGreedy(reg, state) {
  if (reg.end === true && reg.greedy === true) {
    if (state.start_i + state.t < state.phrase_length - 1) {
      var tmpReg = Object.assign({}, reg, {
        end: false
      });
      if ((0, _doesMatch.default)(state.terms[state.t], tmpReg, state.start_i + state.t, state.phrase_length) === true) {
        // console.log(`endGreedy ${state.terms[state.t].normal}`)
        return true;
      }
    }
  }
  return false;
};
},{"../../term/doesMatch.js":"node_modules/compromise/src/1-one/match/methods/match/term/doesMatch.js"}],"node_modules/compromise/src/1-one/match/methods/match/_lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGroup = void 0;
var getGroup = exports.getGroup = function getGroup(state, term_index) {
  if (state.groups[state.inGroup]) {
    return state.groups[state.inGroup];
  }
  state.groups[state.inGroup] = {
    start: term_index,
    length: 0
  };
  return state.groups[state.inGroup];
};
},{}],"node_modules/compromise/src/1-one/match/methods/match/steps/astrix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _greedy = require("./logic/greedy.js");
var _lib = require("../_lib.js");
//support 'unspecific greedy' .* properly
// its logic is 'greedy until', where it's looking for the next token
// '.+ foo' means we check for 'foo', indefinetly
var doAstrix = function doAstrix(state) {
  var regs = state.regs;
  var reg = regs[state.r];
  var skipto = (0, _greedy.greedyTo)(state, regs[state.r + 1]);
  //maybe we couldn't find it
  if (skipto === null || skipto === 0) {
    return null;
  }
  // ensure it's long enough
  if (reg.min !== undefined && skipto - state.t < reg.min) {
    return null;
  }
  // reduce it back, if it's too long
  if (reg.max !== undefined && skipto - state.t > reg.max) {
    state.t = state.t + reg.max;
    return true;
  }
  // set the group result
  if (state.hasGroup === true) {
    var g = (0, _lib.getGroup)(state, state.t);
    g.length = skipto - state.t;
  }
  state.t = skipto;
  // log(`✓ |greedy|`)
  return true;
};
var _default = exports.default = doAstrix;
},{"./logic/greedy.js":"node_modules/compromise/src/1-one/match/methods/match/steps/logic/greedy.js","../_lib.js":"node_modules/compromise/src/1-one/match/methods/match/_lib.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/logic/and-or.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doOrBlock = exports.doAndBlock = void 0;
var _doesMatch = _interopRequireDefault(require("../../term/doesMatch.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};
var _doOrBlock = exports.doOrBlock = function doOrBlock(state) {
  var skipN = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var block = state.regs[state.r];
  var wasFound = false;
  // do each multiword sequence
  for (var c = 0; c < block.choices.length; c += 1) {
    // try to match this list of tokens
    var regs = block.choices[c];
    if (!isArray(regs)) {
      return false;
    }
    wasFound = regs.every(function (cr, w_index) {
      var extra = 0;
      var t = state.t + w_index + skipN + extra;
      if (state.terms[t] === undefined) {
        return false;
      }
      var foundBlock = (0, _doesMatch.default)(state.terms[t], cr, t + state.start_i, state.phrase_length);
      // this can be greedy - '(foo+ bar)'
      if (foundBlock === true && cr.greedy === true) {
        for (var i = 1; i < state.terms.length; i += 1) {
          var term = state.terms[t + i];
          if (term) {
            var keepGoing = (0, _doesMatch.default)(term, cr, state.start_i + i, state.phrase_length);
            if (keepGoing === true) {
              extra += 1;
            } else {
              break;
            }
          }
        }
      }
      skipN += extra;
      return foundBlock;
    });
    if (wasFound) {
      skipN += regs.length;
      break;
    }
  }
  // we found a match -  is it greedy though?
  if (wasFound && block.greedy === true) {
    return _doOrBlock(state, skipN); // try it again!
  }
  return skipN;
};
var doAndBlock = exports.doAndBlock = function doAndBlock(state) {
  var longest = 0;
  // all blocks must match, and we return the greediest match
  var reg = state.regs[state.r];
  var allDidMatch = reg.choices.every(function (block) {
    //  for multi-word blocks, all must match
    var allWords = block.every(function (cr, w_index) {
      var tryTerm = state.t + w_index;
      if (state.terms[tryTerm] === undefined) {
        return false;
      }
      return (0, _doesMatch.default)(state.terms[tryTerm], cr, tryTerm, state.phrase_length);
    });
    if (allWords === true && block.length > longest) {
      longest = block.length;
    }
    return allWords;
  });
  if (allDidMatch === true) {
    // console.log(`doAndBlock ${state.terms[state.t].normal}`)
    return longest;
  }
  return false;
};
},{"../../term/doesMatch.js":"node_modules/compromise/src/1-one/match/methods/match/term/doesMatch.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/or-block.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _andOr = require("./logic/and-or.js");
var _lib = require("../_lib.js");
var orBlock = function orBlock(state) {
  var regs = state.regs;
  var reg = regs[state.r];
  var skipNum = (0, _andOr.doOrBlock)(state);
  // did we find a match?
  if (skipNum) {
    // handle 'not' logic
    if (reg.negative === true) {
      return null; // die
    }
    // tuck in as named-group
    if (state.hasGroup === true) {
      var g = (0, _lib.getGroup)(state, state.t);
      g.length += skipNum;
    }
    // ensure we're at the end
    if (reg.end === true) {
      var end = state.phrase_length;
      if (state.t + state.start_i + skipNum !== end) {
        return null;
      }
    }
    state.t += skipNum;
    // log(`✓ |found-or|`)
    return true;
  } else if (!reg.optional) {
    return null; //die
  }
  return true;
};
var _default = exports.default = orBlock;
},{"./logic/and-or.js":"node_modules/compromise/src/1-one/match/methods/match/steps/logic/and-or.js","../_lib.js":"node_modules/compromise/src/1-one/match/methods/match/_lib.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/and-block.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _andOr = require("./logic/and-or.js");
var _lib = require("../_lib.js");
// '(foo && #Noun)' - require all matches on the term
var andBlock = function andBlock(state) {
  var regs = state.regs;
  var reg = regs[state.r];
  var skipNum = (0, _andOr.doAndBlock)(state);
  if (skipNum) {
    // handle 'not' logic
    if (reg.negative === true) {
      return null; // die
    }
    if (state.hasGroup === true) {
      var g = (0, _lib.getGroup)(state, state.t);
      g.length += skipNum;
    }
    // ensure we're at the end
    if (reg.end === true) {
      var end = state.phrase_length - 1;
      if (state.t + state.start_i !== end) {
        return null;
      }
    }
    state.t += skipNum;
    // log(`✓ |found-and|`)
    return true;
  } else if (!reg.optional) {
    return null; //die
  }
  return true;
};
var _default = exports.default = andBlock;
},{"./logic/and-or.js":"node_modules/compromise/src/1-one/match/methods/match/steps/logic/and-or.js","../_lib.js":"node_modules/compromise/src/1-one/match/methods/match/_lib.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/logic/negative-greedy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _doesMatch = _interopRequireDefault(require("../../term/doesMatch.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var negGreedy = function negGreedy(state, reg, nextReg) {
  var skip = 0;
  for (var t = state.t; t < state.terms.length; t += 1) {
    var found = (0, _doesMatch.default)(state.terms[t], reg, state.start_i + state.t, state.phrase_length);
    // we don't want a match, here
    if (found) {
      break; //stop going
    }
    // are we doing 'greedy-to'?
    // - "!foo+ after"  should stop at 'after'
    if (nextReg) {
      found = (0, _doesMatch.default)(state.terms[t], nextReg, state.start_i + state.t, state.phrase_length);
      if (found) {
        break;
      }
    }
    skip += 1;
    // is it max-length now?
    if (reg.max !== undefined && skip === reg.max) {
      break;
    }
  }
  if (skip === 0) {
    return false; //dead
  }
  // did we satisfy min for !foo{min,max}
  if (reg.min && reg.min > skip) {
    return false; //dead
  }
  state.t += skip;
  // state.r += 1
  return true;
};
var _default = exports.default = negGreedy;
},{"../../term/doesMatch.js":"node_modules/compromise/src/1-one/match/methods/match/term/doesMatch.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/negative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _doesMatch = _interopRequireDefault(require("../term/doesMatch.js"));
var _negativeGreedy = _interopRequireDefault(require("./logic/negative-greedy.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// '!foo' should match anything that isn't 'foo'
// if it matches, return false
var doNegative = function doNegative(state) {
  var regs = state.regs;
  var reg = regs[state.r];

  // match *anything* but this term
  var tmpReg = Object.assign({}, reg);
  tmpReg.negative = false; // try removing it

  // found it? if so, we die here
  var found = (0, _doesMatch.default)(state.terms[state.t], tmpReg, state.start_i + state.t, state.phrase_length);
  if (found) {
    return false; //bye
  }
  // should we skip the term too?
  if (reg.optional) {
    // "before after" - "before !foo? after"
    // does the next reg match the this term?
    var nextReg = regs[state.r + 1];
    if (nextReg) {
      var fNext = (0, _doesMatch.default)(state.terms[state.t], nextReg, state.start_i + state.t, state.phrase_length);
      if (fNext) {
        state.r += 1;
      } else if (nextReg.optional && regs[state.r + 2]) {
        // ugh. ok,
        // support "!foo? extra? need"
        // but don't scan ahead more than that.
        var fNext2 = (0, _doesMatch.default)(state.terms[state.t], regs[state.r + 2], state.start_i + state.t, state.phrase_length);
        if (fNext2) {
          state.r += 2;
        }
      }
    }
  }
  // negative greedy - !foo+  - super hard!
  if (reg.greedy) {
    return (0, _negativeGreedy.default)(state, tmpReg, regs[state.r + 1]);
  }
  state.t += 1;
  return true;
};
var _default = exports.default = doNegative;
},{"../term/doesMatch.js":"node_modules/compromise/src/1-one/match/methods/match/term/doesMatch.js","./logic/negative-greedy.js":"node_modules/compromise/src/1-one/match/methods/match/steps/logic/negative-greedy.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/optional-match.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _doesMatch = _interopRequireDefault(require("../term/doesMatch.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'foo? foo' matches are tricky.
var foundOptional = function foundOptional(state) {
  var regs = state.regs;
  var reg = regs[state.r];
  var term = state.terms[state.t];
  // does the next reg match it too?
  var nextRegMatched = (0, _doesMatch.default)(term, regs[state.r + 1], state.start_i + state.t, state.phrase_length);
  if (reg.negative || nextRegMatched) {
    // but does the next reg match the next term??
    // only skip if it doesn't
    var nextTerm = state.terms[state.t + 1];
    if (!nextTerm || !(0, _doesMatch.default)(nextTerm, regs[state.r + 1], state.start_i + state.t, state.phrase_length)) {
      state.r += 1;
    }
  }
};
var _default = exports.default = foundOptional;
},{"../term/doesMatch.js":"node_modules/compromise/src/1-one/match/methods/match/term/doesMatch.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/greedy-match.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _greedy = require("./logic/greedy.js");
// keep 'foo+' or 'foo*' going..
var greedyMatch = function greedyMatch(state) {
  var regs = state.regs,
    phrase_length = state.phrase_length;
  var reg = regs[state.r];
  state.t = (0, _greedy.getGreedy)(state, regs[state.r + 1]);
  if (state.t === null) {
    return null; //greedy was too short
  }
  // foo{2,4} - has a greed-minimum
  if (reg.min && reg.min > state.t) {
    return null; //greedy was too short
  }
  // 'foo+$' - if also an end-anchor, ensure we really reached the end
  if (reg.end === true && state.start_i + state.t !== phrase_length) {
    return null; //greedy didn't reach the end
  }
  return true;
};
var _default = exports.default = greedyMatch;
},{"./logic/greedy.js":"node_modules/compromise/src/1-one/match/methods/match/steps/logic/greedy.js"}],"node_modules/compromise/src/1-one/match/methods/match/steps/contraction-skip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// for: ['we', 'have']
// a match for "we have" should work as normal
// but matching "we've" should skip over implict terms
var contractionSkip = function contractionSkip(state) {
  var term = state.terms[state.t];
  var reg = state.regs[state.r];
  // did we match the first part of a contraction?
  if (term.implicit && state.terms[state.t + 1]) {
    var nextTerm = state.terms[state.t + 1];
    // ensure next word is implicit
    if (!nextTerm.implicit) {
      return;
    }
    // we matched "we've" - skip-over [we, have]
    if (reg.word === term.normal) {
      state.t += 1;
    }
    // also skip for @hasContraction
    if (reg.method === 'hasContraction') {
      state.t += 1;
    }
  }
};
var _default = exports.default = contractionSkip;
},{}],"node_modules/compromise/src/1-one/match/methods/match/steps/simple-match.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../_lib.js");
var _optionalMatch = _interopRequireDefault(require("./optional-match.js"));
var _greedyMatch = _interopRequireDefault(require("./greedy-match.js"));
var _contractionSkip = _interopRequireDefault(require("./contraction-skip.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// '[foo]' should also be logged as a group
var setGroup = function setGroup(state, startAt) {
  var reg = state.regs[state.r];
  // Get or create capture group
  var g = (0, _lib.getGroup)(state, startAt);
  // Update group - add greedy or increment length
  if (state.t > 1 && reg.greedy) {
    g.length += state.t - startAt;
  } else {
    g.length++;
  }
};

// when a reg matches a term
var simpleMatch = function simpleMatch(state) {
  var regs = state.regs;
  var reg = regs[state.r];
  var term = state.terms[state.t];
  var startAt = state.t;
  // if it's a negative optional match... :0
  if (reg.optional && regs[state.r + 1] && reg.negative) {
    return true;
  }
  // okay, it was a match, but if it's optional too,
  // we should check the next reg too, to skip it?
  if (reg.optional && regs[state.r + 1]) {
    (0, _optionalMatch.default)(state);
  }
  // Contraction skip:
  // did we match the first part of a contraction?
  if (term.implicit && state.terms[state.t + 1]) {
    (0, _contractionSkip.default)(state);
  }
  //advance to the next term!
  state.t += 1;
  //check any ending '$' flags
  //if this isn't the last term, refuse the match
  if (reg.end === true && state.t !== state.terms.length && reg.greedy !== true) {
    return null; //die
  }
  // keep 'foo+' going...
  if (reg.greedy === true) {
    var alive = (0, _greedyMatch.default)(state);
    if (!alive) {
      return null;
    }
  }
  // log '[foo]' as a group
  if (state.hasGroup === true) {
    setGroup(state, startAt);
  }
  return true;
};
var _default = exports.default = simpleMatch;
},{"../_lib.js":"node_modules/compromise/src/1-one/match/methods/match/_lib.js","./optional-match.js":"node_modules/compromise/src/1-one/match/methods/match/steps/optional-match.js","./greedy-match.js":"node_modules/compromise/src/1-one/match/methods/match/steps/greedy-match.js","./contraction-skip.js":"node_modules/compromise/src/1-one/match/methods/match/steps/contraction-skip.js"}],"node_modules/compromise/src/1-one/match/methods/match/02-from-here.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _astrix = _interopRequireDefault(require("./steps/astrix.js"));
var _orBlock = _interopRequireDefault(require("./steps/or-block.js"));
var _andBlock = _interopRequireDefault(require("./steps/and-block.js"));
var _negative = _interopRequireDefault(require("./steps/negative.js"));
var _simpleMatch = _interopRequireDefault(require("./steps/simple-match.js"));
var _greedy = require("./steps/logic/greedy.js");
var _doesMatch = _interopRequireDefault(require("./term/doesMatch.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// i formally apologize for how complicated this is.

/** 
 * try a sequence of match tokens ('regs') 
 * on a sequence of terms, 
 * starting at this certain term.
 */
var tryHere = function tryHere(terms, regs, start_i, phrase_length) {
  // console.log(`\n\n:start: '${terms[0].text}':`)
  if (terms.length === 0 || regs.length === 0) {
    return null;
  }
  // all the variables that matter
  var state = {
    t: 0,
    terms: terms,
    r: 0,
    regs: regs,
    groups: {},
    start_i: start_i,
    phrase_length: phrase_length,
    inGroup: null
  };

  // we must satisfy every token in 'regs'
  // if we get to the end, we have a match.
  for (; state.r < regs.length; state.r += 1) {
    var reg = regs[state.r];
    // Check if this reg has a named capture group
    state.hasGroup = Boolean(reg.group);
    // Reuse previous capture group if same
    if (state.hasGroup === true) {
      state.inGroup = reg.group;
    } else {
      state.inGroup = null;
    }
    //have we run-out of terms?
    if (!state.terms[state.t]) {
      //are all remaining regs optional or negative?
      var alive = regs.slice(state.r).some(function (remain) {
        return !remain.optional;
      });
      if (alive === false) {
        break; //done!
      }
      return null; // die
    }
    // support 'unspecific greedy' .* properly
    if (reg.anything === true && reg.greedy === true) {
      var _alive = (0, _astrix.default)(state);
      if (!_alive) {
        return null;
      }
      continue;
    }
    // slow-OR - multi-word OR (a|b|foo bar)
    if (reg.choices !== undefined && reg.operator === 'or') {
      var _alive2 = (0, _orBlock.default)(state);
      if (!_alive2) {
        return null;
      }
      continue;
    }
    // slow-AND - multi-word AND (#Noun && foo) blocks
    if (reg.choices !== undefined && reg.operator === 'and') {
      var _alive3 = (0, _andBlock.default)(state);
      if (!_alive3) {
        return null;
      }
      continue;
    }
    // support '.' as any-single
    if (reg.anything === true) {
      // '!.' negative anything should insta-fail
      if (reg.negative && reg.anything) {
        return null;
      }
      var _alive4 = (0, _simpleMatch.default)(state);
      if (!_alive4) {
        return null;
      }
      continue;
    }
    // support 'foo*$' until the end
    if ((0, _greedy.isEndGreedy)(reg, state) === true) {
      var _alive5 = (0, _simpleMatch.default)(state);
      if (!_alive5) {
        return null;
      }
      continue;
    }
    // ok, it doesn't match - but maybe it wasn't *supposed* to?
    if (reg.negative) {
      // we want *anything* but this term
      var _alive6 = (0, _negative.default)(state);
      if (!_alive6) {
        return null;
      }
      continue;
    }
    // ok, finally test the term-reg
    var hasMatch = (0, _doesMatch.default)(state.terms[state.t], reg, state.start_i + state.t, state.phrase_length);
    if (hasMatch === true) {
      var _alive7 = (0, _simpleMatch.default)(state);
      if (!_alive7) {
        return null;
      }
      continue;
    }
    //ok who cares, keep going
    if (reg.optional === true) {
      continue;
    }

    // finally, we die
    return null;
  }
  //return our results, as pointers
  var pntr = [null, start_i, state.t + start_i];
  if (pntr[1] === pntr[2]) {
    return null; //found 0 terms
  }
  var groups = {};
  Object.keys(state.groups).forEach(function (k) {
    var o = state.groups[k];
    var start = start_i + o.start;
    groups[k] = [null, start, start + o.length];
  });
  return {
    pointer: pntr,
    groups: groups
  };
};
var _default = exports.default = tryHere;
},{"./steps/astrix.js":"node_modules/compromise/src/1-one/match/methods/match/steps/astrix.js","./steps/or-block.js":"node_modules/compromise/src/1-one/match/methods/match/steps/or-block.js","./steps/and-block.js":"node_modules/compromise/src/1-one/match/methods/match/steps/and-block.js","./steps/negative.js":"node_modules/compromise/src/1-one/match/methods/match/steps/negative.js","./steps/simple-match.js":"node_modules/compromise/src/1-one/match/methods/match/steps/simple-match.js","./steps/logic/greedy.js":"node_modules/compromise/src/1-one/match/methods/match/steps/logic/greedy.js","./term/doesMatch.js":"node_modules/compromise/src/1-one/match/methods/match/term/doesMatch.js"}],"node_modules/compromise/src/1-one/match/methods/match/03-getGroup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// support returning a subset of a match
// like 'foo [bar] baz' -> bar
var getGroup = function getGroup(res, group) {
  var ptrs = [];
  var byGroup = {};
  if (res.length === 0) {
    return {
      ptrs: ptrs,
      byGroup: byGroup
    };
  }
  if (typeof group === 'number') {
    group = String(group);
  }
  if (group) {
    res.forEach(function (r) {
      if (r.groups[group]) {
        ptrs.push(r.groups[group]);
      }
    });
  } else {
    res.forEach(function (r) {
      ptrs.push(r.pointer);
      Object.keys(r.groups).forEach(function (k) {
        byGroup[k] = byGroup[k] || [];
        byGroup[k].push(r.groups[k]);
      });
    });
  }
  return {
    ptrs: ptrs,
    byGroup: byGroup
  };
};
var _default = exports.default = getGroup;
},{}],"node_modules/compromise/src/1-one/match/methods/match/03-notIf.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fromHere = _interopRequireDefault(require("./02-from-here.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var notIf = function notIf(results, not, docs) {
  results = results.filter(function (res) {
    var _res$pointer = _slicedToArray(res.pointer, 3),
      n = _res$pointer[0],
      start = _res$pointer[1],
      end = _res$pointer[2];
    var terms = docs[n].slice(start, end);
    for (var i = 0; i < terms.length; i += 1) {
      var slice = terms.slice(i);
      var found = (0, _fromHere.default)(slice, not, i, terms.length);
      if (found !== null) {
        return false;
      }
    }
    return true;
  });
  return results;
};
var _default = exports.default = notIf;
},{"./02-from-here.js":"node_modules/compromise/src/1-one/match/methods/match/02-from-here.js"}],"node_modules/compromise/src/1-one/match/methods/match/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _failFast = _interopRequireDefault(require("./01-failFast.js"));
var _fromHere = _interopRequireDefault(require("./02-from-here.js"));
var _getGroup = _interopRequireDefault(require("./03-getGroup.js"));
var _notIf = _interopRequireDefault(require("./03-notIf.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// make proper pointers
var addSentence = function addSentence(res, n) {
  res.pointer[0] = n;
  Object.keys(res.groups).forEach(function (k) {
    res.groups[k][0] = n;
  });
  return res;
};
var handleStart = function handleStart(terms, regs, n) {
  var res = (0, _fromHere.default)(terms, regs, 0, terms.length);
  if (res) {
    res = addSentence(res, n);
    return res; //getGroup([res], group)
  }
  return null;
};

// ok, here we go.
var runMatch = function runMatch(docs, todo, cache) {
  cache = cache || [];
  var regs = todo.regs,
    group = todo.group,
    justOne = todo.justOne;
  var results = [];
  if (!regs || regs.length === 0) {
    return {
      ptrs: [],
      byGroup: {}
    };
  }
  var minLength = regs.filter(function (r) {
    return r.optional !== true && r.negative !== true;
  }).length;
  docs: for (var n = 0; n < docs.length; n += 1) {
    var terms = docs[n];
    // let index = terms[0].index || []
    // can we skip this sentence?
    if (cache[n] && (0, _failFast.default)(regs, cache[n])) {
      continue;
    }
    // ^start regs only run once, per phrase
    if (regs[0].start === true) {
      var foundStart = handleStart(terms, regs, n, group);
      if (foundStart) {
        results.push(foundStart);
      }
      continue;
    }
    //ok, try starting the match now from every term
    for (var i = 0; i < terms.length; i += 1) {
      var slice = terms.slice(i);
      // ensure it's long-enough
      if (slice.length < minLength) {
        break;
      }
      var res = (0, _fromHere.default)(slice, regs, i, terms.length);
      // did we find a result?
      if (res) {
        // res = addSentence(res, index[0])
        res = addSentence(res, n);
        results.push(res);
        // should we stop here?
        if (justOne === true) {
          break docs;
        }
        // skip ahead, over these results
        var end = res.pointer[2];
        if (Math.abs(end - 1) > i) {
          i = Math.abs(end - 1);
        }
      }
    }
  }
  // ensure any end-results ($) match until the last term
  if (regs[regs.length - 1].end === true) {
    results = results.filter(function (res) {
      var n = res.pointer[0];
      return docs[n].length === res.pointer[2];
    });
  }
  if (todo.notIf) {
    results = (0, _notIf.default)(results, todo.notIf, docs);
  }
  // grab the requested group
  results = (0, _getGroup.default)(results, group);
  // add ids to pointers
  results.ptrs.forEach(function (ptr) {
    var _ptr = _slicedToArray(ptr, 3),
      n = _ptr[0],
      start = _ptr[1],
      end = _ptr[2];
    ptr[3] = docs[n][start].id; //start-id
    ptr[4] = docs[n][end - 1].id; //end-id
  });
  return results;
};
var _default = exports.default = runMatch;
},{"./01-failFast.js":"node_modules/compromise/src/1-one/match/methods/match/01-failFast.js","./02-from-here.js":"node_modules/compromise/src/1-one/match/methods/match/02-from-here.js","./03-getGroup.js":"node_modules/compromise/src/1-one/match/methods/match/03-getGroup.js","./03-notIf.js":"node_modules/compromise/src/1-one/match/methods/match/03-notIf.js"}],"node_modules/compromise/src/1-one/match/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./parseMatch/index.js"));
var _index2 = _interopRequireDefault(require("./match/index.js"));
var _termMethods = _interopRequireDefault(require("./termMethods.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var methods = {
  one: {
    termMethods: _termMethods.default,
    parseMatch: _index.default,
    match: _index2.default
  }
};
var _default = exports.default = methods;
},{"./parseMatch/index.js":"node_modules/compromise/src/1-one/match/methods/parseMatch/index.js","./match/index.js":"node_modules/compromise/src/1-one/match/methods/match/index.js","./termMethods.js":"node_modules/compromise/src/1-one/match/methods/termMethods.js"}],"node_modules/compromise/src/1-one/match/lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  /** pre-parse any match statements */
  parseMatch: function parseMatch(str, opts) {
    var world = this.world();
    var killUnicode = world.methods.one.killUnicode;
    if (killUnicode) {
      str = killUnicode(str, world);
    }
    return world.methods.one.parseMatch(str, opts, world);
  }
};
},{}],"node_modules/compromise/src/1-one/match/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./api/index.js"));
var _index2 = _interopRequireDefault(require("./methods/index.js"));
var _lib = _interopRequireDefault(require("./lib.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _index.default,
  methods: _index2.default,
  lib: _lib.default
};
},{"./api/index.js":"node_modules/compromise/src/1-one/match/api/index.js","./methods/index.js":"node_modules/compromise/src/1-one/match/methods/index.js","./lib.js":"node_modules/compromise/src/1-one/match/lib.js"}],"node_modules/compromise/src/1-one/output/api/html.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isClass = /^\../;
var isId = /^#./;
var escapeXml = function escapeXml(str) {
  str = str.replace(/&/g, '&amp;');
  str = str.replace(/</g, '&lt;');
  str = str.replace(/>/g, '&gt;');
  str = str.replace(/"/g, '&quot;');
  str = str.replace(/'/g, '&apos;');
  return str;
};

// interpret .class, #id, tagName
var toTag = function toTag(k) {
  var start = '';
  var end = '</span>';
  k = escapeXml(k);
  if (isClass.test(k)) {
    start = "<span class=\"".concat(k.replace(/^\./, ''), "\"");
  } else if (isId.test(k)) {
    start = "<span id=\"".concat(k.replace(/^#/, ''), "\"");
  } else {
    start = "<".concat(k);
    end = "</".concat(k, ">");
  }
  start += '>';
  return {
    start: start,
    end: end
  };
};
var getIndex = function getIndex(doc, obj) {
  var starts = {};
  var ends = {};
  Object.keys(obj).forEach(function (k) {
    var res = obj[k];
    var tag = toTag(k);
    if (typeof res === 'string') {
      res = doc.match(res);
    }
    res.docs.forEach(function (terms) {
      // don't highlight implicit terms
      if (terms.every(function (t) {
        return t.implicit;
      })) {
        return;
      }
      var a = terms[0].id;
      starts[a] = starts[a] || [];
      starts[a].push(tag.start);
      var b = terms[terms.length - 1].id;
      ends[b] = ends[b] || [];
      ends[b].push(tag.end);
    });
  });
  return {
    starts: starts,
    ends: ends
  };
};
var html = function html(obj) {
  // index ids to highlight
  var _getIndex = getIndex(this, obj),
    starts = _getIndex.starts,
    ends = _getIndex.ends;
  // create the text output
  var out = '';
  this.docs.forEach(function (terms) {
    for (var i = 0; i < terms.length; i += 1) {
      var t = terms[i];
      // do a span tag
      if (starts.hasOwnProperty(t.id)) {
        out += starts[t.id].join('');
      }
      out += t.pre || '';
      out += t.text || '';
      if (ends.hasOwnProperty(t.id)) {
        out += ends[t.id].join('');
      }
      out += t.post || '';
    }
  });
  return out;
};
var _default = exports.default = {
  html: html
};
},{}],"node_modules/compromise/src/1-one/output/api/_text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.textFromTerms = exports.textFromDoc = void 0;
var trimEnd = /[,:;)\]*.?~!\u0022\uFF02\u201D\u2019\u00BB\u203A\u2032\u2033\u2034\u301E\u00B4—-]+$/;
var trimStart = /^[(['"*~\uFF02\u201C\u2018\u201F\u201B\u201E\u2E42\u201A\u00AB\u2039\u2035\u2036\u2037\u301D\u0060\u301F]+/;
var punctToKill = /[,:;)('"\u201D\]]/;
var isHyphen = /^[-–—]$/;
var hasSpace = / /;
var textFromTerms = exports.textFromTerms = function textFromTerms(terms, opts) {
  var keepSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var txt = '';
  terms.forEach(function (t) {
    var pre = t.pre || '';
    var post = t.post || '';
    if (opts.punctuation === 'some') {
      pre = pre.replace(trimStart, '');
      // replace a hyphen with a space
      if (isHyphen.test(post)) {
        post = ' ';
      }
      post = post.replace(punctToKill, '');
      // cleanup exclamations
      post = post.replace(/\?!+/, '?');
      post = post.replace(/!+/, '!');
      post = post.replace(/\?+/, '?');
      // kill elipses
      post = post.replace(/\.{2,}/, '');
      // kill abbreviation periods
      if (t.tags.has('Abbreviation')) {
        post = post.replace(/\./, '');
      }
    }
    if (opts.whitespace === 'some') {
      pre = pre.replace(/\s/, ''); //remove pre-whitespace
      post = post.replace(/\s+/, ' '); //replace post-whitespace with a space
    }
    if (!opts.keepPunct) {
      pre = pre.replace(trimStart, '');
      if (post === '-') {
        post = ' ';
      } else {
        post = post.replace(trimEnd, '');
      }
    }
    // grab the correct word format
    var word = t[opts.form || 'text'] || t.normal || '';
    if (opts.form === 'implicit') {
      word = t.implicit || t.text;
    }
    if (opts.form === 'root' && t.implicit) {
      word = t.root || t.implicit || t.normal;
    }
    // add an implicit space, for contractions
    if ((opts.form === 'machine' || opts.form === 'implicit' || opts.form === 'root') && t.implicit) {
      if (!post || !hasSpace.test(post)) {
        post += ' ';
      }
    }
    txt += pre + word + post;
  });
  if (keepSpace === false) {
    txt = txt.trim();
  }
  if (opts.lowerCase === true) {
    txt = txt.toLowerCase();
  }
  return txt;
};
var textFromDoc = exports.textFromDoc = function textFromDoc(docs, opts) {
  var text = '';
  if (!docs || !docs[0] || !docs[0][0]) {
    return text;
  }
  for (var i = 0; i < docs.length; i += 1) {
    // middle
    text += textFromTerms(docs[i], opts, true);
  }
  if (!opts.keepSpace) {
    text = text.trim();
  }
  if (opts.keepEndPunct === false) {
    // don't remove ':)' etc
    if (!docs[0][0].tags.has('Emoticon')) {
      text = text.replace(trimStart, '');
    }
    // remove ending periods
    var last = docs[docs.length - 1];
    if (!last[last.length - 1].tags.has('Emoticon')) {
      text = text.replace(trimEnd, '');
    }
    // kill end quotations
    if (text.endsWith("'") && !text.endsWith("s'")) {
      text = text.replace(/'/, '');
    }
  }
  if (opts.cleanWhitespace === true) {
    text = text.trim();
  }
  return text;
};
},{}],"node_modules/compromise/src/1-one/output/api/_fmts.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var fmts = {
  text: {
    form: 'text'
  },
  normal: {
    whitespace: 'some',
    punctuation: 'some',
    case: 'some',
    unicode: 'some',
    form: 'normal'
  },
  machine: {
    keepSpace: false,
    whitespace: 'some',
    punctuation: 'some',
    case: 'none',
    unicode: 'some',
    form: 'machine'
  },
  root: {
    keepSpace: false,
    whitespace: 'some',
    punctuation: 'some',
    case: 'some',
    unicode: 'some',
    form: 'root'
  },
  implicit: {
    form: 'implicit'
  }
};
fmts.clean = fmts.normal;
fmts.reduced = fmts.root;
var _default = exports.default = fmts;
},{}],"node_modules/compromise/src/1-one/output/methods/hash.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/* eslint-disable no-bitwise */
/* eslint-disable no-mixed-operators */
/* eslint-disable no-multi-assign */

// https://github.com/jbt/tiny-hashes/
var k = [],
  i = 0;
for (; i < 64;) {
  k[i] = 0 | Math.sin(++i % Math.PI) * 4294967296;
}
var md5 = function md5(s) {
  var b,
    c,
    d,
    h = [b = 0x67452301, c = 0xefcdab89, ~b, ~c],
    words = [],
    j = decodeURI(encodeURI(s)) + '\x80',
    a = j.length;
  s = --a / 4 + 2 | 15;
  words[--s] = a * 8;
  for (; ~a;) {
    words[a >> 2] |= j.charCodeAt(a) << 8 * a--;
  }
  for (i = j = 0; i < s; i += 16) {
    a = h;
    for (; j < 64; a = [d = a[3], b + ((d = a[0] + [b & c | ~b & d, d & b | ~d & c, b ^ c ^ d, c ^ (b | ~d)][a = j >> 4] + k[j] + ~~words[i | [j, 5 * j + 1, 3 * j + 5, 7 * j][a] & 15]) << (a = [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21][4 * a + j++ % 4]) | d >>> -a), b, c]) {
      b = a[1] | 0;
      c = a[2];
    }
    for (j = 4; j;) h[--j] += a[j];
  }
  for (s = ''; j < 32;) {
    s += (h[j >> 3] >> (1 ^ j++) * 4 & 15).toString(16);
  }
  return s;
};
var _default = exports.default = md5; // console.log(md5('food-safety'))
},{}],"node_modules/compromise/src/1-one/output/api/json.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _text = require("./_text.js");
var _fmts = _interopRequireDefault(require("./_fmts.js"));
var _hash2 = _interopRequireDefault(require("../methods/hash.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var defaults = {
  text: true,
  terms: true
};
var opts = {
  case: 'none',
  unicode: 'some',
  form: 'machine',
  punctuation: 'some'
};
var merge = function merge(a, b) {
  return Object.assign({}, a, b);
};
var fns = {
  text: function text(terms) {
    return (0, _text.textFromTerms)(terms, {
      keepPunct: true
    }, false);
  },
  normal: function normal(terms) {
    return (0, _text.textFromTerms)(terms, merge(_fmts.default.normal, {
      keepPunct: true
    }), false);
  },
  implicit: function implicit(terms) {
    return (0, _text.textFromTerms)(terms, merge(_fmts.default.implicit, {
      keepPunct: true
    }), false);
  },
  machine: function machine(terms) {
    return (0, _text.textFromTerms)(terms, opts, false);
  },
  root: function root(terms) {
    return (0, _text.textFromTerms)(terms, merge(opts, {
      form: 'root'
    }), false);
  },
  hash: function hash(terms) {
    return (0, _hash2.default)((0, _text.textFromTerms)(terms, {
      keepPunct: true
    }, false));
  },
  offset: function offset(terms) {
    var len = fns.text(terms).length;
    return {
      index: terms[0].offset.index,
      start: terms[0].offset.start,
      length: len
    };
  },
  terms: function terms(_terms2) {
    return _terms2.map(function (t) {
      var term = Object.assign({}, t);
      term.tags = Array.from(t.tags);
      return term;
    });
  },
  confidence: function confidence(_terms, view, i) {
    return view.eq(i).confidence();
  },
  syllables: function syllables(_terms, view, i) {
    return view.eq(i).syllables();
  },
  sentence: function sentence(_terms, view, i) {
    return view.eq(i).fullSentence().text();
  },
  dirty: function dirty(terms) {
    return terms.some(function (t) {
      return t.dirty === true;
    });
  }
};
fns.sentences = fns.sentence;
fns.clean = fns.normal;
fns.reduced = fns.root;
var toJSON = function toJSON(view, option) {
  option = option || {};
  if (typeof option === 'string') {
    option = {};
  }
  option = Object.assign({}, defaults, option);
  // run any necessary upfront steps
  if (option.offset) {
    view.compute('offset');
  }
  return view.docs.map(function (terms, i) {
    var res = {};
    Object.keys(option).forEach(function (k) {
      if (option[k] && fns[k]) {
        res[k] = fns[k](terms, view, i);
      }
    });
    return res;
  });
};
var methods = {
  /** return data */
  json: function json(n) {
    var res = toJSON(this, n);
    if (typeof n === 'number') {
      return res[n];
    }
    return res;
  }
};
methods.data = methods.json;
var _default = exports.default = methods;
},{"./_text.js":"node_modules/compromise/src/1-one/output/api/_text.js","./_fmts.js":"node_modules/compromise/src/1-one/output/api/_fmts.js","../methods/hash.js":"node_modules/compromise/src/1-one/output/methods/hash.js"}],"node_modules/compromise/src/1-one/output/api/debug.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isClientSide = function isClientSide() {
  return typeof window !== 'undefined' && window.document;
};

//output some helpful stuff to the console
var debug = function debug(fmt) {
  var debugMethods = this.methods.one.debug || {};
  // see if method name exists
  if (fmt && debugMethods.hasOwnProperty(fmt)) {
    debugMethods[fmt](this);
    return this;
  }
  // log default client-side view
  if (isClientSide()) {
    debugMethods.clientSide(this);
    return this;
  }
  // else, show regular server-side tags view
  debugMethods.tags(this);
  return this;
};
var _default = exports.default = debug;
},{}],"node_modules/compromise/src/1-one/output/api/wrap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var toText = function toText(term) {
  var pre = term.pre || '';
  var post = term.post || '';
  return pre + term.text + post;
};
var findStarts = function findStarts(doc, obj) {
  var starts = {};
  Object.keys(obj).forEach(function (reg) {
    var m = doc.match(reg);
    m.fullPointer.forEach(function (a) {
      starts[a[3]] = {
        fn: obj[reg],
        end: a[2]
      };
    });
  });
  return starts;
};
var wrap = function wrap(doc, obj) {
  // index ids to highlight
  var starts = findStarts(doc, obj);
  var text = '';
  doc.docs.forEach(function (terms, n) {
    for (var i = 0; i < terms.length; i += 1) {
      var t = terms[i];
      // do a span tag
      if (starts.hasOwnProperty(t.id)) {
        var _starts$t$id = starts[t.id],
          fn = _starts$t$id.fn,
          end = _starts$t$id.end;
        var m = doc.update([[n, i, end]]);
        text += terms[i].pre || '';
        text += fn(m);
        i = end - 1;
        text += terms[i].post || '';
      } else {
        text += toText(t);
      }
    }
  });
  return text;
};
var _default = exports.default = wrap;
},{}],"node_modules/compromise/src/1-one/output/api/out.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _debug = _interopRequireDefault(require("./debug.js"));
var _wrap2 = _interopRequireDefault(require("./wrap.js"));
var _hash = _interopRequireDefault(require("../methods/hash.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var isObject = function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
};

// sort by frequency
var topk = function topk(arr) {
  var obj = {};
  arr.forEach(function (a) {
    obj[a] = obj[a] || 0;
    obj[a] += 1;
  });
  var res = Object.keys(obj).map(function (k) {
    return {
      normal: k,
      count: obj[k]
    };
  });
  return res.sort(function (a, b) {
    return a.count > b.count ? -1 : 0;
  });
};

/** some named output formats */
var out = function out(method) {
  // support custom outputs
  if (isObject(method)) {
    return (0, _wrap2.default)(this, method);
  }
  // text out formats
  if (method === 'text') {
    return this.text();
  }
  if (method === 'normal') {
    return this.text('normal');
  }
  if (method === 'root') {
    return this.text('root');
  }
  if (method === 'machine' || method === 'reduced') {
    return this.text('machine');
  }
  if (method === 'hash' || method === 'md5') {
    return (0, _hash.default)(this.text());
  }

  // json data formats
  if (method === 'json') {
    return this.json();
  }
  if (method === 'offset' || method === 'offsets') {
    this.compute('offset');
    return this.json({
      offset: true
    });
  }
  if (method === 'array') {
    var arr = this.docs.map(function (terms) {
      return terms.reduce(function (str, t) {
        return str + t.pre + t.text + t.post;
      }, '').trim();
    });
    return arr.filter(function (str) {
      return str;
    });
  }
  // return terms sorted by frequency
  if (method === 'freq' || method === 'frequency' || method === 'topk') {
    return topk(this.json({
      normal: true
    }).map(function (o) {
      return o.normal;
    }));
  }

  // some handy ad-hoc outputs
  if (method === 'terms') {
    var list = [];
    this.docs.forEach(function (terms) {
      var words = terms.map(function (t) {
        return t.text;
      });
      words = words.filter(function (t) {
        return t;
      });
      list = list.concat(words);
    });
    return list;
  }
  if (method === 'tags') {
    return this.docs.map(function (terms) {
      return terms.reduce(function (h, t) {
        h[t.implicit || t.normal] = Array.from(t.tags);
        return h;
      }, {});
    });
  }
  if (method === 'debug') {
    return this.debug(); //allow
  }
  return this.text();
};
var methods = {
  /** */
  debug: _debug.default,
  /** */
  out: out,
  /** */
  wrap: function wrap(obj) {
    return (0, _wrap2.default)(this, obj);
  }
};
var _default = exports.default = methods;
},{"./debug.js":"node_modules/compromise/src/1-one/output/api/debug.js","./wrap.js":"node_modules/compromise/src/1-one/output/api/wrap.js","../methods/hash.js":"node_modules/compromise/src/1-one/output/methods/hash.js"}],"node_modules/compromise/src/1-one/output/api/text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _text = require("./_text.js");
var _fmts = _interopRequireDefault(require("./_fmts.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var isObject = function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
};
var _default = exports.default = {
  /** */
  text: function text(fmt) {
    var opts = {};
    if (fmt && typeof fmt === 'string' && _fmts.default.hasOwnProperty(fmt)) {
      opts = Object.assign({}, _fmts.default[fmt]);
    } else if (fmt && isObject(fmt)) {
      opts = Object.assign({}, fmt); //todo: fixme
    }
    // is it a full document?
    if (opts.keepSpace === undefined && !this.isFull()) {
      //
      opts.keepSpace = false;
    }
    if (opts.keepEndPunct === undefined && this.pointer) {
      var ptr = this.pointer[0];
      if (ptr && ptr[1]) {
        opts.keepEndPunct = false;
      } else {
        opts.keepEndPunct = true;
      }
    }
    // set defaults
    if (opts.keepPunct === undefined) {
      opts.keepPunct = true;
    }
    if (opts.keepSpace === undefined) {
      opts.keepSpace = true;
    }
    return (0, _text.textFromDoc)(this.docs, opts);
  }
};
},{"./_text.js":"node_modules/compromise/src/1-one/output/api/_text.js","./_fmts.js":"node_modules/compromise/src/1-one/output/api/_fmts.js"}],"node_modules/compromise/src/1-one/output/api/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _html = _interopRequireDefault(require("./html.js"));
var _json = _interopRequireDefault(require("./json.js"));
var _out = _interopRequireDefault(require("./out.js"));
var _text = _interopRequireDefault(require("./text.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var methods = Object.assign({}, _out.default, _text.default, _json.default, _html.default);
var addAPI = function addAPI(View) {
  Object.assign(View.prototype, methods);
};
var _default = exports.default = addAPI;
},{"./html.js":"node_modules/compromise/src/1-one/output/api/html.js","./json.js":"node_modules/compromise/src/1-one/output/api/json.js","./out.js":"node_modules/compromise/src/1-one/output/api/out.js","./text.js":"node_modules/compromise/src/1-one/output/api/text.js"}],"node_modules/compromise/src/1-one/output/methods/debug/client-side.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/* eslint-disable no-console */
var logClientSide = function logClientSide(view) {
  console.log('%c -=-=- ', 'background-color:#6699cc;');
  view.forEach(function (m) {
    console.groupCollapsed(m.text());
    var terms = m.docs[0];
    var out = terms.map(function (t) {
      var text = t.text || '-';
      if (t.implicit) {
        text = '[' + t.implicit + ']';
      }
      var tags = '[' + Array.from(t.tags).join(', ') + ']';
      return {
        text: text,
        tags: tags
      };
    });
    console.table(out, ['text', 'tags']);
    console.groupEnd();
  });
};
var _default = exports.default = logClientSide;
},{}],"node_modules/compromise/src/1-one/output/methods/debug/_color.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color
var reset = '\x1b[0m';

//cheaper than requiring chalk
var cli = {
  green: function green(str) {
    return '\x1b[32m' + str + reset;
  },
  red: function red(str) {
    return '\x1b[31m' + str + reset;
  },
  blue: function blue(str) {
    return '\x1b[34m' + str + reset;
  },
  magenta: function magenta(str) {
    return '\x1b[35m' + str + reset;
  },
  cyan: function cyan(str) {
    return '\x1b[36m' + str + reset;
  },
  yellow: function yellow(str) {
    return '\x1b[33m' + str + reset;
  },
  black: function black(str) {
    return '\x1b[30m' + str + reset;
  },
  dim: function dim(str) {
    return '\x1b[2m' + str + reset;
  },
  i: function i(str) {
    return '\x1b[3m' + str + reset;
  }
};
var _default = exports.default = cli;
},{}],"node_modules/compromise/src/1-one/output/methods/debug/tags.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _color = _interopRequireDefault(require("./_color.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } /* eslint-disable no-console */
var tagString = function tagString(tags, model) {
  if (model.one.tagSet) {
    tags = tags.map(function (tag) {
      if (!model.one.tagSet.hasOwnProperty(tag)) {
        return tag;
      }
      var c = model.one.tagSet[tag].color || 'blue';
      return _color.default[c](tag);
    });
  }
  return tags.join(', ');
};
var showTags = function showTags(view) {
  var docs = view.docs,
    model = view.model;
  if (docs.length === 0) {
    console.log(_color.default.blue('\n     ──────'));
  }
  docs.forEach(function (terms) {
    console.log(_color.default.blue('\n  ┌─────────'));
    terms.forEach(function (t) {
      var tags = _toConsumableArray(t.tags || []);
      var text = t.text || '-';
      if (t.sense) {
        text = "{".concat(t.normal, "/").concat(t.sense, "}");
      }
      if (t.implicit) {
        text = '[' + t.implicit + ']';
      }
      text = _color.default.yellow(text);
      var word = "'" + text + "'";
      if (t.reference) {
        var _str = view.update([t.reference]).text('normal');
        word += " - ".concat(_color.default.dim(_color.default.i('[' + _str + ']')));
      }
      word = word.padEnd(18);
      var str = _color.default.blue('  │ ') + _color.default.i(word) + '  - ' + tagString(tags, model);
      console.log(str);
    });
  });
  console.log('\n');
};
var _default = exports.default = showTags;
},{"./_color.js":"node_modules/compromise/src/1-one/output/methods/debug/_color.js"}],"node_modules/compromise/src/1-one/output/methods/debug/chunks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _color = _interopRequireDefault(require("./_color.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* eslint-disable no-console */

var showChunks = function showChunks(view) {
  var docs = view.docs;
  console.log('');
  docs.forEach(function (terms) {
    var out = [];
    terms.forEach(function (term) {
      if (term.chunk === 'Noun') {
        out.push(_color.default.blue(term.implicit || term.normal));
      } else if (term.chunk === 'Verb') {
        out.push(_color.default.green(term.implicit || term.normal));
      } else if (term.chunk === 'Adjective') {
        out.push(_color.default.yellow(term.implicit || term.normal));
      } else if (term.chunk === 'Pivot') {
        out.push(_color.default.red(term.implicit || term.normal));
      } else {
        out.push(term.implicit || term.normal);
      }
    });
    console.log(out.join(' '), '\n');
  });
  console.log('\n');
};
var _default = exports.default = showChunks;
},{"./_color.js":"node_modules/compromise/src/1-one/output/methods/debug/_color.js"}],"node_modules/compromise/src/1-one/output/methods/debug/highlight.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _color = _interopRequireDefault(require("./_color.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* eslint-disable no-console */

var split = function split(txt, offset, index) {
  var buff = index * 9; //there are 9 new chars addded to each highlight
  var start = offset.start + buff;
  var end = start + offset.length;
  var pre = txt.substring(0, start);
  var mid = txt.substring(start, end);
  var post = txt.substring(end, txt.length);
  return [pre, mid, post];
};
var spliceIn = function spliceIn(txt, offset, index) {
  var parts = split(txt, offset, index);
  return "".concat(parts[0]).concat(_color.default.blue(parts[1])).concat(parts[2]);
};
var showHighlight = function showHighlight(doc) {
  if (!doc.found) {
    return;
  }
  var bySentence = {};
  doc.fullPointer.forEach(function (ptr) {
    bySentence[ptr[0]] = bySentence[ptr[0]] || [];
    bySentence[ptr[0]].push(ptr);
  });
  Object.keys(bySentence).forEach(function (k) {
    var full = doc.update([[Number(k)]]);
    var txt = full.text();
    var matches = doc.update(bySentence[k]);
    var json = matches.json({
      offset: true
    });
    json.forEach(function (obj, i) {
      txt = spliceIn(txt, obj.offset, i);
    });
    console.log(txt);
  });
  console.log('\n');
};
var _default = exports.default = showHighlight;
},{"./_color.js":"node_modules/compromise/src/1-one/output/methods/debug/_color.js"}],"node_modules/compromise/src/1-one/output/methods/debug/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _clientSide = _interopRequireDefault(require("./client-side.js"));
var _tags = _interopRequireDefault(require("./tags.js"));
var _chunks = _interopRequireDefault(require("./chunks.js"));
var _highlight = _interopRequireDefault(require("./highlight.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var debug = {
  tags: _tags.default,
  clientSide: _clientSide.default,
  chunks: _chunks.default,
  highlight: _highlight.default
};
var _default = exports.default = debug;
},{"./client-side.js":"node_modules/compromise/src/1-one/output/methods/debug/client-side.js","./tags.js":"node_modules/compromise/src/1-one/output/methods/debug/tags.js","./chunks.js":"node_modules/compromise/src/1-one/output/methods/debug/chunks.js","./highlight.js":"node_modules/compromise/src/1-one/output/methods/debug/highlight.js"}],"node_modules/compromise/src/1-one/output/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "debug", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "hash", {
  enumerable: true,
  get: function () {
    return _hash.default;
  }
});
var _hash = _interopRequireDefault(require("./hash.js"));
var _index = _interopRequireDefault(require("./debug/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
},{"./hash.js":"node_modules/compromise/src/1-one/output/methods/hash.js","./debug/index.js":"node_modules/compromise/src/1-one/output/methods/debug/index.js"}],"node_modules/compromise/src/1-one/output/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./api/index.js"));
var _index2 = require("./methods/index.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _index.default,
  methods: {
    one: {
      hash: _index2.hash,
      debug: _index2.debug
    }
  }
};
},{"./api/index.js":"node_modules/compromise/src/1-one/output/api/index.js","./methods/index.js":"node_modules/compromise/src/1-one/output/methods/index.js"}],"node_modules/compromise/src/1-one/pointers/api/lib/_lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uniquePtrs = exports.indexN = exports.getExtent = exports.doesOverlap = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// do the pointers intersect?
var doesOverlap = exports.doesOverlap = function doesOverlap(a, b) {
  if (a[0] !== b[0]) {
    return false;
  }
  var _a = _slicedToArray(a, 3),
    startA = _a[1],
    endA = _a[2];
  var _b = _slicedToArray(b, 3),
    startB = _b[1],
    endB = _b[2];
  // [a,a,a,-,-,-,]
  // [-,-,b,b,b,-,]
  if (startA <= startB && endA > startB) {
    return true;
  }
  // [-,-,-,a,a,-,]
  // [-,-,b,b,b,-,]
  if (startB <= startA && endB > startA) {
    return true;
  }
  return false;
};

// get widest min/max
var getExtent = exports.getExtent = function getExtent(ptrs) {
  var min = ptrs[0][1];
  var max = ptrs[0][2];
  ptrs.forEach(function (ptr) {
    if (ptr[1] < min) {
      min = ptr[1];
    }
    if (ptr[2] > max) {
      max = ptr[2];
    }
  });
  return [ptrs[0][0], min, max];
};

// collect pointers by sentence number
var indexN = exports.indexN = function indexN(ptrs) {
  var byN = {};
  ptrs.forEach(function (ref) {
    byN[ref[0]] = byN[ref[0]] || [];
    byN[ref[0]].push(ref);
  });
  return byN;
};

// remove exact duplicates
var uniquePtrs = exports.uniquePtrs = function uniquePtrs(arr) {
  var obj = {};
  for (var i = 0; i < arr.length; i += 1) {
    obj[arr[i].join(',')] = arr[i];
  }
  return Object.values(obj);
};

// a before b
// console.log(doesOverlap([0, 0, 4], [0, 2, 5]))
// // b before a
// console.log(doesOverlap([0, 3, 4], [0, 1, 5]))
// // disjoint
// console.log(doesOverlap([0, 0, 3], [0, 4, 5]))
// neighbours
// console.log(doesOverlap([0, 1, 3], [0, 3, 5]))
// console.log(doesOverlap([0, 3, 5], [0, 1, 3]))

// console.log(
//   getExtent([
//     [0, 3, 4],
//     [0, 4, 5],
//     [0, 1, 2],
//   ])
// )
},{}],"node_modules/compromise/src/1-one/pointers/api/lib/split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("./_lib.js");
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// split a pointer, by match pointer
var pivotBy = function pivotBy(full, m) {
  var _full = _slicedToArray(full, 2),
    n = _full[0],
    start = _full[1];
  var mStart = m[1];
  var mEnd = m[2];
  var res = {};
  // is there space before the match?
  if (start < mStart) {
    var end = mStart < full[2] ? mStart : full[2]; // find closest end-point
    res.before = [n, start, end]; //before segment
  }
  res.match = m;
  // is there space after the match?
  if (full[2] > mEnd) {
    res.after = [n, mEnd, full[2]]; //after segment
  }
  return res;
};
var doesMatch = function doesMatch(full, m) {
  return full[1] <= m[1] && m[2] <= full[2];
};
var splitAll = function splitAll(full, m) {
  var byN = (0, _lib.indexN)(m);
  var res = [];
  full.forEach(function (ptr) {
    var _ptr = _slicedToArray(ptr, 1),
      n = _ptr[0];
    var matches = byN[n] || [];
    matches = matches.filter(function (p) {
      return doesMatch(ptr, p);
    });
    if (matches.length === 0) {
      res.push({
        passthrough: ptr
      });
      return;
    }
    // ensure matches are in-order
    matches = matches.sort(function (a, b) {
      return a[1] - b[1];
    });
    // start splitting our left-to-right
    var carry = ptr;
    matches.forEach(function (p, i) {
      var found = pivotBy(carry, p);
      // last one
      if (!matches[i + 1]) {
        res.push(found);
      } else {
        res.push({
          before: found.before,
          match: found.match
        });
        if (found.after) {
          carry = found.after;
        }
      }
    });
  });
  return res;
};
var _default = exports.default = splitAll;
},{"./_lib.js":"node_modules/compromise/src/1-one/pointers/api/lib/_lib.js"}],"node_modules/compromise/src/1-one/pointers/methods/getDoc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var max = 20;

// sweep-around looking for our start term uuid
var blindSweep = function blindSweep(id, doc, n) {
  for (var i = 0; i < max; i += 1) {
    // look up a sentence
    if (doc[n - i]) {
      var index = doc[n - i].findIndex(function (term) {
        return term.id === id;
      });
      if (index !== -1) {
        return [n - i, index];
      }
    }
    // look down a sentence
    if (doc[n + i]) {
      var _index = doc[n + i].findIndex(function (term) {
        return term.id === id;
      });
      if (_index !== -1) {
        return [n + i, _index];
      }
    }
  }
  return null;
};
var repairEnding = function repairEnding(ptr, document) {
  var _ptr = _slicedToArray(ptr, 5),
    n = _ptr[0],
    start = _ptr[1],
    endId = _ptr[4];
  var terms = document[n];
  // look for end-id
  var newEnd = terms.findIndex(function (t) {
    return t.id === endId;
  });
  if (newEnd === -1) {
    // if end-term wasn't found, so go all the way to the end
    ptr[2] = document[n].length;
    ptr[4] = terms.length ? terms[terms.length - 1].id : null;
  } else {
    ptr[2] = newEnd; // repair ending pointer
  }
  return document[n].slice(start, ptr[2] + 1);
};

/** return a subset of the document, from a pointer */
var getDoc = function getDoc(ptrs, document) {
  var doc = [];
  ptrs.forEach(function (ptr, i) {
    if (!ptr) {
      return;
    }
    var _ptr2 = _slicedToArray(ptr, 5),
      n = _ptr2[0],
      start = _ptr2[1],
      end = _ptr2[2],
      id = _ptr2[3],
      endId = _ptr2[4]; //parsePointer(ptr)
    var terms = document[n] || [];
    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = terms.length;
    }
    if (id && (!terms[start] || terms[start].id !== id)) {
      // console.log('  repairing pointer...')
      var wild = blindSweep(id, document, n);
      if (wild !== null) {
        var len = end - start;
        terms = document[wild[0]].slice(wild[1], wild[1] + len);
        // actually change the pointer
        var startId = terms[0] ? terms[0].id : null;
        ptrs[i] = [wild[0], wild[1], wild[1] + len, startId];
      }
    } else {
      terms = terms.slice(start, end);
    }
    if (terms.length === 0) {
      return;
    }
    if (start === end) {
      return;
    }
    // test end-id, if it exists
    if (endId && terms[terms.length - 1].id !== endId) {
      terms = repairEnding(ptr, document);
    }
    // otherwise, looks good!
    doc.push(terms);
  });
  doc = doc.filter(function (a) {
    return a.length > 0;
  });
  return doc;
};
var _default = exports.default = getDoc;
},{}],"node_modules/compromise/src/1-one/pointers/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../api/lib/_lib.js");
var _split = _interopRequireDefault(require("../api/lib/split.js"));
var _getDoc = _interopRequireDefault(require("./getDoc.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// flat list of terms from nested document
var termList = function termList(docs) {
  var arr = [];
  for (var i = 0; i < docs.length; i += 1) {
    for (var t = 0; t < docs[i].length; t += 1) {
      arr.push(docs[i][t]);
    }
  }
  return arr;
};
var _default = exports.default = {
  one: {
    termList: termList,
    getDoc: _getDoc.default,
    pointer: {
      indexN: _lib.indexN,
      splitAll: _split.default
    }
  }
};
},{"../api/lib/_lib.js":"node_modules/compromise/src/1-one/pointers/api/lib/_lib.js","../api/lib/split.js":"node_modules/compromise/src/1-one/pointers/api/lib/split.js","./getDoc.js":"node_modules/compromise/src/1-one/pointers/methods/getDoc.js"}],"node_modules/compromise/src/1-one/pointers/api/lib/union.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("./_lib.js");
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// a union is a + b, minus duplicates
var getUnion = function getUnion(a, b) {
  var both = a.concat(b);
  var byN = (0, _lib.indexN)(both);
  var res = [];
  both.forEach(function (ptr) {
    var _ptr = _slicedToArray(ptr, 1),
      n = _ptr[0];
    if (byN[n].length === 1) {
      // we're alone on this sentence, so we're good
      res.push(ptr);
      return;
    }
    // there may be overlaps
    var hmm = byN[n].filter(function (m) {
      return (0, _lib.doesOverlap)(ptr, m);
    });
    hmm.push(ptr);
    var range = (0, _lib.getExtent)(hmm);
    res.push(range);
  });
  res = (0, _lib.uniquePtrs)(res);
  return res;
};
var _default = exports.default = getUnion; // two disjoint
// console.log(getUnion([[1, 3, 4]], [[0, 1, 2]]))
// two disjoint
// console.log(getUnion([[0, 3, 4]], [[0, 1, 2]]))
// overlap-plus
// console.log(getUnion([[0, 1, 4]], [[0, 2, 6]]))
// overlap
// console.log(getUnion([[0, 1, 4]], [[0, 2, 3]]))
// neighbours
// console.log(getUnion([[0, 1, 3]], [[0, 3, 5]]))
},{"./_lib.js":"node_modules/compromise/src/1-one/pointers/api/lib/_lib.js"}],"node_modules/compromise/src/1-one/pointers/api/lib/difference.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _split = _interopRequireDefault(require("./split.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var subtract = function subtract(refs, not) {
  var res = [];
  var found = (0, _split.default)(refs, not);
  found.forEach(function (o) {
    if (o.passthrough) {
      res.push(o.passthrough);
    }
    if (o.before) {
      res.push(o.before);
    }
    if (o.after) {
      res.push(o.after);
    }
  });
  return res;
};
var _default = exports.default = subtract; // console.log(subtract([[0, 0, 2]], [[0, 0, 1]]))
// console.log(subtract([[0, 0, 2]], [[0, 1, 2]]))
},{"./split.js":"node_modules/compromise/src/1-one/pointers/api/lib/split.js"}],"node_modules/compromise/src/1-one/pointers/api/lib/intersection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("./_lib.js");
// [a,a,a,a,-,-,]
// [-,-,b,b,b,-,]
// [-,-,x,x,-,-,]
var intersection = function intersection(a, b) {
  // find the latest-start
  var start = a[1] < b[1] ? b[1] : a[1];
  // find the earliest-end
  var end = a[2] > b[2] ? b[2] : a[2];
  // does it form a valid pointer?
  if (start < end) {
    return [a[0], start, end];
  }
  return null;
};
var getIntersection = function getIntersection(a, b) {
  var byN = (0, _lib.indexN)(b);
  var res = [];
  a.forEach(function (ptr) {
    var hmm = byN[ptr[0]] || [];
    hmm = hmm.filter(function (p) {
      return (0, _lib.doesOverlap)(ptr, p);
    });
    // no sentence-pairs, so no intersection
    if (hmm.length === 0) {
      return;
    }
    hmm.forEach(function (h) {
      var overlap = intersection(ptr, h);
      if (overlap) {
        res.push(overlap);
      }
    });
  });
  return res;
};
var _default = exports.default = getIntersection; // console.log(getIntersection([[0, 1, 3]], [[0, 2, 4]]))
},{"./_lib.js":"node_modules/compromise/src/1-one/pointers/api/lib/_lib.js"}],"node_modules/compromise/src/1-one/pointers/api/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _union = _interopRequireDefault(require("./lib/union.js"));
var _difference = _interopRequireDefault(require("./lib/difference.js"));
var _intersection = _interopRequireDefault(require("./lib/intersection.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};
var getDoc = function getDoc(m, view) {
  if (typeof m === 'string' || isArray(m)) {
    return view.match(m);
  }
  if (!m) {
    return view.none();
  }
  // support pre-parsed reg object
  return m;
};

// 'harden' our json pointers, again
var addIds = function addIds(ptrs, docs) {
  return ptrs.map(function (ptr) {
    var _ptr = _slicedToArray(ptr, 2),
      n = _ptr[0],
      start = _ptr[1];
    if (docs[n] && docs[n][start]) {
      ptr[3] = docs[n][start].id;
    }
    return ptr;
  });
};
var methods = {};

// all parts, minus duplicates
methods.union = function (m) {
  m = getDoc(m, this);
  var ptrs = (0, _union.default)(this.fullPointer, m.fullPointer);
  ptrs = addIds(ptrs, this.document);
  return this.toView(ptrs);
};
methods.and = methods.union;

// only parts they both have
methods.intersection = function (m) {
  m = getDoc(m, this);
  var ptrs = (0, _intersection.default)(this.fullPointer, m.fullPointer);
  ptrs = addIds(ptrs, this.document);
  return this.toView(ptrs);
};

// only parts of a that b does not have
methods.not = function (m) {
  m = getDoc(m, this);
  var ptrs = (0, _difference.default)(this.fullPointer, m.fullPointer);
  ptrs = addIds(ptrs, this.document);
  return this.toView(ptrs);
};
methods.difference = methods.not;

// get opposite of a match
methods.complement = function () {
  var doc = this.all();
  var ptrs = (0, _difference.default)(doc.fullPointer, this.fullPointer);
  ptrs = addIds(ptrs, this.document);
  return this.toView(ptrs);
};

// remove overlaps
methods.settle = function () {
  var ptrs = this.fullPointer;
  ptrs.forEach(function (ptr) {
    ptrs = (0, _union.default)(ptrs, [ptr]);
  });
  ptrs = addIds(ptrs, this.document);
  return this.update(ptrs);
};
var addAPI = function addAPI(View) {
  // add set/intersection/union
  Object.assign(View.prototype, methods);
};
var _default = exports.default = addAPI;
},{"./lib/union.js":"node_modules/compromise/src/1-one/pointers/api/lib/union.js","./lib/difference.js":"node_modules/compromise/src/1-one/pointers/api/lib/difference.js","./lib/intersection.js":"node_modules/compromise/src/1-one/pointers/api/lib/intersection.js"}],"node_modules/compromise/src/1-one/pointers/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./methods/index.js"));
var _index2 = _interopRequireDefault(require("./api/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  methods: _index.default,
  api: _index2.default
};
},{"./methods/index.js":"node_modules/compromise/src/1-one/pointers/methods/index.js","./api/index.js":"node_modules/compromise/src/1-one/pointers/api/index.js"}],"node_modules/compromise/src/1-one/sweep/lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  // compile a list of matches into a match-net
  buildNet: function buildNet(matches) {
    var methods = this.methods();
    var net = methods.one.buildNet(matches, this.world());
    net.isNet = true;
    return net;
  }
};
},{}],"node_modules/compromise/src/1-one/sweep/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var api = function api(View) {
  /** speedy match a sequence of matches */
  View.prototype.sweep = function (net) {
    var _this = this;
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var world = this.world,
      docs = this.docs;
    var methods = world.methods;
    var found = methods.one.bulkMatch(docs, net, this.methods, opts);

    // apply any changes
    if (opts.tagger !== false) {
      methods.one.bulkTagger(found, docs, this.world);
    }
    // fix the pointers
    // collect all found results into a View
    found = found.map(function (o) {
      var ptr = o.pointer;
      var term = docs[ptr[0]][ptr[1]];
      var len = ptr[2] - ptr[1];
      if (term.index) {
        o.pointer = [term.index[0], term.index[1], ptr[1] + len];
      }
      return o;
    });
    var ptrs = found.map(function (o) {
      return o.pointer;
    });
    // cleanup results a bit
    found = found.map(function (obj) {
      obj.view = _this.update([obj.pointer]);
      delete obj.regs;
      delete obj.needs;
      delete obj.pointer;
      delete obj._expanded;
      return obj;
    });
    return {
      view: this.update(ptrs),
      found: found
    };
  };
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/1-one/sweep/methods/buildNet/01-parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// extract the clear needs for an individual match token
var getTokenNeeds = function getTokenNeeds(reg) {
  // negatives can't be cached
  if (reg.optional === true || reg.negative === true) {
    return null;
  }
  if (reg.tag) {
    return '#' + reg.tag;
  }
  if (reg.word) {
    return reg.word;
  }
  if (reg.switch) {
    return "%".concat(reg.switch, "%");
  }
  return null;
};
var getNeeds = function getNeeds(regs) {
  var needs = [];
  regs.forEach(function (reg) {
    needs.push(getTokenNeeds(reg));
    // support AND (foo && tag)
    if (reg.operator === 'and' && reg.choices) {
      reg.choices.forEach(function (oneSide) {
        oneSide.forEach(function (r) {
          needs.push(getTokenNeeds(r));
        });
      });
    }
  });
  return needs.filter(function (str) {
    return str;
  });
};
var getWants = function getWants(regs) {
  var wants = [];
  var count = 0;
  regs.forEach(function (reg) {
    if (reg.operator === 'or' && !reg.optional && !reg.negative) {
      // add fast-or terms
      if (reg.fastOr) {
        Array.from(reg.fastOr).forEach(function (w) {
          wants.push(w);
        });
      }
      // add slow-or
      if (reg.choices) {
        reg.choices.forEach(function (rs) {
          rs.forEach(function (r) {
            var n = getTokenNeeds(r);
            if (n) {
              wants.push(n);
            }
          });
        });
      }
      count += 1;
    }
  });
  return {
    wants: wants,
    count: count
  };
};
var parse = function parse(matches, world) {
  var parseMatch = world.methods.one.parseMatch;
  matches.forEach(function (obj) {
    obj.regs = parseMatch(obj.match, {}, world);
    // wrap these ifNo properties into an array
    if (typeof obj.ifNo === 'string') {
      obj.ifNo = [obj.ifNo];
    }
    if (obj.notIf) {
      obj.notIf = parseMatch(obj.notIf, {}, world);
    }
    // cache any requirements up-front 
    obj.needs = getNeeds(obj.regs);
    var _getWants = getWants(obj.regs),
      wants = _getWants.wants,
      count = _getWants.count;
    obj.wants = wants;
    obj.minWant = count;
    // get rid of tiny sentences
    obj.minWords = obj.regs.filter(function (o) {
      return !o.optional;
    }).length;
  });
  return matches;
};
var _default = exports.default = parse;
},{}],"node_modules/compromise/src/1-one/sweep/methods/buildNet/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _parse = _interopRequireDefault(require("./01-parse.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// do some indexing on the list of matches
var buildNet = function buildNet(matches, world) {
  // turn match-syntax into json
  matches = (0, _parse.default)(matches, world);

  // collect by wants and needs
  var hooks = {};
  matches.forEach(function (obj) {
    // add needs
    obj.needs.forEach(function (str) {
      hooks[str] = Array.isArray(hooks[str]) ? hooks[str] : [];
      hooks[str].push(obj);
    });
    // add wants
    obj.wants.forEach(function (str) {
      hooks[str] = Array.isArray(hooks[str]) ? hooks[str] : [];
      hooks[str].push(obj);
    });
  });
  // remove duplicates
  Object.keys(hooks).forEach(function (k) {
    var already = {};
    hooks[k] = hooks[k].filter(function (obj) {
      if (typeof already[obj.match] === 'boolean') {
        return false;
      }
      already[obj.match] = true;
      return true;
    });
  });

  // keep all un-cacheable matches (those with no needs) 
  var always = matches.filter(function (o) {
    return o.needs.length === 0 && o.wants.length === 0;
  });
  return {
    hooks: hooks,
    always: always
  };
};
var _default = exports.default = buildNet;
},{"./01-parse.js":"node_modules/compromise/src/1-one/sweep/methods/buildNet/01-parse.js"}],"node_modules/compromise/src/1-one/sweep/methods/sweep/01-getHooks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// for each cached-sentence, find a list of possible matches
var getHooks = function getHooks(docCaches, hooks) {
  return docCaches.map(function (set, i) {
    var maybe = [];
    Object.keys(hooks).forEach(function (k) {
      if (docCaches[i].has(k)) {
        maybe = maybe.concat(hooks[k]);
      }
    });
    // remove duplicates
    var already = {};
    maybe = maybe.filter(function (m) {
      if (typeof already[m.match] === 'boolean') {
        return false;
      }
      already[m.match] = true;
      return true;
    });
    return maybe;
  });
};
var _default = exports.default = getHooks;
},{}],"node_modules/compromise/src/1-one/sweep/methods/sweep/02-trim-down.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// filter-down list of maybe-matches
var localTrim = function localTrim(maybeList, docCache) {
  return maybeList.map(function (list, n) {
    var haves = docCache[n];
    // ensure all stated-needs of the match are met
    list = list.filter(function (obj) {
      return obj.needs.every(function (need) {
        return haves.has(need);
      });
    });
    // ensure nothing matches in our 'ifNo' property
    list = list.filter(function (obj) {
      if (obj.ifNo !== undefined && obj.ifNo.some(function (no) {
        return haves.has(no);
      }) === true) {
        return false;
      }
      return true;
    });
    // ensure atleast one(?) of the wants is found
    list = list.filter(function (obj) {
      if (obj.wants.length === 0) {
        return true;
      }
      // ensure there's one cache-hit
      var found = obj.wants.filter(function (str) {
        return haves.has(str);
      }).length;
      return found >= obj.minWant;
    });
    return list;
  });
};
var _default = exports.default = localTrim;
},{}],"node_modules/compromise/src/1-one/sweep/methods/sweep/04-runMatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// finally,
// actually run these match-statements on the terms
var runMatch = function runMatch(maybeList, document, docCache, methods, opts) {
  var results = [];
  var _loop = function _loop(n) {
      var _loop2 = function _loop2() {
          var m = maybeList[n][i];
          // ok, actually do the work.
          var res = methods.one.match([document[n]], m);
          // found something.
          if (res.ptrs.length > 0) {
            res.ptrs.forEach(function (ptr) {
              ptr[0] = n; // fix the sentence pointer
              // check ifNo
              // if (m.ifNo !== undefined) {
              //   let terms = document[n].slice(ptr[1], ptr[2])
              //   for (let k = 0; k < m.ifNo.length; k += 1) {
              //     const no = m.ifNo[k]
              //     // quick-check cache
              //     if (docCache[n].has(no)) {
              //       if (no.startsWith('#')) {
              //         let tag = no.replace(/^#/, '')
              //         if (terms.find(t => t.tags.has(tag))) {
              //           console.log('+' + tag)
              //           return
              //         }
              //       } else if (terms.find(t => t.normal === no || t.tags.has(no))) {
              //         console.log('+' + no)
              //         return
              //       }
              //     }
              //   }
              // }
              var todo = Object.assign({}, m, {
                pointer: ptr
              });
              if (m.unTag !== undefined) {
                todo.unTag = m.unTag;
              }
              results.push(todo);
            });
            //ok cool, can we stop early?
            if (opts.matchOne === true) {
              return {
                v: {
                  v: [results[0]]
                }
              };
            }
          }
        },
        _ret2;
      for (var i = 0; i < maybeList[n].length; i += 1) {
        _ret2 = _loop2();
        if (_ret2) return _ret2.v;
      }
    },
    _ret;
  for (var n = 0; n < maybeList.length; n += 1) {
    _ret = _loop(n);
    if (_ret) return _ret.v;
  }
  return results;
};
var _default = exports.default = runMatch;
},{}],"node_modules/compromise/src/1-one/sweep/methods/sweep/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _getHooks = _interopRequireDefault(require("./01-getHooks.js"));
var _trimDown = _interopRequireDefault(require("./02-trim-down.js"));
var _runMatch = _interopRequireDefault(require("./04-runMatch.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// import getWants from './03-get-wants.js'

var tooSmall = function tooSmall(maybeList, document) {
  return maybeList.map(function (arr, i) {
    var termCount = document[i].length;
    arr = arr.filter(function (o) {
      return termCount >= o.minWords;
    });
    return arr;
  });
};
var sweep = function sweep(document, net, methods) {
  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  // find suitable matches to attempt, on each sentence
  var docCache = methods.one.cacheDoc(document);
  // collect possible matches for this document
  var maybeList = (0, _getHooks.default)(docCache, net.hooks);
  // ensure all defined needs are met for each match
  maybeList = (0, _trimDown.default)(maybeList, docCache, document);
  // add unchacheable matches to each sentence's todo-list
  if (net.always.length > 0) {
    maybeList = maybeList.map(function (arr) {
      return arr.concat(net.always);
    });
  }
  // if we don't have enough words
  maybeList = tooSmall(maybeList, document);

  // now actually run the matches
  var results = (0, _runMatch.default)(maybeList, document, docCache, methods, opts);
  // console.dir(results, { depth: 5 })
  return results;
};
var _default = exports.default = sweep;
},{"./01-getHooks.js":"node_modules/compromise/src/1-one/sweep/methods/sweep/01-getHooks.js","./02-trim-down.js":"node_modules/compromise/src/1-one/sweep/methods/sweep/02-trim-down.js","./04-runMatch.js":"node_modules/compromise/src/1-one/sweep/methods/sweep/04-runMatch.js"}],"node_modules/compromise/src/1-one/sweep/methods/tagger/canBe.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// is this tag consistent with the tags they already have?
var canBe = function canBe(terms, tag, model) {
  var tagSet = model.one.tagSet;
  if (!tagSet.hasOwnProperty(tag)) {
    return true;
  }
  var not = tagSet[tag].not || [];
  for (var i = 0; i < terms.length; i += 1) {
    var term = terms[i];
    for (var k = 0; k < not.length; k += 1) {
      if (term.tags.has(not[k]) === true) {
        return false; //found a tag conflict - bail!
      }
    }
  }
  return true;
};
var _default = exports.default = canBe;
},{}],"node_modules/compromise/src/1-one/sweep/methods/tagger/index.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _canBe = _interopRequireDefault(require("./canBe.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var tagger = function tagger(list, document, world) {
  var model = world.model,
    methods = world.methods;
  var _methods$one = methods.one,
    getDoc = _methods$one.getDoc,
    setTag = _methods$one.setTag,
    unTag = _methods$one.unTag;
  var looksPlural = methods.two.looksPlural;
  if (list.length === 0) {
    return list;
  }
  // some logging for debugging
  var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;
  if (env.DEBUG_TAGS) {
    console.log("\n\n  \x1B[32m\u2192 ".concat(list.length, " post-tagger:\x1B[0m")); //eslint-disable-line
  }
  return list.map(function (todo) {
    if (!todo.tag && !todo.chunk && !todo.unTag) {
      return;
    }
    var reason = todo.reason || todo.match;
    var terms = getDoc([todo.pointer], document)[0];
    // handle 'safe' tag
    if (todo.safe === true) {
      // check for conflicting tags
      if ((0, _canBe.default)(terms, todo.tag, model) === false) {
        return;
      }
      // dont tag half of a hyphenated word
      if (terms[terms.length - 1].post === '-') {
        return;
      }
    }
    if (todo.tag !== undefined) {
      setTag(terms, todo.tag, world, todo.safe, "[post] '".concat(reason, "'"));
      // quick and dirty plural tagger 😕
      if (todo.tag === 'Noun' && looksPlural) {
        var term = terms[terms.length - 1];
        if (looksPlural(term.text)) {
          setTag([term], 'Plural', world, todo.safe, 'quick-plural');
        } else {
          setTag([term], 'Singular', world, todo.safe, 'quick-singular');
        }
      }
      // allow freezing this match, too
      if (todo.freeze === true) {
        terms.forEach(function (term) {
          return term.frozen = true;
        });
      }
    }
    if (todo.unTag !== undefined) {
      unTag(terms, todo.unTag, world, todo.safe, reason);
    }
    // allow setting chunks, too
    if (todo.chunk) {
      terms.forEach(function (t) {
        return t.chunk = todo.chunk;
      });
    }
  });
};
var _default = exports.default = tagger;
},{"./canBe.js":"node_modules/compromise/src/1-one/sweep/methods/tagger/canBe.js","process":"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/compromise/src/1-one/sweep/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./buildNet/index.js"));
var _index2 = _interopRequireDefault(require("./sweep/index.js"));
var _index3 = _interopRequireDefault(require("./tagger/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  buildNet: _index.default,
  bulkMatch: _index2.default,
  bulkTagger: _index3.default
};
},{"./buildNet/index.js":"node_modules/compromise/src/1-one/sweep/methods/buildNet/index.js","./sweep/index.js":"node_modules/compromise/src/1-one/sweep/methods/sweep/index.js","./tagger/index.js":"node_modules/compromise/src/1-one/sweep/methods/tagger/index.js"}],"node_modules/compromise/src/1-one/sweep/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = _interopRequireDefault(require("./lib.js"));
var _api = _interopRequireDefault(require("./api.js"));
var _index = _interopRequireDefault(require("./methods/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  lib: _lib.default,
  api: _api.default,
  methods: {
    one: _index.default
  }
};
},{"./lib.js":"node_modules/compromise/src/1-one/sweep/lib.js","./api.js":"node_modules/compromise/src/1-one/sweep/api.js","./methods/index.js":"node_modules/compromise/src/1-one/sweep/methods/index.js"}],"node_modules/compromise/src/1-one/tag/methods/setTag.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isMulti = / /;
var addChunk = function addChunk(term, tag) {
  if (tag === 'Noun') {
    term.chunk = tag;
  }
  if (tag === 'Verb') {
    term.chunk = tag;
  }
};
var tagTerm = function tagTerm(term, tag, tagSet, isSafe) {
  // does it already have this tag?
  if (term.tags.has(tag) === true) {
    return null;
  }
  // allow this shorthand in multiple-tag strings
  if (tag === '.') {
    return null;
  }
  // don't overwrite any tags, if term is frozen
  if (term.frozen === true) {
    isSafe = true;
  }
  // for known tags, do logical dependencies first
  var known = tagSet[tag];
  if (known) {
    // first, we remove any conflicting tags
    if (known.not && known.not.length > 0) {
      for (var o = 0; o < known.not.length; o += 1) {
        // if we're in tagSafe, skip this term.
        if (isSafe === true && term.tags.has(known.not[o])) {
          return null;
        }
        term.tags.delete(known.not[o]);
      }
    }
    // add parent tags
    if (known.parents && known.parents.length > 0) {
      for (var _o = 0; _o < known.parents.length; _o += 1) {
        term.tags.add(known.parents[_o]);
        addChunk(term, known.parents[_o]);
      }
    }
  }
  // finally, add our tag
  term.tags.add(tag);
  // now it's dirty?
  term.dirty = true;
  // add a chunk too, if it's easy
  addChunk(term, tag);
  return true;
};

// support '#Noun . #Adjective' syntax
var multiTag = function multiTag(terms, tagString, tagSet, isSafe) {
  var tags = tagString.split(isMulti);
  terms.forEach(function (term, i) {
    var tag = tags[i];
    if (tag) {
      tag = tag.replace(/^#/, '');
      tagTerm(term, tag, tagSet, isSafe);
    }
  });
};
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

// verbose-mode tagger debuging
var log = function log(terms, tag) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var yellow = function yellow(str) {
    return '\x1b[33m\x1b[3m' + str + '\x1b[0m';
  };
  var i = function i(str) {
    return '\x1b[3m' + str + '\x1b[0m';
  };
  var word = terms.map(function (t) {
    return t.text || '[' + t.implicit + ']';
  }).join(' ');
  if (typeof tag !== 'string' && tag.length > 2) {
    tag = tag.slice(0, 2).join(', #') + ' +'; //truncate the list of tags
  }
  tag = typeof tag !== 'string' ? tag.join(', #') : tag;
  console.log(" ".concat(yellow(word).padEnd(24), " \x1B[32m\u2192\x1B[0m #").concat(tag.padEnd(22), "  ").concat(i(reason))); // eslint-disable-line
};

// add a tag to all these terms
var _setTag = function setTag(terms, tag) {
  var world = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var isSafe = arguments.length > 3 ? arguments[3] : undefined;
  var reason = arguments.length > 4 ? arguments[4] : undefined;
  var tagSet = world.model.one.tagSet || {};
  if (!tag) {
    return;
  }
  // some logging for debugging
  var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;
  if (env && env.DEBUG_TAGS) {
    log(terms, tag, reason);
  }
  if (isArray(tag) === true) {
    tag.forEach(function (tg) {
      return _setTag(terms, tg, world, isSafe);
    });
    return;
  }
  if (typeof tag !== 'string') {
    console.warn("compromise: Invalid tag '".concat(tag, "'")); // eslint-disable-line
    return;
  }
  tag = tag.trim();
  // support '#Noun . #Adjective' syntax
  if (isMulti.test(tag)) {
    multiTag(terms, tag, tagSet, isSafe);
    return;
  }
  tag = tag.replace(/^#/, '');
  // let set = false
  for (var i = 0; i < terms.length; i += 1) {
    tagTerm(terms[i], tag, tagSet, isSafe);
  }
};
var _default = exports.default = _setTag;
},{"process":"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/compromise/src/1-one/tag/methods/unTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// remove this tag, and its children, from these terms
var unTag = function unTag(terms, tag, tagSet) {
  tag = tag.trim().replace(/^#/, '');
  for (var i = 0; i < terms.length; i += 1) {
    var term = terms[i];
    // don't untag anything if term is frozen
    if (term.frozen === true) {
      continue;
    }
    // support clearing all tags, with '*'
    if (tag === '*') {
      term.tags.clear();
      continue;
    }
    // for known tags, do logical dependencies first
    var known = tagSet[tag];
    // removing #Verb should also remove #PastTense
    if (known && known.children.length > 0) {
      for (var o = 0; o < known.children.length; o += 1) {
        term.tags.delete(known.children[o]);
      }
    }
    term.tags.delete(tag);
  }
};
var _default = exports.default = unTag;
},{}],"node_modules/compromise/src/1-one/tag/methods/canBe.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// quick check if this tag will require any untagging
var canBe = function canBe(term, tag, tagSet) {
  if (!tagSet.hasOwnProperty(tag)) {
    return true; // everything can be an unknown tag
  }
  var not = tagSet[tag].not || [];
  for (var i = 0; i < not.length; i += 1) {
    if (term.tags.has(not[i])) {
      return false;
    }
  }
  return true;
};
var _default = exports.default = canBe;
},{}],"node_modules/grad-school/builds/grad-school.mjs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var e = function e(_e) {
    return _e.children = _e.children || [], _e._cache = _e._cache || {}, _e.props = _e.props || {}, _e._cache.parents = _e._cache.parents || [], _e._cache.children = _e._cache.children || [], _e;
  },
  t = /^ *(#|\/\/)/,
  n = function n(t) {
    var n = t.trim().split(/->/),
      r = [];
    n.forEach(function (t) {
      r = r.concat(function (t) {
        if (!(t = t.trim())) return null;
        if (/^\[/.test(t) && /\]$/.test(t)) {
          var _n = (t = (t = t.replace(/^\[/, "")).replace(/\]$/, "")).split(/,/);
          return _n = _n.map(function (e) {
            return e.trim();
          }).filter(function (e) {
            return e;
          }), _n = _n.map(function (t) {
            return e({
              id: t
            });
          }), _n;
        }
        return [e({
          id: t
        })];
      }(t));
    }), r = r.filter(function (e) {
      return e;
    });
    var i = r[0];
    for (var _e2 = 1; _e2 < r.length; _e2 += 1) i.children.push(r[_e2]), i = r[_e2];
    return r[0];
  },
  r = function r(e, t) {
    var n = [],
      r = [e];
    var _loop = function _loop() {
      var e = r.pop();
      n.push(e), e.children && e.children.forEach(function (n) {
        t && t(e, n), r.push(n);
      });
    };
    for (; r.length > 0;) {
      _loop();
    }
    return n;
  },
  i = function i(e) {
    return "[object Array]" === Object.prototype.toString.call(e);
  },
  c = function c(e) {
    return (e = e || "").trim();
  },
  s = function s() {
    var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return "string" == typeof c ? function (r) {
      var i = r.split(/\r?\n/),
        c = [];
      i.forEach(function (e) {
        if (!e.trim() || t.test(e)) return;
        var r = function (e) {
          var t = /^( {2}|\t)/;
          var n = 0;
          for (; t.test(e);) e = e.replace(t, ""), n += 1;
          return n;
        }(e);
        c.push({
          indent: r,
          node: n(e)
        });
      });
      var s = function (e) {
        var t = {
          children: []
        };
        return e.forEach(function (n, r) {
          0 === n.indent ? t.children = t.children.concat(n.node) : e[r - 1] && function (e, t) {
            var n = e[t].indent;
            for (; t >= 0; t -= 1) if (e[t].indent < n) return e[t];
            return e[0];
          }(e, r).node.children.push(n.node);
        }), t;
      }(c);
      return s = e(s), s;
    }(c) : i(c) ? function (t) {
      var n = {};
      t.forEach(function (e) {
        n[e.id] = e;
      });
      var r = e({});
      return t.forEach(function (t) {
        if ((t = e(t)).parent) {
          if (n.hasOwnProperty(t.parent)) {
            var _e3 = n[t.parent];
            delete t.parent, _e3.children.push(t);
          } else console.warn("[Grad] - missing node '".concat(t.parent, "'"));
        } else r.children.push(t);
      }), r;
    }(c) : (r(s = c).forEach(e), s);
    var s;
  },
  h = function h(e) {
    return "[31m" + e + "[0m";
  },
  o = function o(e) {
    return "[2m" + e + "[0m";
  },
  l = function l(e, t) {
    var n = "-> ";
    t && (n = o("→ "));
    var i = "";
    return r(e).forEach(function (e, r) {
      var c = e.id || "";
      if (t && (c = h(c)), 0 === r && !e.id) return;
      var s = e._cache.parents.length;
      i += "    ".repeat(s) + n + c + "\n";
    }), i;
  },
  a = function a(e) {
    var t = r(e);
    t.forEach(function (e) {
      delete (e = Object.assign({}, e)).children;
    });
    var n = t[0];
    return n && !n.id && 0 === Object.keys(n.props).length && t.shift(), t;
  },
  p = {
    text: l,
    txt: l,
    array: a,
    flat: a
  },
  d = function d(e, t) {
    return "nested" === t || "json" === t ? e : "debug" === t ? (console.log(l(e, !0)), null) : p.hasOwnProperty(t) ? p[t](e) : e;
  },
  u = function u(e) {
    r(e, function (e, t) {
      e.id && (e._cache.parents = e._cache.parents || [], t._cache.parents = e._cache.parents.concat([e.id]));
    });
  },
  f = function f(e, t) {
    return Object.keys(t).forEach(function (n) {
      if (t[n] instanceof Set) {
        var _r = e[n] || new Set();
        e[n] = new Set([].concat(_toConsumableArray(_r), _toConsumableArray(t[n])));
      } else {
        if (function (e) {
          return e && "object" == _typeof(e) && !Array.isArray(e);
        }(t[n])) {
          var _r2 = e[n] || {};
          e[n] = Object.assign({}, t[n], _r2);
        } else i(t[n]) ? e[n] = t[n].concat(e[n] || []) : void 0 === e[n] && (e[n] = t[n]);
      }
    }), e;
  },
  j = /\//;
var g = /*#__PURE__*/function () {
  function g() {
    var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, g);
    Object.defineProperty(this, "json", {
      enumerable: !1,
      value: e,
      writable: !0
    });
  }
  return _createClass(g, [{
    key: "children",
    get: function get() {
      return this.json.children;
    }
  }, {
    key: "id",
    get: function get() {
      return this.json.id;
    }
  }, {
    key: "found",
    get: function get() {
      return this.json.id || this.json.children.length > 0;
    }
  }, {
    key: "props",
    value: function props() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = this.json.props || {};
      return "string" == typeof e && (t[e] = !0), this.json.props = Object.assign(t, e), this;
    }
  }, {
    key: "get",
    value: function get(t) {
      if (t = c(t), !j.test(t)) {
        var _e4 = this.json.children.find(function (e) {
          return e.id === t;
        });
        return new g(_e4);
      }
      var n = function (e, t) {
        var n = function (e) {
          return "string" != typeof e ? e : (e = e.replace(/^\//, "")).split(/\//);
        }(t = t || "");
        var _loop2 = function _loop2(_t) {
            var r = e.children.find(function (e) {
              return e.id === n[_t];
            });
            if (!r) return {
              v: null
            };
            e = r;
          },
          _ret;
        for (var _t = 0; _t < n.length; _t += 1) {
          _ret = _loop2(_t);
          if (_ret) return _ret.v;
        }
        return e;
      }(this.json, t) || e({});
      return new g(n);
    }
  }, {
    key: "add",
    value: function add(t) {
      var _this = this;
      var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (i(t)) return t.forEach(function (e) {
        return _this.add(c(e), n);
      }), this;
      t = c(t);
      var r = e({
        id: t,
        props: n
      });
      return this.json.children.push(r), new g(r);
    }
  }, {
    key: "remove",
    value: function remove(e) {
      return e = c(e), this.json.children = this.json.children.filter(function (t) {
        return t.id !== e;
      }), this;
    }
  }, {
    key: "nodes",
    value: function nodes() {
      return r(this.json).map(function (e) {
        return delete (e = Object.assign({}, e)).children, e;
      });
    }
  }, {
    key: "cache",
    value: function cache() {
      return function (e) {
        var t = r(e, function (e, t) {
            e.id && (e._cache.parents = e._cache.parents || [], e._cache.children = e._cache.children || [], t._cache.parents = e._cache.parents.concat([e.id]));
          }),
          n = {};
        t.forEach(function (e) {
          e.id && (n[e.id] = e);
        }), t.forEach(function (e) {
          e._cache.parents.forEach(function (t) {
            n.hasOwnProperty(t) && n[t]._cache.children.push(e.id);
          });
        }), e._cache.children = Object.keys(n);
      }(this.json), this;
    }
  }, {
    key: "list",
    value: function list() {
      return r(this.json);
    }
  }, {
    key: "fillDown",
    value: function fillDown() {
      var e;
      return e = this.json, r(e, function (e, t) {
        t.props = f(t.props, e.props);
      }), this;
    }
  }, {
    key: "depth",
    value: function depth() {
      u(this.json);
      var e = r(this.json),
        t = e.length > 1 ? 1 : 0;
      return e.forEach(function (e) {
        if (0 === e._cache.parents.length) return;
        var n = e._cache.parents.length + 1;
        n > t && (t = n);
      }), t;
    }
  }, {
    key: "out",
    value: function out(e) {
      return u(this.json), d(this.json, e);
    }
  }, {
    key: "debug",
    value: function debug() {
      return u(this.json), d(this.json, "debug"), this;
    }
  }]);
}();
var _ = exports.default = function _(e) {
  var t = s(e);
  return new g(t);
};
_.prototype.plugin = function (e) {
  e(this);
};
},{}],"node_modules/compromise/src/1-one/tag/methods/addTags/_colors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// i just made these up
var colors = {
  Noun: 'blue',
  Verb: 'green',
  Negative: 'green',
  Date: 'red',
  Value: 'red',
  Adjective: 'magenta',
  Preposition: 'cyan',
  Conjunction: 'cyan',
  Determiner: 'cyan',
  Hyphenated: 'cyan',
  Adverb: 'cyan'
};
var _default = exports.default = colors;
},{}],"node_modules/compromise/src/1-one/tag/methods/addTags/02-fmt.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _colors = _interopRequireDefault(require("./_colors.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var getColor = function getColor(node) {
  if (_colors.default.hasOwnProperty(node.id)) {
    return _colors.default[node.id];
  }
  if (_colors.default.hasOwnProperty(node.is)) {
    return _colors.default[node.is];
  }
  var found = node._cache.parents.find(function (c) {
    return _colors.default[c];
  });
  return _colors.default[found];
};

// convert tags to our final format
var fmt = function fmt(nodes) {
  var res = {};
  nodes.forEach(function (node) {
    var _node$props = node.props,
      not = _node$props.not,
      also = _node$props.also,
      is = _node$props.is,
      novel = _node$props.novel;
    var parents = node._cache.parents;
    if (also) {
      parents = parents.concat(also);
    }
    res[node.id] = {
      is: is,
      not: not,
      novel: novel,
      also: also,
      parents: parents,
      children: node._cache.children,
      color: getColor(node)
    };
  });
  // lastly, add all children of all nots
  Object.keys(res).forEach(function (k) {
    var nots = new Set(res[k].not);
    res[k].not.forEach(function (not) {
      if (res[not]) {
        res[not].children.forEach(function (tag) {
          return nots.add(tag);
        });
      }
    });
    res[k].not = Array.from(nots);
  });
  return res;
};
var _default = exports.default = fmt;
},{"./_colors.js":"node_modules/compromise/src/1-one/tag/methods/addTags/_colors.js"}],"node_modules/compromise/src/1-one/tag/methods/addTags/01-validate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var toArr = function toArr(input) {
  if (!input) {
    return [];
  }
  if (typeof input === 'string') {
    return [input];
  }
  return input;
};
var addImplied = function addImplied(tags, already) {
  Object.keys(tags).forEach(function (k) {
    // support deprecated fmts
    if (tags[k].isA) {
      tags[k].is = tags[k].isA;
    }
    if (tags[k].notA) {
      tags[k].not = tags[k].notA;
    }
    // add any implicit 'is' tags
    if (tags[k].is && typeof tags[k].is === 'string') {
      if (!already.hasOwnProperty(tags[k].is) && !tags.hasOwnProperty(tags[k].is)) {
        tags[tags[k].is] = {};
      }
    }
    // add any implicit 'not' tags
    if (tags[k].not && typeof tags[k].not === 'string' && !tags.hasOwnProperty(tags[k].not)) {
      if (!already.hasOwnProperty(tags[k].not) && !tags.hasOwnProperty(tags[k].not)) {
        tags[tags[k].not] = {};
      }
    }
  });
  return tags;
};
var validate = function validate(tags, already) {
  tags = addImplied(tags, already);

  // property validation
  Object.keys(tags).forEach(function (k) {
    tags[k].children = toArr(tags[k].children);
    tags[k].not = toArr(tags[k].not);
  });
  // not links are bi-directional
  // add any incoming not tags
  Object.keys(tags).forEach(function (k) {
    var nots = tags[k].not || [];
    nots.forEach(function (no) {
      if (tags[no] && tags[no].not) {
        tags[no].not.push(k);
      }
    });
  });
  return tags;
};
var _default = exports.default = validate;
},{}],"node_modules/compromise/src/1-one/tag/methods/addTags/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _gradSchool = _interopRequireDefault(require("grad-school"));
var _fmt = _interopRequireDefault(require("./02-fmt.js"));
var _validate = _interopRequireDefault(require("./01-validate.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'fill-down' parent logic inference
var compute = function compute(allTags) {
  // setup graph-lib format
  var flatList = Object.keys(allTags).map(function (k) {
    var o = allTags[k];
    var props = {
      not: new Set(o.not),
      also: o.also,
      is: o.is,
      novel: o.novel
    };
    return {
      id: k,
      parent: o.is,
      props: props,
      children: []
    };
  });
  var graph = (0, _gradSchool.default)(flatList).cache().fillDown();
  return graph.out('array');
};
var fromUser = function fromUser(tags) {
  Object.keys(tags).forEach(function (k) {
    tags[k] = Object.assign({}, tags[k]);
    tags[k].novel = true;
  });
  return tags;
};
var addTags = function addTags(tags, already) {
  // are these tags internal ones, or user-generated?
  if (Object.keys(already).length > 0) {
    tags = fromUser(tags);
  }
  tags = (0, _validate.default)(tags, already);
  var allTags = Object.assign({}, already, tags);
  // do some basic setting-up
  // 'fill-down' parent logic
  var nodes = compute(allTags);
  // convert it to our final format
  var res = (0, _fmt.default)(nodes);
  return res;
};
var _default = exports.default = addTags;
},{"grad-school":"node_modules/grad-school/builds/grad-school.mjs","./02-fmt.js":"node_modules/compromise/src/1-one/tag/methods/addTags/02-fmt.js","./01-validate.js":"node_modules/compromise/src/1-one/tag/methods/addTags/01-validate.js"}],"node_modules/compromise/src/1-one/tag/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _setTag = _interopRequireDefault(require("./setTag.js"));
var _unTag = _interopRequireDefault(require("./unTag.js"));
var _canBe = _interopRequireDefault(require("./canBe.js"));
var _index = _interopRequireDefault(require("./addTags/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  one: {
    setTag: _setTag.default,
    unTag: _unTag.default,
    addTags: _index.default,
    canBe: _canBe.default
  }
};
},{"./setTag.js":"node_modules/compromise/src/1-one/tag/methods/setTag.js","./unTag.js":"node_modules/compromise/src/1-one/tag/methods/unTag.js","./canBe.js":"node_modules/compromise/src/1-one/tag/methods/canBe.js","./addTags/index.js":"node_modules/compromise/src/1-one/tag/methods/addTags/index.js"}],"node_modules/compromise/src/1-one/tag/api/tag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/* eslint no-console: 0 */
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};
var fns = {
  /** add a given tag, to all these terms */
  tag: function tag(input) {
    var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var isSafe = arguments.length > 2 ? arguments[2] : undefined;
    if (!this.found || !input) {
      return this;
    }
    var terms = this.termList();
    if (terms.length === 0) {
      return this;
    }
    var methods = this.methods,
      verbose = this.verbose,
      world = this.world;
    // logger
    if (verbose === true) {
      console.log(' +  ', input, reason || '');
    }
    if (isArray(input)) {
      input.forEach(function (tag) {
        return methods.one.setTag(terms, tag, world, isSafe, reason);
      });
    } else {
      methods.one.setTag(terms, input, world, isSafe, reason);
    }
    // uncache
    this.uncache();
    return this;
  },
  /** add a given tag, only if it is consistent */
  tagSafe: function tagSafe(input) {
    var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return this.tag(input, reason, true);
  },
  /** remove a given tag from all these terms */
  unTag: function unTag(input, reason) {
    if (!this.found || !input) {
      return this;
    }
    var terms = this.termList();
    if (terms.length === 0) {
      return this;
    }
    var methods = this.methods,
      verbose = this.verbose,
      model = this.model;
    // logger
    if (verbose === true) {
      console.log(' -  ', input, reason || '');
    }
    var tagSet = model.one.tagSet;
    if (isArray(input)) {
      input.forEach(function (tag) {
        return methods.one.unTag(terms, tag, tagSet);
      });
    } else {
      methods.one.unTag(terms, input, tagSet);
    }
    // uncache
    this.uncache();
    return this;
  },
  /** return only the terms that can be this tag  */
  canBe: function canBe(tag) {
    tag = tag.replace(/^#/, '');
    var tagSet = this.model.one.tagSet;
    var canBe = this.methods.one.canBe;
    var nope = [];
    this.document.forEach(function (terms, n) {
      terms.forEach(function (term, i) {
        if (!canBe(term, tag, tagSet)) {
          nope.push([n, i, i + 1]);
        }
      });
    });
    var noDoc = this.update(nope);
    return this.difference(noDoc);
  }
};
var _default = exports.default = fns;
},{}],"node_modules/compromise/src/1-one/tag/api/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _tag = _interopRequireDefault(require("./tag.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var tagAPI = function tagAPI(View) {
  Object.assign(View.prototype, _tag.default);
};
var _default = exports.default = tagAPI;
},{"./tag.js":"node_modules/compromise/src/1-one/tag/api/tag.js"}],"node_modules/compromise/src/1-one/tag/lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// wire-up more pos-tags to our model
var addTags = function addTags(tags) {
  var _this$world = this.world(),
    model = _this$world.model,
    methods = _this$world.methods;
  var tagSet = model.one.tagSet;
  var fn = methods.one.addTags;
  var res = fn(tags, tagSet);
  model.one.tagSet = res;
  return this;
};
var _default = exports.default = {
  addTags: addTags
};
},{}],"node_modules/compromise/src/1-one/tag/compute/tagRank.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var boringTags = new Set(['Auxiliary', 'Possessive']);
var sortByKids = function sortByKids(tags, tagSet) {
  tags = tags.sort(function (a, b) {
    // (unknown tags are interesting)
    if (boringTags.has(a) || !tagSet.hasOwnProperty(b)) {
      return 1;
    }
    if (boringTags.has(b) || !tagSet.hasOwnProperty(a)) {
      return -1;
    }
    var kids = tagSet[a].children || [];
    var aKids = kids.length;
    kids = tagSet[b].children || [];
    var bKids = kids.length;
    return aKids - bKids;
  });
  return tags;
};
var tagRank = function tagRank(view) {
  var document = view.document,
    world = view.world;
  var tagSet = world.model.one.tagSet;
  document.forEach(function (terms) {
    terms.forEach(function (term) {
      var tags = Array.from(term.tags);
      term.tagRank = sortByKids(tags, tagSet);
    });
  });
};
var _default = exports.default = tagRank;
},{}],"node_modules/compromise/src/1-one/tag/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./methods/index.js"));
var _index2 = _interopRequireDefault(require("./api/index.js"));
var _lib = _interopRequireDefault(require("./lib.js"));
var _tagRank = _interopRequireDefault(require("./compute/tagRank.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  model: {
    one: {
      tagSet: {}
    }
  },
  compute: {
    tagRank: _tagRank.default
  },
  methods: _index.default,
  api: _index2.default,
  lib: _lib.default
};
},{"./methods/index.js":"node_modules/compromise/src/1-one/tag/methods/index.js","./api/index.js":"node_modules/compromise/src/1-one/tag/api/index.js","./lib.js":"node_modules/compromise/src/1-one/tag/lib.js","./compute/tagRank.js":"node_modules/compromise/src/1-one/tag/compute/tagRank.js"}],"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/01-simple-split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// split by periods, question marks, unicode ⁇, etc
var initSplit = /([.!?\u203D\u2E18\u203C\u2047-\u2049\u3002]+\s)/g;
// merge these back into prev sentence
var splitsOnly = /^[.!?\u203D\u2E18\u203C\u2047-\u2049\u3002]+\s$/;
var newLine = /((?:\r?\n|\r)+)/; // Match different new-line formats

// Start with a regex:
var basicSplit = function basicSplit(text) {
  var all = [];
  //first, split by newline
  var lines = text.split(newLine);
  for (var i = 0; i < lines.length; i++) {
    //split by period, question-mark, and exclamation-mark
    var arr = lines[i].split(initSplit);
    for (var o = 0; o < arr.length; o++) {
      // merge 'foo' + '.'
      if (arr[o + 1] && splitsOnly.test(arr[o + 1]) === true) {
        arr[o] += arr[o + 1];
        arr[o + 1] = '';
      }
      if (arr[o] !== '') {
        all.push(arr[o]);
      }
    }
  }
  return all;
};
var _default = exports.default = basicSplit;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/02-simple-merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasLetter = /[a-z0-9\u00C0-\u00FF\u00a9\u00ae\u2000-\u3300\ud000-\udfff]/i;
var hasSomething = /\S/;
var notEmpty = function notEmpty(splits) {
  var chunks = [];
  for (var i = 0; i < splits.length; i++) {
    var s = splits[i];
    if (s === undefined || s === '') {
      continue;
    }
    //this is meaningful whitespace
    if (hasSomething.test(s) === false || hasLetter.test(s) === false) {
      //add it to the last one
      if (chunks[chunks.length - 1]) {
        chunks[chunks.length - 1] += s;
        continue;
      } else if (splits[i + 1]) {
        //add it to the next one
        splits[i + 1] = s + splits[i + 1];
        continue;
      }
    }
    //else, only whitespace, no terms, no sentence
    chunks.push(s);
  }
  return chunks;
};
var _default = exports.default = notEmpty;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/03-smart-merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//loop through these chunks, and join the non-sentence chunks back together..
var smartMerge = function smartMerge(chunks, world) {
  var isSentence = world.methods.one.tokenize.isSentence;
  var abbrevs = world.model.one.abbreviations || new Set();
  var sentences = [];
  for (var i = 0; i < chunks.length; i++) {
    var c = chunks[i];
    //should this chunk be combined with the next one?
    if (chunks[i + 1] && isSentence(c, abbrevs) === false) {
      chunks[i + 1] = c + (chunks[i + 1] || '');
    } else if (c && c.length > 0) {
      //this chunk is a proper sentence..
      sentences.push(c);
      chunks[i] = '';
    }
  }
  return sentences;
};
var _default = exports.default = smartMerge;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/04-quote-merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/* eslint-disable regexp/no-dupe-characters-character-class */

// merge embedded quotes into 1 sentence
// like - 'he said "no!" and left.'
var MAX_QUOTE = 280; // ¯\_(ツ)_/¯

// don't support single-quotes for multi-sentences
var pairs = {
  "\"": "\"",
  // 'StraightDoubleQuotes'
  "\uFF02": "\uFF02",
  // 'StraightDoubleQuotesWide'
  // '\u0027': '\u0027', // 'StraightSingleQuotes'
  "\u201C": "\u201D",
  // 'CommaDoubleQuotes'
  // '\u2018': '\u2019', // 'CommaSingleQuotes'
  "\u201F": "\u201D",
  // 'CurlyDoubleQuotesReversed'
  // '\u201B': '\u2019', // 'CurlySingleQuotesReversed'
  "\u201E": "\u201D",
  // 'LowCurlyDoubleQuotes'
  "\u2E42": "\u201D",
  // 'LowCurlyDoubleQuotesReversed'
  "\u201A": "\u2019",
  // 'LowCurlySingleQuotes'
  "\xAB": "\xBB",
  // 'AngleDoubleQuotes'
  "\u2039": "\u203A",
  // 'AngleSingleQuotes'
  "\u2035": "\u2032",
  // 'PrimeSingleQuotes'
  "\u2036": "\u2033",
  // 'PrimeDoubleQuotes'
  "\u2037": "\u2034",
  // 'PrimeTripleQuotes'
  "\u301D": "\u301E",
  // 'PrimeDoubleQuotes'
  // '\u0060': '\u00B4', // 'PrimeSingleQuotes'
  "\u301F": "\u301E" // 'LowPrimeDoubleQuotesReversed'
};
var openQuote = RegExp('[' + Object.keys(pairs).join('') + ']', 'g');
var closeQuote = RegExp('[' + Object.values(pairs).join('') + ']', 'g');
var closesQuote = function closesQuote(str) {
  if (!str) {
    return false;
  }
  var m = str.match(closeQuote);
  if (m !== null && m.length === 1) {
    return true;
  }
  return false;
};

// allow micro-sentences when inside a quotation, like:
// the doc said "no sir. i will not beg" and walked away.
var quoteMerge = function quoteMerge(splits) {
  var arr = [];
  for (var i = 0; i < splits.length; i += 1) {
    var split = splits[i];
    // do we have an open-quote and not a closed one?
    var m = split.match(openQuote);
    if (m !== null && m.length === 1) {
      // look at the next sentence for a closing quote,
      if (closesQuote(splits[i + 1]) && splits[i + 1].length < MAX_QUOTE) {
        splits[i] += splits[i + 1]; // merge them
        arr.push(splits[i]);
        splits[i + 1] = '';
        i += 1;
        continue;
      }
      // look at n+2 for a closing quote,
      if (closesQuote(splits[i + 2])) {
        var toAdd = splits[i + 1] + splits[i + 2]; // merge them all
        //make sure it's not too-long
        if (toAdd.length < MAX_QUOTE) {
          splits[i] += toAdd;
          arr.push(splits[i]);
          splits[i + 1] = '';
          splits[i + 2] = '';
          i += 2;
          continue;
        }
      }
    }
    arr.push(splits[i]);
  }
  return arr;
};
var _default = exports.default = quoteMerge;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/05-parens-merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var MAX_LEN = 250; // ¯\_(ツ)_/¯

// support unicode variants?
// https://stackoverflow.com/questions/13535172/list-of-all-unicodes-open-close-brackets
var hasOpen = /\(/g;
var hasClosed = /\)/g;
var mergeParens = function mergeParens(splits) {
  var arr = [];
  for (var i = 0; i < splits.length; i += 1) {
    var split = splits[i];
    var m = split.match(hasOpen);
    if (m !== null && m.length === 1) {
      // look at next sentence, for closing parenthesis
      if (splits[i + 1] && splits[i + 1].length < MAX_LEN) {
        var m2 = splits[i + 1].match(hasClosed);
        if (m2 !== null && m.length === 1 && !hasOpen.test(splits[i + 1])) {
          // merge in 2nd sentence
          splits[i] += splits[i + 1];
          arr.push(splits[i]);
          splits[i + 1] = '';
          i += 1;
          continue;
        }
      }
    }
    arr.push(splits[i]);
  }
  return arr;
};
var _default = exports.default = mergeParens;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _simpleSplit = _interopRequireDefault(require("./01-simple-split.js"));
var _simpleMerge = _interopRequireDefault(require("./02-simple-merge.js"));
var _smartMerge = _interopRequireDefault(require("./03-smart-merge.js"));
var _quoteMerge = _interopRequireDefault(require("./04-quote-merge.js"));
var _parensMerge = _interopRequireDefault(require("./05-parens-merge.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.
// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.
//regs-
var hasSomething = /\S/;
var startWhitespace = /^\s+/;
var splitSentences = function splitSentences(text, world) {
  text = text || '';
  text = String(text);
  // Ensure it 'smells like' a sentence
  if (!text || typeof text !== 'string' || hasSomething.test(text) === false) {
    return [];
  }
  // cleanup unicode-spaces
  text = text.replace('\xa0', ' ');
  // First do a greedy-split..
  var splits = (0, _simpleSplit.default)(text);
  // Filter-out the crap ones
  var sentences = (0, _simpleMerge.default)(splits);
  //detection of non-sentence chunks:
  sentences = (0, _smartMerge.default)(sentences, world);
  // allow 'he said "no sir." and left.'
  sentences = (0, _quoteMerge.default)(sentences);
  // allow 'i thought (no way!) and left.'
  sentences = (0, _parensMerge.default)(sentences);
  //if we never got a sentence, return the given text
  if (sentences.length === 0) {
    return [text];
  }
  //move whitespace to the ends of sentences, when possible
  //['hello',' world'] -> ['hello ','world']
  for (var i = 1; i < sentences.length; i += 1) {
    var ws = sentences[i].match(startWhitespace);
    if (ws !== null) {
      sentences[i - 1] += ws[0];
      sentences[i] = sentences[i].replace(startWhitespace, '');
    }
  }
  return sentences;
};
var _default = exports.default = splitSentences;
},{"./01-simple-split.js":"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/01-simple-split.js","./02-simple-merge.js":"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/02-simple-merge.js","./03-smart-merge.js":"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/03-smart-merge.js","./04-quote-merge.js":"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/04-quote-merge.js","./05-parens-merge.js":"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/05-parens-merge.js"}],"node_modules/compromise/src/1-one/tokenize/methods/02-terms/01-hyphens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitHyphens = exports.hasHyphen = void 0;
var hasHyphen = exports.hasHyphen = function hasHyphen(str, model) {
  var parts = str.split(/[-–—]/);
  if (parts.length <= 1) {
    return false;
  }
  var _model$one = model.one,
    prefixes = _model$one.prefixes,
    suffixes = _model$one.suffixes;

  // l-theanine, x-ray
  if (parts[0].length === 1 && /[a-z]/i.test(parts[0])) {
    return false;
  }
  //dont split 're-do'
  if (prefixes.hasOwnProperty(parts[0])) {
    return false;
  }
  //dont split 'flower-like'
  parts[1] = parts[1].trim().replace(/[.?!]$/, '');
  if (suffixes.hasOwnProperty(parts[1])) {
    return false;
  }
  //letter-number 'aug-20'
  var reg = /^([a-z\u00C0-\u00FF`"'/]+)[-–—]([a-z0-9\u00C0-\u00FF].*)/i;
  if (reg.test(str) === true) {
    return true;
  }
  //number-letter '20-aug'
  var reg2 = /^[('"]?([0-9]{1,4})[-–—]([a-z\u00C0-\u00FF`"'/-]+[)'"]?$)/i;
  if (reg2.test(str) === true) {
    return true;
  }
  return false;
};
var splitHyphens = exports.splitHyphens = function splitHyphens(word) {
  var arr = [];
  //support multiple-hyphenated-terms
  var hyphens = word.split(/[-–—]/);
  var whichDash = '-';
  var found = word.match(/[-–—]/);
  if (found && found[0]) {
    whichDash = found;
  }
  for (var o = 0; o < hyphens.length; o++) {
    if (o === hyphens.length - 1) {
      arr.push(hyphens[o]);
    } else {
      arr.push(hyphens[o] + whichDash);
    }
  }
  return arr;
};
},{}],"node_modules/compromise/src/1-one/tokenize/methods/02-terms/03-ranges.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// combine '2 - 5' like '2-5' is
// 2-4: 2, 4
var combineRanges = function combineRanges(arr) {
  var startRange = /^[0-9]{1,4}(:[0-9][0-9])?([a-z]{1,2})? ?[-–—] ?$/;
  var endRange = /^[0-9]{1,4}([a-z]{1,2})? ?$/;
  for (var i = 0; i < arr.length - 1; i += 1) {
    if (arr[i + 1] && startRange.test(arr[i]) && endRange.test(arr[i + 1])) {
      arr[i] = arr[i] + arr[i + 1];
      arr[i + 1] = null;
    }
  }
  return arr;
};
var _default = exports.default = combineRanges;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/02-terms/02-slashes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isSlash = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF]) ?\/ ?(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])+$/;

// 'he / she' should be one word
var combineSlashes = function combineSlashes(arr) {
  for (var i = 1; i < arr.length - 1; i++) {
    if (isSlash.test(arr[i])) {
      arr[i - 1] += arr[i] + arr[i + 1];
      arr[i] = null;
      arr[i + 1] = null;
    }
  }
  return arr;
};
var _default = exports.default = combineSlashes;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/02-terms/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _hyphens = require("./01-hyphens.js");
var _ranges = _interopRequireDefault(require("./03-ranges.js"));
var _slashes = _interopRequireDefault(require("./02-slashes.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var wordlike = /\S/;
var isBoundary = /^[!?.]+$/;
var naiiveSplit = /(\S+)/;
var notWord = ['.', '?', '!', ':', ';', '-', '–', '—', '--', '...', '(', ')', '[', ']', '"', "'", '`', '«', '»', '*', '•'];
notWord = notWord.reduce(function (h, c) {
  h[c] = true;
  return h;
}, {});
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

//turn a string into an array of strings (naiive for now, lumped later)
var splitWords = function splitWords(str, model) {
  var result = [];
  var arr = [];
  //start with a naiive split
  str = str || '';
  if (typeof str === 'number') {
    str = String(str);
  }
  if (isArray(str)) {
    return str;
  }
  var words = str.split(naiiveSplit);
  for (var i = 0; i < words.length; i++) {
    //split 'one-two'
    if ((0, _hyphens.hasHyphen)(words[i], model) === true) {
      arr = arr.concat((0, _hyphens.splitHyphens)(words[i]));
      continue;
    }
    arr.push(words[i]);
  }
  //greedy merge whitespace+arr to the right
  var carry = '';
  for (var _i = 0; _i < arr.length; _i++) {
    var word = arr[_i];
    //if it's more than a whitespace
    if (wordlike.test(word) === true && notWord.hasOwnProperty(word) === false && isBoundary.test(word) === false) {
      //put whitespace on end of previous term, if possible
      if (result.length > 0) {
        result[result.length - 1] += carry;
        result.push(word);
      } else {
        //otherwise, but whitespace before
        result.push(carry + word);
      }
      carry = '';
    } else {
      carry += word;
    }
  }
  //handle last one
  if (carry) {
    if (result.length === 0) {
      result[0] = '';
    }
    result[result.length - 1] += carry; //put it on the end
  }
  // combine 'one / two'
  result = (0, _slashes.default)(result);
  result = (0, _ranges.default)(result);
  // remove empty results
  result = result.filter(function (s) {
    return s;
  });
  return result;
};
var _default = exports.default = splitWords;
},{"./01-hyphens.js":"node_modules/compromise/src/1-one/tokenize/methods/02-terms/01-hyphens.js","./03-ranges.js":"node_modules/compromise/src/1-one/tokenize/methods/02-terms/03-ranges.js","./02-slashes.js":"node_modules/compromise/src/1-one/tokenize/methods/02-terms/02-slashes.js"}],"node_modules/compromise/src/1-one/tokenize/methods/03-whitespace/tokenize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//all punctuation marks, from https://en.wikipedia.org/wiki/Punctuation

//we have slightly different rules for start/end - like #hashtags.
var isLetter = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])/;
var isNumber = /(?:[\$0-9\xA2-\xA5\xB2\xB3\xB9\xBC-\xBE\u058F\u060B\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u07FE\u07FF\u0966-\u096F\u09E6-\u09EF\u09F2-\u09F9\u09FB\u0A66-\u0A6F\u0AE6-\u0AEF\u0AF1\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0BF9\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E3F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17DB\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u20A0-\u20C0\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA838\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFDFC\uFE69\uFF04\uFF10-\uFF19\uFFE0\uFFE1\uFFE5\uFFE6]|\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDD40-\uDD49\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDED0-\uDEE3\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59\uDFF0-\uDFF9]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDF50-\uDF59\uDFC0-\uDFD4\uDFDD-\uDFE0]|\uD809[\uDC00-\uDC6E]|\uD818[\uDD30-\uDD39]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDD70-\uDD79\uDE80-\uDE96]|\uD833[\uDCF0-\uDCF9]|\uD834[\uDEC0-\uDED3\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9\uDEFF]|\uD839[\uDCF0-\uDCF9\uDDF1-\uDDFA]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9])/;
var hasAcronym = /^[a-z]\.([a-z]\.)+/i;
var chillin = /[sn]['’]$/;
var normalizePunctuation = function normalizePunctuation(str, model) {
  // quick lookup for allowed pre/post punctuation
  var _model$one = model.one,
    prePunctuation = _model$one.prePunctuation,
    postPunctuation = _model$one.postPunctuation,
    emoticons = _model$one.emoticons;
  var original = str;
  var pre = '';
  var post = '';
  var chars = Array.from(str);

  // punctuation-only words, like '<3'
  if (emoticons.hasOwnProperty(str.trim())) {
    return {
      str: str.trim(),
      pre: pre,
      post: ' '
    }; //not great
  }

  // pop any punctuation off of the start
  var len = chars.length;
  for (var i = 0; i < len; i += 1) {
    var c = chars[0];
    // keep any declared chars
    if (prePunctuation[c] === true) {
      continue; //keep it
    }
    // keep '+' or '-' only before a number
    if ((c === '+' || c === '-') && isNumber.test(chars[1])) {
      break; //done
    }
    // '97 - year short-form
    if (c === "'" && c.length === 3 && isNumber.test(chars[1])) {
      break; //done
    }
    // start of word
    if (isLetter.test(c) || isNumber.test(c)) {
      break; //done
    }
    // punctuation
    pre += chars.shift(); //keep going
  }

  // pop any punctuation off of the end
  len = chars.length;
  for (var _i = 0; _i < len; _i += 1) {
    var _c = chars[chars.length - 1];
    // keep any declared chars
    if (postPunctuation[_c] === true) {
      continue; //keep it
    }
    // start of word
    if (isLetter.test(_c) || isNumber.test(_c)) {
      break; //done
    }
    // F.B.I.
    if (_c === '.' && hasAcronym.test(original) === true) {
      continue; //keep it
    }
    //  keep s-apostrophe - "flanders'" or "chillin'"
    if (_c === "'" && chillin.test(original) === true) {
      continue; //keep it
    }
    // punctuation
    post = chars.pop() + post; //keep going
  }
  str = chars.join('');
  //we went too far..
  if (str === '') {
    // do a very mild parse, and hope for the best.
    original = original.replace(/ *$/, function (after) {
      post = after || '';
      return '';
    });
    str = original;
    pre = '';
  }
  return {
    str: str,
    pre: pre,
    post: post
  };
};
var _default = exports.default = normalizePunctuation;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/03-whitespace/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _tokenize2 = _interopRequireDefault(require("./tokenize.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var parseTerm = function parseTerm(txt, model) {
  // cleanup any punctuation as whitespace
  var _tokenize = (0, _tokenize2.default)(txt, model),
    str = _tokenize.str,
    pre = _tokenize.pre,
    post = _tokenize.post;
  var parsed = {
    text: str,
    pre: pre,
    post: post,
    tags: new Set()
  };
  return parsed;
};
var _default = exports.default = parseTerm;
},{"./tokenize.js":"node_modules/compromise/src/1-one/tokenize/methods/03-whitespace/tokenize.js"}],"node_modules/compromise/src/1-one/tokenize/methods/unicode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// 'Björk' to 'Bjork'.
var killUnicode = function killUnicode(str, world) {
  var unicode = world.model.one.unicode || {};
  str = str || '';
  var chars = str.split('');
  chars.forEach(function (s, i) {
    if (unicode[s]) {
      chars[i] = unicode[s];
    }
  });
  return chars.join('');
};
var _default = exports.default = killUnicode;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/normal/01-cleanup.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/** some basic operations on a string to reduce noise */
var clean = function clean(str) {
  str = str || '';
  str = str.toLowerCase();
  str = str.trim();
  var original = str;
  //punctuation
  str = str.replace(/[,;.!?]+$/, '');
  //coerce Unicode ellipses
  str = str.replace(/\u2026/g, '...');
  //en-dash
  str = str.replace(/\u2013/g, '-');
  //strip leading & trailing grammatical punctuation
  if (/^[:;]/.test(str) === false) {
    str = str.replace(/\.{3,}$/g, '');
    str = str.replace(/[",.!:;?)]+$/g, '');
    str = str.replace(/^['"(]+/g, '');
  }
  // remove zero-width characters
  str = str.replace(/[\u200B-\u200D\uFEFF]/g, '');
  //do this again..
  str = str.trim();
  //oh shucks,
  if (str === '') {
    str = original;
  }
  //no-commas in numbers
  str = str.replace(/([0-9]),([0-9])/g, '$1$2');
  return str;
};
var _default = exports.default = clean;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/normal/02-acronyms.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// do acronyms need to be ASCII?  ... kind of?
var periodAcronym = /([A-Z]\.)+[A-Z]?,?$/;
var oneLetterAcronym = /^[A-Z]\.,?$/;
var noPeriodAcronym = /[A-Z]{2,}('s|,)?$/;
var lowerCaseAcronym = /([a-z]\.)+[a-z]\.?$/;
var isAcronym = function isAcronym(str) {
  //like N.D.A
  if (periodAcronym.test(str) === true) {
    return true;
  }
  //like c.e.o
  if (lowerCaseAcronym.test(str) === true) {
    return true;
  }
  //like 'F.'
  if (oneLetterAcronym.test(str) === true) {
    return true;
  }
  //like NDA
  if (noPeriodAcronym.test(str) === true) {
    return true;
  }
  return false;
};
var doAcronym = function doAcronym(str) {
  if (isAcronym(str)) {
    str = str.replace(/\./g, '');
  }
  return str;
};
var _default = exports.default = doAcronym;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/normal/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _cleanup = _interopRequireDefault(require("./01-cleanup.js"));
var _acronyms = _interopRequireDefault(require("./02-acronyms.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// import doUnicode from './02-unicode.js'

var normalize = function normalize(term, world) {
  var killUnicode = world.methods.one.killUnicode;
  // console.log(world.methods.one)
  var str = term.text || '';
  str = (0, _cleanup.default)(str);
  //(very) rough ASCII transliteration -  bjŏrk -> bjork
  str = killUnicode(str, world);
  str = (0, _acronyms.default)(str);
  term.normal = str;
};
var _default = exports.default = normalize;
},{"./01-cleanup.js":"node_modules/compromise/src/1-one/tokenize/compute/normal/01-cleanup.js","./02-acronyms.js":"node_modules/compromise/src/1-one/tokenize/compute/normal/02-acronyms.js"}],"node_modules/compromise/src/1-one/tokenize/methods/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../compute/normal/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// turn a string input into a 'document' json format
var parse = function parse(input, world) {
  var methods = world.methods,
    model = world.model;
  var _methods$one$tokenize = methods.one.tokenize,
    splitSentences = _methods$one$tokenize.splitSentences,
    splitTerms = _methods$one$tokenize.splitTerms,
    splitWhitespace = _methods$one$tokenize.splitWhitespace;
  input = input || '';
  // split into sentences
  var sentences = splitSentences(input, world);
  // split into word objects
  input = sentences.map(function (txt) {
    var terms = splitTerms(txt, model);
    // split into [pre-text-post]
    terms = terms.map(function (t) {
      return splitWhitespace(t, model);
    });
    // add normalized term format, always
    terms.forEach(function (t) {
      (0, _index.default)(t, world);
    });
    return terms;
  });
  return input;
};
var _default = exports.default = parse;
},{"../compute/normal/index.js":"node_modules/compromise/src/1-one/tokenize/compute/normal/index.js"}],"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/is-sentence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isAcronym = /[ .][A-Z]\.? *$/i; //asci - 'n.s.a.'
var hasEllipse = /(?:\u2026|\.{2,}) *$/; // '...'
var hasLetter = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])/;
var hasPeriod = /\. *$/;
var leadInit = /^[A-Z]\. $/; // "W. Kensington"

/** does this look like a sentence? */
var isSentence = function isSentence(str, abbrevs) {
  // must have a letter
  if (hasLetter.test(str) === false) {
    return false;
  }
  // check for 'F.B.I.'
  if (isAcronym.test(str) === true) {
    return false;
  }
  // check for leading initial - "W. Kensington"
  if (str.length === 3 && leadInit.test(str)) {
    return false;
  }
  //check for '...'
  if (hasEllipse.test(str) === true) {
    return false;
  }
  var txt = str.replace(/[.!?\u203D\u2E18\u203C\u2047-\u2049] *$/, '');
  var words = txt.split(' ');
  var lastWord = words[words.length - 1].toLowerCase();
  // check for 'Mr.' (and not mr?)
  if (abbrevs.hasOwnProperty(lastWord) === true && hasPeriod.test(str) === true) {
    return false;
  }
  // //check for jeopardy!
  // if (blacklist.hasOwnProperty(lastWord)) {
  //   return false
  // }
  return true;
};
var _default = exports.default = isSentence;
},{}],"node_modules/compromise/src/1-one/tokenize/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./01-sentences/index.js"));
var _index2 = _interopRequireDefault(require("./02-terms/index.js"));
var _index3 = _interopRequireDefault(require("./03-whitespace/index.js"));
var _unicode = _interopRequireDefault(require("./unicode.js"));
var _parse = _interopRequireDefault(require("./parse.js"));
var _isSentence = _interopRequireDefault(require("./01-sentences/is-sentence.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  one: {
    killUnicode: _unicode.default,
    tokenize: {
      splitSentences: _index.default,
      isSentence: _isSentence.default,
      splitTerms: _index2.default,
      splitWhitespace: _index3.default,
      fromString: _parse.default
    }
  }
};
},{"./01-sentences/index.js":"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/index.js","./02-terms/index.js":"node_modules/compromise/src/1-one/tokenize/methods/02-terms/index.js","./03-whitespace/index.js":"node_modules/compromise/src/1-one/tokenize/methods/03-whitespace/index.js","./unicode.js":"node_modules/compromise/src/1-one/tokenize/methods/unicode.js","./parse.js":"node_modules/compromise/src/1-one/tokenize/methods/parse.js","./01-sentences/is-sentence.js":"node_modules/compromise/src/1-one/tokenize/methods/01-sentences/is-sentence.js"}],"node_modules/compromise/src/1-one/tokenize/model/aliases.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var aliases = {
  '&': 'and',
  '@': 'at',
  '%': 'percent',
  'plz': 'please',
  'bein': 'being'
};
var _default = exports.default = aliases;
},{}],"node_modules/compromise/src/1-one/tokenize/model/abbreviations/misc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = ['approx', 'apt', 'bc', 'cyn', 'eg', 'esp', 'est', 'etc', 'ex', 'exp', 'prob',
//probably
'pron',
// Pronunciation
'gal',
//gallon
'min', 'pseud', 'fig',
//figure
'jd', 'lat',
//latitude
'lng',
//longitude
'vol',
//volume
'fm',
//not am
'def',
//definition
'misc', 'plz',
//please
'ea',
//each
'ps', 'sec',
//second
'pt', 'pref',
//preface
'pl',
//plural
'pp',
//pages
'qt',
//quarter
'fr',
//french
'sq', 'nee',
//given name at birth
'ss',
//ship, or sections
'tel', 'temp', 'vet', 'ver',
//version
'fem',
//feminine
'masc',
//masculine
'eng',
//engineering/english
'adj',
//adjective
'vb',
//verb
'rb',
//adverb
'inf',
//infinitive
'situ',
// in situ
'vivo', 'vitro', 'wr' //world record
];
},{}],"node_modules/compromise/src/1-one/tokenize/model/abbreviations/honorifics.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = ['adj', 'adm', 'adv', 'asst', 'atty', 'bldg', 'brig', 'capt', 'cmdr', 'comdr', 'cpl', 'det', 'dr', 'esq', 'gen', 'gov', 'hon', 'jr', 'llb', 'lt', 'maj', 'messrs', 'mlle', 'mme', 'mr', 'mrs', 'ms', 'mstr', 'phd', 'prof', 'pvt', 'rep', 'reps', 'res', 'rev', 'sen', 'sens', 'sfc', 'sgt', 'sir', 'sr', 'supt', 'surg'
//miss
//misses
];
},{}],"node_modules/compromise/src/1-one/tokenize/model/abbreviations/months.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = ['jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'sept', 'oct', 'nov', 'dec'];
},{}],"node_modules/compromise/src/1-one/tokenize/model/abbreviations/nouns.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = ['ad', 'al', 'arc', 'ba', 'bl', 'ca', 'cca', 'col', 'corp', 'ft', 'fy', 'ie', 'lit', 'ma', 'md', 'pd', 'tce'];
},{}],"node_modules/compromise/src/1-one/tokenize/model/abbreviations/organizations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = ['dept', 'univ', 'assn', 'bros', 'inc', 'ltd', 'co'];
},{}],"node_modules/compromise/src/1-one/tokenize/model/abbreviations/places.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = ['rd', 'st', 'dist', 'mt', 'ave', 'blvd', 'cl',
// 'ct',
'cres', 'hwy',
//states
'ariz', 'cal', 'calif', 'colo', 'conn', 'fla', 'fl', 'ga', 'ida', 'ia', 'kan', 'kans', 'minn', 'neb', 'nebr', 'okla', 'penna', 'penn', 'pa', 'dak', 'tenn', 'tex', 'ut', 'vt', 'va', 'wis', 'wisc', 'wy', 'wyo', 'usafa', 'alta', 'ont', 'que', 'sask'];
},{}],"node_modules/compromise/src/1-one/tokenize/model/abbreviations/units.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// units that are abbreviations too
var _default = exports.default = ['dl', 'ml', 'gal',
// 'ft', //ambiguous
'qt', 'pt', 'tbl', 'tsp', 'tbsp', 'km', 'dm',
//decimeter
'cm', 'mm', 'mi', 'td', 'hr',
//hour
'hrs',
//hour
'kg', 'hg', 'dg',
//decigram
'cg',
//centigram
'mg',
//milligram
'µg',
//microgram
'lb',
//pound
'oz',
//ounce
'sq ft', 'hz',
//hertz
'mps',
//meters per second
'mph', 'kmph',
//kilometers per hour
'kb',
//kilobyte
'mb',
//megabyte
// 'gb', //ambig
'tb',
//terabyte
'lx',
//lux
'lm',
//lumen
// 'pa', //ambig
'fl oz',
//
'yb'];
},{}],"node_modules/compromise/src/1-one/tokenize/model/lexicon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lexicon = exports.abbreviations = void 0;
var _misc = _interopRequireDefault(require("./abbreviations/misc.js"));
var _honorifics = _interopRequireDefault(require("./abbreviations/honorifics.js"));
var _months = _interopRequireDefault(require("./abbreviations/months.js"));
var _nouns = _interopRequireDefault(require("./abbreviations/nouns.js"));
var _organizations = _interopRequireDefault(require("./abbreviations/organizations.js"));
var _places = _interopRequireDefault(require("./abbreviations/places.js"));
var _units = _interopRequireDefault(require("./abbreviations/units.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// add our abbreviation list to our lexicon
var list = [[_misc.default], [_units.default, 'Unit'], [_nouns.default, 'Noun'], [_honorifics.default, 'Honorific'], [_months.default, 'Month'], [_organizations.default, 'Organization'], [_places.default, 'Place']];
// create key-val for sentence-tokenizer
var abbreviations = exports.abbreviations = {};
// add them to a future lexicon
var lexicon = exports.lexicon = {};
list.forEach(function (a) {
  a[0].forEach(function (w) {
    // sentence abbrevs
    abbreviations[w] = true;
    // future-lexicon
    lexicon[w] = 'Abbreviation';
    if (a[1] !== undefined) {
      lexicon[w] = [lexicon[w], a[1]];
    }
  });
});
},{"./abbreviations/misc.js":"node_modules/compromise/src/1-one/tokenize/model/abbreviations/misc.js","./abbreviations/honorifics.js":"node_modules/compromise/src/1-one/tokenize/model/abbreviations/honorifics.js","./abbreviations/months.js":"node_modules/compromise/src/1-one/tokenize/model/abbreviations/months.js","./abbreviations/nouns.js":"node_modules/compromise/src/1-one/tokenize/model/abbreviations/nouns.js","./abbreviations/organizations.js":"node_modules/compromise/src/1-one/tokenize/model/abbreviations/organizations.js","./abbreviations/places.js":"node_modules/compromise/src/1-one/tokenize/model/abbreviations/places.js","./abbreviations/units.js":"node_modules/compromise/src/1-one/tokenize/model/abbreviations/units.js"}],"node_modules/compromise/src/1-one/tokenize/model/prefixes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// dashed prefixes that are not independent words
//  'mid-century', 'pre-history'
var _default = exports.default = ['anti', 'bi', 'co', 'contra', 'de', 'extra', 'infra', 'inter', 'intra', 'macro', 'micro', 'mis', 'mono', 'multi', 'peri', 'pre', 'pro', 'proto', 'pseudo', 're', 'sub', 'supra', 'trans', 'tri', 'un', 'out',
//out-lived
'ex' //ex-wife

// 'counter',
// 'mid',
// 'out',
// 'non',
// 'over',
// 'post',
// 'semi',
// 'super', //'super-cool'
// 'ultra', //'ulta-cool'
// 'under',
// 'whole',
].reduce(function (h, str) {
  h[str] = true;
  return h;
}, {});
},{}],"node_modules/compromise/src/1-one/tokenize/model/suffixes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// dashed suffixes that are not independent words
//  'flower-like', 'president-elect'
var _default = exports.default = {
  'like': true,
  'ish': true,
  'less': true,
  'able': true,
  'elect': true,
  'type': true,
  'designate': true
  // 'fold':true,
};
},{}],"node_modules/compromise/src/1-one/tokenize/model/unicode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//a hugely-ignorant, and widely subjective transliteration of latin, cryllic, greek unicode characters to english ascii.
//approximate visual (not semantic or phonetic) relationship between unicode and ascii characters
//http://en.wikipedia.org/wiki/List_of_Unicode_characters
//https://docs.google.com/spreadsheet/ccc?key=0Ah46z755j7cVdFRDM1A2YVpwa1ZYWlpJM2pQZ003M0E
var compact = {
  '!': '¡',
  '?': '¿Ɂ',
  '"': '“”"❝❞',
  "'": '‘‛❛❜’',
  '-': '—–',
  a: 'ªÀÁÂÃÄÅàáâãäåĀāĂăĄąǍǎǞǟǠǡǺǻȀȁȂȃȦȧȺΆΑΔΛάαλАаѦѧӐӑӒӓƛæ',
  b: 'ßþƀƁƂƃƄƅɃΒβϐϦБВЪЬвъьѢѣҌҍ',
  c: '¢©ÇçĆćĈĉĊċČčƆƇƈȻȼͻͼϲϹϽϾСсєҀҁҪҫ',
  d: 'ÐĎďĐđƉƊȡƋƌ',
  e: 'ÈÉÊËèéêëĒēĔĕĖėĘęĚěƐȄȅȆȇȨȩɆɇΈΕΞΣέεξϵЀЁЕеѐёҼҽҾҿӖӗễ',
  f: 'ƑƒϜϝӺӻҒғſ',
  g: 'ĜĝĞğĠġĢģƓǤǥǦǧǴǵ',
  h: 'ĤĥĦħƕǶȞȟΉΗЂЊЋНнђћҢңҤҥҺһӉӊ',
  I: 'ÌÍÎÏ',
  i: 'ìíîïĨĩĪīĬĭĮįİıƖƗȈȉȊȋΊΐΪίιϊІЇіїi̇',
  j: 'ĴĵǰȷɈɉϳЈј',
  k: 'ĶķĸƘƙǨǩΚκЌЖКжкќҚқҜҝҞҟҠҡ',
  l: 'ĹĺĻļĽľĿŀŁłƚƪǀǏǐȴȽΙӀӏ',
  m: 'ΜϺϻМмӍӎ',
  n: 'ÑñŃńŅņŇňŉŊŋƝƞǸǹȠȵΝΠήηϞЍИЙЛПийлпѝҊҋӅӆӢӣӤӥπ',
  o: 'ÒÓÔÕÖØðòóôõöøŌōŎŏŐőƟƠơǑǒǪǫǬǭǾǿȌȍȎȏȪȫȬȭȮȯȰȱΌΘΟθοσόϕϘϙϬϴОФоѲѳӦӧӨөӪӫ',
  p: 'ƤΡρϷϸϼРрҎҏÞ',
  q: 'Ɋɋ',
  r: 'ŔŕŖŗŘřƦȐȑȒȓɌɍЃГЯгяѓҐґ',
  s: 'ŚśŜŝŞşŠšƧƨȘșȿЅѕ',
  t: 'ŢţŤťŦŧƫƬƭƮȚțȶȾΓΤτϮТт',
  u: 'ÙÚÛÜùúûüŨũŪūŬŭŮůŰűŲųƯưƱƲǓǔǕǖǗǘǙǚǛǜȔȕȖȗɄΰυϋύ',
  v: 'νѴѵѶѷ',
  w: 'ŴŵƜωώϖϢϣШЩшщѡѿ',
  x: '×ΧχϗϰХхҲҳӼӽӾӿ',
  y: 'ÝýÿŶŷŸƳƴȲȳɎɏΎΥΫγψϒϓϔЎУучўѰѱҮүҰұӮӯӰӱӲӳ',
  z: 'ŹźŻżŽžƵƶȤȥɀΖ'
};
//decompress data into two hashes
var unicode = {};
Object.keys(compact).forEach(function (k) {
  compact[k].split('').forEach(function (s) {
    unicode[s] = k;
  });
});
var _default = exports.default = unicode;
},{}],"node_modules/compromise/src/1-one/tokenize/model/punctuation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prePunctuation = exports.postPunctuation = exports.emoticons = void 0;
// https://util.unicode.org/UnicodeJsps/list-unicodeset.jsp?a=%5Cp%7Bpunctuation%7D

// punctuation to keep at start of word
var prePunctuation = exports.prePunctuation = {
  '#': true,
  //#hastag
  '@': true,
  //@atmention
  '_': true,
  //underscore
  '°': true,
  // '+': true,//+4
  // '\\-',//-4  (escape)
  // '.',//.4
  // zero-width chars
  "\u200B": true,
  "\u200C": true,
  "\u200D": true,
  "\uFEFF": true
};

// punctuation to keep at end of word
var postPunctuation = exports.postPunctuation = {
  '%': true,
  //88%
  '_': true,
  //underscore
  '°': true,
  //degrees, italian ordinal
  // '\'',// sometimes
  // zero-width chars
  "\u200B": true,
  "\u200C": true,
  "\u200D": true,
  "\uFEFF": true
};
var emoticons = exports.emoticons = {
  '<3': true,
  '</3': true,
  '<\\3': true,
  ':^P': true,
  ':^p': true,
  ':^O': true,
  ':^3': true
};
},{}],"node_modules/compromise/src/1-one/tokenize/model/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _aliases = _interopRequireDefault(require("./aliases.js"));
var _lexicon = require("./lexicon.js");
var _prefixes = _interopRequireDefault(require("./prefixes.js"));
var _suffixes = _interopRequireDefault(require("./suffixes.js"));
var _unicode = _interopRequireDefault(require("./unicode.js"));
var _punctuation = require("./punctuation.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  one: {
    aliases: _aliases.default,
    abbreviations: _lexicon.abbreviations,
    prefixes: _prefixes.default,
    suffixes: _suffixes.default,
    prePunctuation: _punctuation.prePunctuation,
    postPunctuation: _punctuation.postPunctuation,
    lexicon: _lexicon.lexicon,
    //give this one forward
    unicode: _unicode.default,
    emoticons: _punctuation.emoticons
  }
};
},{"./aliases.js":"node_modules/compromise/src/1-one/tokenize/model/aliases.js","./lexicon.js":"node_modules/compromise/src/1-one/tokenize/model/lexicon.js","./prefixes.js":"node_modules/compromise/src/1-one/tokenize/model/prefixes.js","./suffixes.js":"node_modules/compromise/src/1-one/tokenize/model/suffixes.js","./unicode.js":"node_modules/compromise/src/1-one/tokenize/model/unicode.js","./punctuation.js":"node_modules/compromise/src/1-one/tokenize/model/punctuation.js"}],"node_modules/compromise/src/1-one/tokenize/compute/alias.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasSlash = /\//;
var hasDomain = /[a-z]\.[a-z]/i;
var isMath = /[0-9]/;
// const hasSlash = /[a-z\u00C0-\u00FF] ?\/ ?[a-z\u00C0-\u00FF]/
// const hasApostrophe = /['’]s$/

var addAliases = function addAliases(term, world) {
  var str = term.normal || term.text || term.machine;
  var aliases = world.model.one.aliases;
  // lookup known aliases like '&'
  if (aliases.hasOwnProperty(str)) {
    term.alias = term.alias || [];
    term.alias.push(aliases[str]);
  }
  // support slashes as aliases
  if (hasSlash.test(str) && !hasDomain.test(str) && !isMath.test(str)) {
    var arr = str.split(hasSlash);
    // don't split urls and things
    if (arr.length <= 3) {
      arr.forEach(function (word) {
        word = word.trim();
        if (word !== '') {
          term.alias = term.alias || [];
          term.alias.push(word);
        }
      });
    }
  }
  // aliases for apostrophe-s
  // if (hasApostrophe.test(str)) {
  //   let main = str.replace(hasApostrophe, '').trim()
  //   term.alias = term.alias || []
  //   term.alias.push(main)
  // }
  return term;
};
var _default = exports.default = addAliases;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/machine.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasDash = /^(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])+-(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])+$/;
// 'machine' is a normalized form that looses human-readability
var doMachine = function doMachine(term) {
  var str = term.implicit || term.normal || term.text;
  // remove apostrophes
  str = str.replace(/['’]s$/, '');
  str = str.replace(/s['’]$/, 's');
  //lookin'->looking (make it easier for conjugation)
  str = str.replace(/([aeiou][ktrp])in'$/, '$1ing');
  //turn re-enactment to reenactment
  if (hasDash.test(str)) {
    str = str.replace(/-/g, '');
  }
  //#tags, @mentions
  str = str.replace(/^[#@]/, '');
  if (str !== term.normal) {
    term.machine = str;
  }
};
var _default = exports.default = doMachine;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/freq.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// sort words by frequency
var freq = function freq(view) {
  var docs = view.docs;
  var counts = {};
  for (var i = 0; i < docs.length; i += 1) {
    for (var t = 0; t < docs[i].length; t += 1) {
      var term = docs[i][t];
      var word = term.machine || term.normal;
      counts[word] = counts[word] || 0;
      counts[word] += 1;
    }
  }
  // add counts on each term
  for (var _i = 0; _i < docs.length; _i += 1) {
    for (var _t = 0; _t < docs[_i].length; _t += 1) {
      var _term = docs[_i][_t];
      var _word = _term.machine || _term.normal;
      _term.freq = counts[_word];
    }
  }
};
var _default = exports.default = freq;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/offset.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// get all character startings in doc
var offset = function offset(view) {
  var elapsed = 0;
  var index = 0;
  var docs = view.document; //start from the actual-top
  for (var i = 0; i < docs.length; i += 1) {
    for (var t = 0; t < docs[i].length; t += 1) {
      var term = docs[i][t];
      term.offset = {
        index: index,
        start: elapsed + term.pre.length,
        length: term.text.length
      };
      elapsed += term.pre.length + term.text.length + term.post.length;
      index += 1;
    }
  }
};
var _default = exports.default = offset;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/reindex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// cheat- add the document's pointer to the terms
var index = function index(view) {
  // console.log('reindex')
  var document = view.document;
  for (var n = 0; n < document.length; n += 1) {
    for (var i = 0; i < document[n].length; i += 1) {
      document[n][i].index = [n, i];
    }
  }
  // let ptrs = b.fullPointer
  // console.log(ptrs)
  // for (let i = 0; i < docs.length; i += 1) {
  //   const [n, start] = ptrs[i]
  //   for (let t = 0; t < docs[i].length; t += 1) {
  //     let term = docs[i][t]
  //     term.index = [n, start + t]
  //   }
  // }
};
var _default = exports.default = index;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/wordCount.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var wordCount = function wordCount(view) {
  var n = 0;
  var docs = view.docs;
  for (var i = 0; i < docs.length; i += 1) {
    for (var t = 0; t < docs[i].length; t += 1) {
      if (docs[i][t].normal === '') {
        continue; //skip implicit words
      }
      n += 1;
      docs[i][t].wordCount = n;
    }
  }
};
var _default = exports.default = wordCount;
},{}],"node_modules/compromise/src/1-one/tokenize/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _alias2 = _interopRequireDefault(require("./alias.js"));
var _index = _interopRequireDefault(require("./normal/index.js"));
var _machine2 = _interopRequireDefault(require("./machine.js"));
var _freq = _interopRequireDefault(require("./freq.js"));
var _offset = _interopRequireDefault(require("./offset.js"));
var _reindex = _interopRequireDefault(require("./reindex.js"));
var _wordCount = _interopRequireDefault(require("./wordCount.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// cheat-method for a quick loop
var termLoop = function termLoop(view, fn) {
  var docs = view.docs;
  for (var i = 0; i < docs.length; i += 1) {
    for (var t = 0; t < docs[i].length; t += 1) {
      fn(docs[i][t], view.world);
    }
  }
};
var methods = {
  alias: function alias(view) {
    return termLoop(view, _alias2.default);
  },
  machine: function machine(view) {
    return termLoop(view, _machine2.default);
  },
  normal: function normal(view) {
    return termLoop(view, _index.default);
  },
  freq: _freq.default,
  offset: _offset.default,
  index: _reindex.default,
  wordCount: _wordCount.default
};
var _default = exports.default = methods;
},{"./alias.js":"node_modules/compromise/src/1-one/tokenize/compute/alias.js","./normal/index.js":"node_modules/compromise/src/1-one/tokenize/compute/normal/index.js","./machine.js":"node_modules/compromise/src/1-one/tokenize/compute/machine.js","./freq.js":"node_modules/compromise/src/1-one/tokenize/compute/freq.js","./offset.js":"node_modules/compromise/src/1-one/tokenize/compute/offset.js","./reindex.js":"node_modules/compromise/src/1-one/tokenize/compute/reindex.js","./wordCount.js":"node_modules/compromise/src/1-one/tokenize/compute/wordCount.js"}],"node_modules/compromise/src/1-one/tokenize/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./methods/index.js"));
var _index2 = _interopRequireDefault(require("./model/index.js"));
var _index3 = _interopRequireDefault(require("./compute/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  compute: _index3.default,
  methods: _index.default,
  model: _index2.default,
  hooks: ['alias', 'machine', 'index', 'id']
}; // const plugin = function (world) {
//   let { methods, model, parsers } = world
//   Object.assign({}, methods, _methods)
//   Object.assign(model, _model)
//   methods.one.tokenize.fromString = tokenize
//   parsers.push('normal')
//   parsers.push('alias')
//   parsers.push('machine')
//   // extend View class
//   // addMethods(View)
// }
// export default plugin
},{"./methods/index.js":"node_modules/compromise/src/1-one/tokenize/methods/index.js","./model/index.js":"node_modules/compromise/src/1-one/tokenize/model/index.js","./compute/index.js":"node_modules/compromise/src/1-one/tokenize/compute/index.js"}],"node_modules/compromise/src/1-one/typeahead/compute.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// lookup last word in the type-ahead prefixes
var typeahead = function typeahead(view) {
  var prefixes = view.model.one.typeahead;
  var docs = view.docs;
  if (docs.length === 0 || Object.keys(prefixes).length === 0) {
    return;
  }
  var lastPhrase = docs[docs.length - 1] || [];
  var lastTerm = lastPhrase[lastPhrase.length - 1];
  // if we've already put whitespace, end.
  if (lastTerm.post) {
    return;
  }
  // if we found something
  if (prefixes.hasOwnProperty(lastTerm.normal)) {
    var found = prefixes[lastTerm.normal];
    // add full-word as an implicit result
    lastTerm.implicit = found;
    lastTerm.machine = found;
    lastTerm.typeahead = true;
    // tag it, as our assumed term
    if (view.compute.preTagger) {
      view.last().unTag('*').compute(['lexicon', 'preTagger']);
    }
  }
};
var _default = exports.default = {
  typeahead: typeahead
};
},{}],"node_modules/compromise/src/1-one/typeahead/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// assume any discovered prefixes
var autoFill = function autoFill() {
  var docs = this.docs;
  if (docs.length === 0) {
    return this;
  }
  var lastPhrase = docs[docs.length - 1] || [];
  var term = lastPhrase[lastPhrase.length - 1];
  if (term.typeahead === true && term.machine) {
    term.text = term.machine;
    term.normal = term.machine;
  }
  return this;
};
var api = function api(View) {
  View.prototype.autoFill = autoFill;
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/1-one/typeahead/lib/allPrefixes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// generate all the possible prefixes up-front
var getPrefixes = function getPrefixes(arr, opts, world) {
  var index = {};
  var collisions = [];
  var existing = world.prefixes || {};
  arr.forEach(function (str) {
    str = str.toLowerCase().trim();
    var max = str.length;
    if (opts.max && max > opts.max) {
      max = opts.max;
    }
    for (var size = opts.min; size < max; size += 1) {
      var prefix = str.substring(0, size);
      // ensure prefix is not a word
      if (opts.safe && world.model.one.lexicon.hasOwnProperty(prefix)) {
        continue;
      }
      // does it already exist?
      if (existing.hasOwnProperty(prefix) === true) {
        collisions.push(prefix);
        continue;
      }
      if (index.hasOwnProperty(prefix) === true) {
        collisions.push(prefix);
        continue;
      }
      index[prefix] = str;
    }
  });
  // merge with existing prefixes
  index = Object.assign({}, existing, index);
  // remove ambiguous-prefixes
  collisions.forEach(function (str) {
    delete index[str];
  });
  return index;
};
var _default = exports.default = getPrefixes;
},{}],"node_modules/compromise/src/1-one/typeahead/lib/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _allPrefixes = _interopRequireDefault(require("./allPrefixes.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var isObject = function isObject(val) {
  return Object.prototype.toString.call(val) === '[object Object]';
};
var defaults = {
  safe: true,
  min: 3
};
var prepare = function prepare() {
  var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var model = this.model();
  opts = Object.assign({}, defaults, opts);
  if (isObject(words)) {
    Object.assign(model.one.lexicon, words);
    words = Object.keys(words);
  }
  var prefixes = (0, _allPrefixes.default)(words, opts, this.world());
  // manually combine these with any existing prefixes
  Object.keys(prefixes).forEach(function (str) {
    // explode any overlaps
    if (model.one.typeahead.hasOwnProperty(str)) {
      delete model.one.typeahead[str];
      return;
    }
    model.one.typeahead[str] = prefixes[str];
  });
  return this;
};
var _default = exports.default = {
  typeahead: prepare
};
},{"./allPrefixes.js":"node_modules/compromise/src/1-one/typeahead/lib/allPrefixes.js"}],"node_modules/compromise/src/1-one/typeahead/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _compute = _interopRequireDefault(require("./compute.js"));
var _api = _interopRequireDefault(require("./api.js"));
var _index = _interopRequireDefault(require("./lib/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var model = {
  one: {
    typeahead: {} //set a blank key-val
  }
};
var _default = exports.default = {
  model: model,
  api: _api.default,
  lib: _index.default,
  compute: _compute.default,
  hooks: ['typeahead']
};
},{"./compute.js":"node_modules/compromise/src/1-one/typeahead/compute.js","./api.js":"node_modules/compromise/src/1-one/typeahead/api.js","./lib/index.js":"node_modules/compromise/src/1-one/typeahead/lib/index.js"}],"node_modules/compromise/src/one.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _nlp = _interopRequireDefault(require("./nlp.js"));
var _plugin = _interopRequireDefault(require("./1-one/cache/plugin.js"));
var _plugin2 = _interopRequireDefault(require("./1-one/change/plugin.js"));
var _plugin3 = _interopRequireDefault(require("./1-one/contraction-one/plugin.js"));
var _plugin4 = _interopRequireDefault(require("./1-one/freeze/plugin.js"));
var _plugin5 = _interopRequireDefault(require("./1-one/lexicon/plugin.js"));
var _plugin6 = _interopRequireDefault(require("./1-one/lookup/plugin.js"));
var _plugin7 = _interopRequireDefault(require("./1-one/match/plugin.js"));
var _plugin8 = _interopRequireDefault(require("./1-one/output/plugin.js"));
var _plugin9 = _interopRequireDefault(require("./1-one/pointers/plugin.js"));
var _plugin10 = _interopRequireDefault(require("./1-one/sweep/plugin.js"));
var _plugin11 = _interopRequireDefault(require("./1-one/tag/plugin.js"));
var _plugin12 = _interopRequireDefault(require("./1-one/tokenize/plugin.js"));
var _plugin13 = _interopRequireDefault(require("./1-one/typeahead/plugin.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 5kb

// order here matters
_nlp.default.extend(_plugin2.default); //0kb
_nlp.default.extend(_plugin8.default); //0kb
_nlp.default.extend(_plugin7.default); //10kb
_nlp.default.extend(_plugin9.default); //2kb
_nlp.default.extend(_plugin11.default); //2kb
_nlp.default.plugin(_plugin3.default); //~6kb
_nlp.default.extend(_plugin12.default); //7kb
_nlp.default.extend(_plugin4.default); //
_nlp.default.plugin(_plugin.default); //~1kb
_nlp.default.extend(_plugin6.default); //7kb
_nlp.default.extend(_plugin13.default); //1kb
_nlp.default.extend(_plugin5.default); //1kb
_nlp.default.extend(_plugin10.default); //1kb
var _default = exports.default = _nlp.default; // 40kb
},{"./nlp.js":"node_modules/compromise/src/nlp.js","./1-one/cache/plugin.js":"node_modules/compromise/src/1-one/cache/plugin.js","./1-one/change/plugin.js":"node_modules/compromise/src/1-one/change/plugin.js","./1-one/contraction-one/plugin.js":"node_modules/compromise/src/1-one/contraction-one/plugin.js","./1-one/freeze/plugin.js":"node_modules/compromise/src/1-one/freeze/plugin.js","./1-one/lexicon/plugin.js":"node_modules/compromise/src/1-one/lexicon/plugin.js","./1-one/lookup/plugin.js":"node_modules/compromise/src/1-one/lookup/plugin.js","./1-one/match/plugin.js":"node_modules/compromise/src/1-one/match/plugin.js","./1-one/output/plugin.js":"node_modules/compromise/src/1-one/output/plugin.js","./1-one/pointers/plugin.js":"node_modules/compromise/src/1-one/pointers/plugin.js","./1-one/sweep/plugin.js":"node_modules/compromise/src/1-one/sweep/plugin.js","./1-one/tag/plugin.js":"node_modules/compromise/src/1-one/tag/plugin.js","./1-one/tokenize/plugin.js":"node_modules/compromise/src/1-one/tokenize/plugin.js","./1-one/typeahead/plugin.js":"node_modules/compromise/src/1-one/typeahead/plugin.js"}],"node_modules/compromise/src/2-two/preTagger/model/irregulars/plurals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//nouns with irregular plural/singular forms
//used in nouns.toPlural(), and also in the lexicon.
var _default = exports.default = {
  // -a
  addendum: 'addenda',
  corpus: 'corpora',
  criterion: 'criteria',
  curriculum: 'curricula',
  genus: 'genera',
  memorandum: 'memoranda',
  opus: 'opera',
  ovum: 'ova',
  phenomenon: 'phenomena',
  referendum: 'referenda',
  // -ae
  alga: 'algae',
  alumna: 'alumnae',
  antenna: 'antennae',
  formula: 'formulae',
  larva: 'larvae',
  nebula: 'nebulae',
  vertebra: 'vertebrae',
  // -is
  analysis: 'analyses',
  axis: 'axes',
  diagnosis: 'diagnoses',
  parenthesis: 'parentheses',
  prognosis: 'prognoses',
  synopsis: 'synopses',
  thesis: 'theses',
  neurosis: 'neuroses',
  // -x
  appendix: 'appendices',
  index: 'indices',
  matrix: 'matrices',
  ox: 'oxen',
  sex: 'sexes',
  // -i
  alumnus: 'alumni',
  bacillus: 'bacilli',
  cactus: 'cacti',
  fungus: 'fungi',
  hippopotamus: 'hippopotami',
  libretto: 'libretti',
  modulus: 'moduli',
  nucleus: 'nuclei',
  octopus: 'octopi',
  radius: 'radii',
  stimulus: 'stimuli',
  syllabus: 'syllabi',
  // -ie
  cookie: 'cookies',
  calorie: 'calories',
  auntie: 'aunties',
  movie: 'movies',
  pie: 'pies',
  rookie: 'rookies',
  tie: 'ties',
  zombie: 'zombies',
  // -f
  leaf: 'leaves',
  loaf: 'loaves',
  thief: 'thieves',
  // ee-
  foot: 'feet',
  goose: 'geese',
  tooth: 'teeth',
  // -eaux
  beau: 'beaux',
  chateau: 'chateaux',
  tableau: 'tableaux',
  // -ses
  bus: 'buses',
  gas: 'gases',
  circus: 'circuses',
  crisis: 'crises',
  virus: 'viruses',
  database: 'databases',
  excuse: 'excuses',
  abuse: 'abuses',
  avocado: 'avocados',
  barracks: 'barracks',
  child: 'children',
  clothes: 'clothes',
  echo: 'echoes',
  embargo: 'embargoes',
  epoch: 'epochs',
  deer: 'deer',
  halo: 'halos',
  man: 'men',
  woman: 'women',
  mosquito: 'mosquitoes',
  mouse: 'mice',
  person: 'people',
  quiz: 'quizzes',
  rodeo: 'rodeos',
  shoe: 'shoes',
  sombrero: 'sombreros',
  stomach: 'stomachs',
  tornado: 'tornados',
  tuxedo: 'tuxedos',
  volcano: 'volcanoes'
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/lexicon/_data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// generated in ./lib/lexicon
var _default = exports.default = {
  "Comparative": "true¦bett1f0;arth0ew0in0;er",
  "Superlative": "true¦earlier",
  "PresentTense": "true¦bests,sounds",
  "Condition": "true¦lest,unless",
  "PastTense": "true¦began,came,d4had,kneel3l2m0sa4we1;ea0sg2;nt;eap0i0;ed;id",
  "Participle": "true¦0:09;a06b01cZdXeat0fSgQhPoJprov0rHs7t6u4w1;ak0ithdra02o2r1;i02uY;k0v0;nd1pr04;ergoJoJ;ak0hHo3;e9h7lain,o6p5t4un3w1;o1um;rn;g,k;ol0reS;iQok0;ught,wn;ak0o1runk;ne,wn;en,wn;ewriNi1uJ;dd0s0;ut3ver1;do4se0t1;ak0h2;do2g1;roG;ne;ast0i7;iv0o1;ne,tt0;all0loBor1;bi3g2s1;ak0e0;iv0o9;dd0;ove,r1;a5eamt,iv0;hos0lu1;ng;e4i3lo2ui1;lt;wn;tt0;at0en,gun;r2w1;ak0ok0;is0;en",
  "Gerund": "true¦accord0be0doin,go0result0stain0;ing",
  "Expression": "true¦a0Yb0Uc0Sd0Oe0Mfarew0Lg0FhZjeez,lWmVnToOpLsJtIuFvEw7y0;a5e3i1u0;ck,p;k04p0;ee,pee;a0p,s;!h;!a,h,y;a5h2o1t0;af,f;rd up,w;atsoever,e1o0;a,ops;e,w;hoo,t;ery w06oi0L;gh,h0;! 0h,m;huh,oh;here nPsk,ut tut;h0ic;eesh,hh,it,oo;ff,h1l0ow,sst;ease,s,z;ew,ooey;h1i,mg,o0uch,w,y;h,o,ps;! 0h;hTmy go0wT;d,sh;a7evertheless,o0;!pe;eh,mm;ah,eh,m1ol0;!s;ao,fao;aCeBi9o2u0;h,mph,rra0zzC;h,y;l1o0;r6y9;la,y0;! 0;c1moCsmok0;es;ow;!p hip hoor0;ay;ck,e,llo,y;ha1i,lleluj0;ah;!ha;ah,ee4o1r0;eat scott,r;l1od0sh; grief,bye;ly;! whiz;ell;e0h,t cetera,ureka,ww,xcuse me;k,p;'oh,a0rat,uh;m0ng;mit,n0;!it;mon,o0;ngratulations,wabunga;a2oo1r0tw,ye;avo,r;!ya;h,m; 1h0ka,las,men,rgh,ye;!a,em,h,oy;la",
  "Negative": "true¦n0;ever,o0;n,t",
  "QuestionWord": "true¦how3wh0;at,e1ich,o0y;!m,se;n,re; come,'s",
  "Reflexive": "true¦h4it5my5o1the0your2;ir1m1;ne3ur0;sel0;f,ves;er0im0;self",
  "Plural": "true¦dick0gre0ones,records;ens",
  "Unit|Noun": "true¦cEfDgChBinchAk9lb,m6newt5oz,p4qt,t1y0;ardEd;able1b0ea1sp;!l,sp;spo1;a,t,x;on9;!b,g,i1l,m,p0;h,s;!les;!b,elvin,g,m;!es;g,z;al,b;eet,oot,t;m,up0;!s",
  "Value": "true¦a few",
  "Imperative": "true¦bewa0come he0;re",
  "Plural|Verb": "true¦leaves",
  "Demonym": "true¦0:15;1:12;a0Vb0Oc0Dd0Ce08f07g04h02iYjVkTlPmLnIomHpEqatari,rCs7t5u4v3welAz2;am0Gimbabwe0;enezuel0ietnam0I;gAkrai1;aiwTex0hai,rinida0Ju2;ni0Prkmen;a5cotti4e3ingapoOlovak,oma0Spaniard,udRw2y0W;ede,iss;negal0Cr09;sh;mo0uT;o5us0Jw2;and0;a2eru0Fhilippi0Nortugu07uerto r0S;kist3lesti1na2raguay0;ma1;ani;ami00i2orweP;caragu0geri2;an,en;a3ex0Lo2;ngo0Drocc0;cedo1la2;gasy,y07;a4eb9i2;b2thua1;e0Cy0;o,t01;azakh,eny0o2uwaiI;re0;a2orda1;ma0Ap2;anO;celandic,nd4r2sraeli,ta01vo05;a2iB;ni0qi;i0oneU;aiAin2ondur0unO;di;amEe2hanai0reek,uatemal0;or2rm0;gi0;ilipino,ren8;cuadoVgyp4mira3ngli2sto1thiopi0urope0;shm0;ti;ti0;aPominUut3;a9h6o4roat3ub0ze2;ch;!i0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el6o4r3ul2;gaE;azi9it;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;genti2me1;ne;ba1ge2;ri0;ni0;gh0r2;ic0;an",
  "Organization": "true¦0:4Q;a3Tb3Bc2Od2He2Df27g1Zh1Ti1Pj1Nk1Ll1Gm12n0Po0Mp0Cqu0Br02sTtHuCv9w3xiaomi,y1;amaha,m1Bou1w1B;gov,tu3C;a4e2iki1orld trade organizati33;leaRped0O;lls fargo,st1;fie2Hinghou2R;l1rner br3U;gree3Jl street journ2Im1E;an halOeriz2Xisa,o1;dafo2Yl1;kswagMvo;b4kip,n2ps,s1;a tod3Aps;es3Mi1;lev3Fted natio3C;er,s; mobi32aco beRd bOe9gi frida3Lh3im horto3Amz,o1witt3D;shi49y1;ota,s r 05;e 1in lizzy;b3carpen3Jdaily ma3Dguess w2holli0s1w2;mashing pumpki35uprem0;ho;ea1lack eyed pe3Xyr0Q;ch bo3Dtl0;l2n3Qs1xas instrumen1U;co,la m1F;efoni0Kus;a8cientology,e5ieme2Ymirnoff,np,o3pice gir6quare0Ata1ubaru;rbuc1to34;ks;ny,undgard1;en;a2x pisto1;ls;g1Wrs;few2Minsbur31lesfor03msu2E;adiohead,b8e4o1yana3C;man empi1Xyal 1;b1dutch she4;ank;a3d 1max,vl20;bu1c2Ahot chili peppe2Ylobst2N;ll;ders dige1Ll madrid;c,s;ant3Aizn2Q;a8bs,e5fiz2Ihilip4i3r1;emier 1udenti1D;leagTo2K;nk floyd,zza hut; morrBs;psi2tro1uge0E;br33chi0Tn33;!co;lant2Un1yp16; 2ason27da2P;ld navy,pec,range juli2xf1;am;us;aAb9e6fl,h5i4o1sa,vid3wa;k2tre dame,vart1;is;ia;ke,ntendo,ss0QvZ;l,s;c,st1Otflix,w1; 1sweek;kids on the block,york0D;a,c;nd22s2t1;ional aca2Po,we0U;a,c02d0S;aDcdonalCe9i6lb,o3tv,y1;spa1;ce;b1Tnsanto,ody blu0t1;ley cr1or0T;ue;c2t1;as,subisO;helin,rosoft;dica2rcedes benz,talli1;ca;id,re;ds;cs milk,tt19z24;a3e1g,ittle caesa1P; ore09novo,x1;is,mark,us; 1bour party;pres0Dz boy;atv,fc,kk,lm,m1od1O;art;iffy lu0Roy divisi0Jpmorgan1sa;! cha09;bm,hop,k3n1tv;g,te1;l,rpol;ea;a5ewlett pack1Vi3o1sbc,yundai;me dep1n1P;ot;tac1zbollah;hi;lliburt08sbro;eneral 6hq,ithub,l5mb,o2reen d0Ou1;cci,ns n ros0;ldman sachs,o1;dye1g0H;ar;axo smith kli04encoW;electr0Nm1;oto0Z;a5bi,c barcelo4da,edex,i2leetwood m03o1rito l0G;rd,xcY;at,fa,nancial1restoZ; tim0;na;cebook,nnie mae;b0Asa,u3xxon1; m1m1;ob0J;!rosceptics;aiml0De5isney,o4u1;nkin donu2po0Zran dur1;an;ts;j,w jon0;a,f lepp12ll,peche mode,r spieg02stiny's chi1;ld;aJbc,hFiDloudflaCnn,o3r1;aigsli5eedence clearwater reviv1ossra09;al;c7inba6l4m1o0Est09;ca2p1;aq;st;dplSg1;ate;se;a c1o chanQ;ola;re;a,sco1tigroup;! systems;ev2i1;ck fil a,na daily;r1y;on;d2pital o1rls jr;ne;bury,ill1;ac;aEbc,eBf9l5mw,ni,o1p,rexiteeU;ei3mbardiIston 1;glo1pizza;be;ng;o2ue c1;roV;ckbuster video,omingda1;le; g1g1;oodriL;cht2e ge0rkshire hathaw1;ay;el;cardi,idu,nana republ3s1xt5y5;f,kin robbi1;ns;ic;bYcTdidSerosmith,iRlKmEnheuser busDol,ppleAr6s4u3v2y1;er;is,on;di,todesk;hland o1sociated E;il;b3g2m1;co;os;ys; compu1be0;te1;rs;ch;c,d,erican3t1;!r1;ak; ex1;pre1;ss; 5catel2ta1;ir;! lu1;ce1;nt;jazeera,qae1;da;g,rbnb;as;/dc,a3er,tivision1;! blizz1;ard;demy of scienc0;es;ba",
  "Possessive": "true¦its,my,our0thy;!s",
  "Noun|Verb": "true¦0:9W;1:AA;2:96;3:A3;4:9R;5:A2;6:9K;7:8N;8:7L;9:A8;A:93;B:8D;C:8X;a9Ob8Qc7Id6Re6Gf5Sg5Hh55i4Xj4Uk4Rl4Em40n3Vo3Sp2Squ2Rr21s0Jt02u00vVwGyFzD;ip,oD;ne,om;awn,e6Fie68;aOeMhJiHoErD;ap,e9Oink2;nd0rDuC;kDry,sh5Hth;!shop;ck,nDpe,re,sh;!d,g;e86iD;p,sD;k,p0t2;aDed,lco8W;r,th0;it,lk,rEsDt4ve,x;h,te;!ehou1ra9;aGen5FiFoD;iDmAte,w;ce,d;be,ew,sA;cuum,l4B;pDr7;da5gra6Elo6A;aReQhrPiOoMrGuEwiDy5Z;n,st;nDrn;e,n7O;aGeFiEoDu6;t,ub2;bu5ck4Jgg0m,p;at,k,nd;ck,de,in,nsDp,v7J;f0i8R;ll,ne,p,r4Yss,t94uD;ch,r;ck,de,e,le,me,p,re;e5Wow,u6;ar,e,ll,mp0st,xt;g,lDng2rg7Ps5x;k,ly;a0Sc0Ne0Kh0Fi0Dk0Cl0Am08n06o05pXquaBtKuFwD;ea88iD;ng,pe,t4;bGit,m,ppErD;fa3ge,pri1v2U;lDo6S;e6Py;!je8;aMeLiKoHrEuDy2;dy,ff,mb2;a85eEiDo5Pugg2;ke,ng;am,ss,t4;ckEop,p,rD;e,m;ing,pi2;ck,nk,t4;er,m,p;ck,ff,ge,in,ke,lEmp,nd,p2rDte,y;!e,t;k,l;aJeIiHlGoFrDur,y;ay,e56inDu3;g,k2;ns8Bt;a5Qit;ll,n,r87te;ed,ll;m,n,rk;b,uC;aDee1Tow;ke,p;a5Je4FiDo53;le,rk;eep,iDou4;ce,p,t;ateboa7Ii;de,gnDl2Vnk,p,ze;!al;aGeFiEoDuff2;ck,p,re,w;ft,p,v0;d,i3Ylt0;ck,de,pe,re,ve;aEed,nDrv1It;se,t2N;l,r4t;aGhedu2oBrD;aEeDibb2o3Z;en,w;pe,t4;le,n,r2M;cDfegua72il,mp2;k,rifi3;aZeHhy6LiGoEuD;b,in,le,n,s5X;a6ck,ll,oDpe,u5;f,t;de,ng,ot,p,s1W;aTcSdo,el,fQgPje8lOmMnLo17pJque6sFturn,vDwa6V;eDi27;al,r1;er74oFpe8tEuD;lt,me;!a55;l71rt;air,eaDly,o53;l,t;dezvo2Zt;aDedy;ke,rk;ea1i4G;a6Iist0r5N;act6Yer1Vo71uD;nd,se;a38o6F;ch,s6G;c1Dge,iEke,lly,nDp1Wt1W;ge,k,t;n,se;es6Biv0;a04e00hYiXlToNrEsy4uD;mp,n4rcha1sh;aKeIiHoDu4O;be,ceFdu3fi2grDje8mi1p,te6;amDe6W;!me;ed,ss;ce,de,nt;sDy;er6Cs;cti3i1;iHlFoEp,re,sDuCw0;e,i5Yt;l,p;iDl;ce,sh;nt,s5V;aEce,e32uD;g,mp,n7;ce,nDy;!t;ck,le,n17pe,tNvot;a1oD;ne,tograph;ak,eFnErDt;fu55mA;!c32;!l,r;ckJiInHrFsEtDu1y;ch,e9;s,te;k,tD;!y;!ic;nt,r,se;!a7;bje8ff0il,oErDutli3Qver4B;bAd0ie9;ze;a4ReFoDur1;d,tD;e,i3;ed,gle8tD;!work;aMeKiIoEuD;rd0;ck,d3Rld,nEp,uDve;nt,th;it5EkD;ey;lk,n4Brr5CsDx;s,ta2B;asuBn4UrDss;ge,it;il,nFp,rk3WsEtD;ch,t0;h,k,t0;da5n0oeuvB;aLeJiHoEuD;mp,st;aEbby,ck,g,oDve;k,t;d,n;cDe,ft,mAnIst;en1k;aDc0Pe4vK;ch,d,k,p,se;bFcEnd,p,t4uD;gh,n4;e,k;el,o2U;eEiDno4E;ck,d,ll,ss;el,y;aEo1OuD;i3mp;m,zz;mpJnEr46ssD;ue;c1Rdex,fluGha2k,se2HteDvoi3;nt,rD;e6fa3viD;ew;en3;a8le2A;aJeHiGoEuD;g,nt;l3Ano2Dok,pDr1u1;!e;ghli1Fke,nt,re,t;aDd7lp;d,t;ck,mGndFrEsh,tDu9;ch,e;bo3Xm,ne4Eve6;!le;!m0;aMear,ift,lKossJrFuD;arDe4Alp,n;antee,d;aFiEoDumb2;uCwth;ll,nd,p;de,sp;ip;aBoDue;ss,w;g,in,me,ng,s,te,ze;aZeWiRlNoJrFuD;ck,el,nDss,zz;c38d;aEoDy;st,wn;cDgme,me,nchi1;tuB;cFg,il,ld,rD;ce,e29mDwa31;!at;us;aFe0Vip,oDy;at,ck,od,wD;!er;g,ke,me,re,sh,vo1E;eGgFlEnDre,sh,t,x;an3i0Q;e,m,t0;ht,uB;ld;aEeDn3;d,l;r,tuB;ce,il,ll,rm,vo2W;cho,d7ffe8nMsKxFyeD;!baD;ll;cGerci1hFpDtra8;eriDo0W;en3me9;au6ibA;el,han7u1;caDtima5;pe;count0d,vy;a01eSiMoJrEuDye;b,el,mp,pli2X;aGeFiEoD;ne,p;ft,ll,nk,p,ve;am,ss;ft,g,in;cEd7ubt,wnloD;ad;k,u0E;ge6p,sFt4vD;e,iDor3;de;char7gui1h,liEpD;at4lay,u5;ke;al,bKcJfeIlGmaCposAsEtaD;il;e07iD;gn,re;ay,ega5iD;ght;at,ct;li04rea1;a5ut;b,ma7n3rDte;e,t;a0Eent0Dh06irc2l03oKrFuD;be,e,rDt;b,e,l,ve;aGeFoEuDy;sh;p,ss,wd;dAep;ck,ft,sh;at,de,in,lTmMnFordina5py,re,st,uDv0;gh,nDp2rt;s01t;ceHdu8fli8glomeIsFtDveN;a8rD;a6ol;e9tru8;ct;ntDrn;ra5;bHfoGmFpD;leDouCromi1;me9;aCe9it,u5;rt;at,iD;ne;lap1oD;r,ur;aEiDoud,ub;ck,p;im,w;aEeDip;at,ck,er;iGllen7nErD;ge,m,t;ge,nD;el;n,r;er,re;ke,ll,mp,noe,pGrXsFtEuDve;se,ti0I;alog,ch;h,t;!tuB;re;a03eZiXlToPrHuEyD;pa11;bb2ck2dgEff0mp,rDst,zz;den,n;et;anJeHiFoadEuD;i1sh;ca6;be,d7;ge;aDed;ch,k;ch,d;aFg,mb,nEoDrd0tt2x,ycott;k,st,t;d,e;rd,st;aFeCiDoYur;nk,tz;nd;me;as,d,ke,nd,opsy,tD;!ch,e;aFef,lt,nDt;d,efA;it;r,t;ck,il,lan3nIrFsEtt2;le;e,h;!gDk;aDe;in;!d,g,k;bu1c05dZge,iYlVnTppQrLsIttGucEwaD;rd;tiD;on;aDempt;ck;k,sD;i6ocia5;st;chFmD;!oD;ur;!iD;ve;eEroa4;ch;al;chDg0sw0;or;aEt0;er;rm;d,m,r;dreHvD;an3oD;ca5;te;ce;ss;cDe,he,t;eFoD;rd,u9;nt;nt,ss;se",
  "Actor": "true¦0:7B;1:7G;2:6A;3:7F;4:7O;5:7K;a6Nb62c4Ud4Be41f3Sg3Bh30i2Uj2Qkin2Pl2Km26n1Zo1Sp0Vqu0Tr0JsQtJuHvEw8yo6;gi,ut6;h,ub0;aAe9i8o7r6;estl0it0;m2rk0;fe,nn0t2Bza2H;atherm2ld0;ge earn0it0nder0rri1;eter7i6oyF;ll5Qp,s3Z;an,ina2U;n6s0;c6Uder03;aoisea23e9herapi5iktok0o8r6ut1yco6S;a6endseLo43;d0mp,nscri0Bvel0;ddl0u1G;a0Qchn7en6na4st0;ag0;i3Oo0D;aiXcUeRhPiMki0mu26oJpGquaFtBu7wee6;p0theart;lt2per7r6;f0ge6Iviv1;h6inten0Ist5Ivis1;ero,um2;a8ep7r6;ang0eam0;bro2Nc2Ofa2Nmo2Nsi20;ff0tesm2;tt0;ec7ir2Do6;kesp59u0M;ia5Jt3;l7me6An,rcere6ul;r,ss;di0oi5;n7s6;sy,t0;g0n0;am2ephe1Iow6;girl,m2r2Q;cretInior cit3Fr6;gea4v6;a4it1;hol4Xi7reen6ulpt1;wr2C;e01on;l1nt;aEe9o8u6;l0nn6;er up,ingE;g40le mod3Zof0;a4Zc8fug2Ppo32searQv6;ere4Uolution6;ary;e6luYru22;ptio3T;bbi,dic5Vpp0;arter6e2Z;back;aYeWhSiRlOoKr8sycho7u6;nk,p31;logi5;aGeDiBo6;d9fess1g7ph47s6;pe2Ktitu51;en6ramm0;it1y;igy,uc0;est4Nme mini0Unce6s3E;!ss;a7si6;de4;ch0;ctiti39nk0P;dca0Oet,li6pula50rnst42;c2Itic6;al scie6i2;nti5;a6umb0;nn0y6;er,ma4Lwright;lgrim,one0;a8iloso7otogra7ra6ysi1V;se;ph0;ntom,rmaci5;r6ssi1T;form0s4O;i3El,nel3Yr8st1tr6wn;i6on;arWot;ent4Wi42tn0;ccupa4ffBp8r7ut6;ca5l0B;ac4Iganiz0ig2Fph2;er3t6;i1Jomet6;ri5;ic0spring;aBe9ie4Xo7u6;n,rser3J;b6mad,vi4V;le2Vo4D;i6mesis,phew;ce,ghb1;nny,rr3t1X;aEeDiAo7u6yst1Y;m8si16;der3gul,m7n6th0;arDk;!my;ni7s6;f02s0Jt0;on,st0;chan1Qnt1rcha4;gi9k0n8rtyr,t6y1;e,riar6;ch;ag0iac;ci2stra3I;a7e2Aieutena4o6;rd,s0v0;bor0d7ndlo6ss,urea3Fwy0ym2;rd;!y;!s28;e8o7u6;ggl0;gg0urna2U;st0;c3Hdol,llu3Ummigra4n6; l9c1Qfa4habi42nov3s7ve6;nt1stig3;pe0Nt6;a1Fig3ru0M;aw;airFeBistoAo8u6ygie1K;man6sba2H;!ita8;bo,st6usekN;age,e3P;ri2;ir,r6;m7o6;!ine;it;dress0sty2C;aLeIhostGirl26ladi3oCrand7u6;e5ru;c9daug0Jfa8m7pa6s2Y;!re4;a,o6;th0;hi1B;al7d6lf0;!de3A;ie,k6te26;eep0;!wr6;it0;isha,n6;i6tl04;us;mbl0rden0;aDella,iAo7r6;eela2Nie1P;e,re6ster pare4;be1Hm2r6st0;unn0;an2ZgZlmm17nanci0r6tt0;e6st la2H; marsh2OfigXm2;rm0th0;conoEdDlectriCm8n7x6;amin0cellency,i2A;emy,trepreneur,vironmenta1J;c8p6;er1loye6;e,r;ee;ci2;it1;mi5;aKeBi8ork,ri7u6we02;de,tche2H;ft0v0;ct3eti7plom2Hre6va;ct1;ci2ti2;aDcor3fencCi0InAput9s7tectLvel6;op0;ce1Ge6ign0;rt0;ee,y;iz6;en;em2;c1Ml0;d8nc0redev7ug6;ht0;il;!dy;a06e04fo,hXitizenWlToBr9u6;r3stomer6;! representat6;ive;e3it6;ic;lJmGnAord9rpor1Nu7w6;boy,ork0;n6ri0;ciTte1Q;in3;fidantAgressSs9t6;e0Kr6;ibut1o6;ll0;tab13ul1O;!e;edi2m6pos0rade;a0EeQissi6;on0;leag8on7um6;ni5;el;ue;e6own;an0r6;ic,k;!s;a9e7i6um;ld;erle6f;ad0;ir7nce6plFract0;ll1;m2wI;lebri6o;ty;dBptAr6shi0;e7pe6;nt0;r,t6;ak0;ain;et;aMeLiJlogg0oErBu6;dd0Fild0rgl9siness6;m2p7w6;om2;ers05;ar;i7o6;!k0th0;cklay0de,gadi0;hemi2oge8y6;!frie6;nd;ym2;an;cyc6sR;li5;atbox0ings;by,nk0r6;b0on7te6;nd0;!e07;c04dWge4nQpLrHsFtAu7yatull6;ah;nt7t6;h1oG;!ie;h8t6;e6orney;nda4;ie5le6;te;sis00tron6;aut,om0;chbis8isto7tis6;an,t;crU;hop;ost9p6;ari6rentiS;ti6;on;le;a9cest1im3nou8y6;bo6;dy;nc0;ly5rc6;hi5;mi8v6;entur0is1;er;ni7r6;al;str3;at1;or;counBquaintanArob9t6;ivi5or,re6;ss;st;at;ce;ta4;nt",
  "Adj|Noun": "true¦0:16;a1Db17c0Ud0Re0Mf0Dg0Ah08i06ju05l02mWnUoSpNrIsBt7u4v1watershed;a1ision0Z;gabo4nilla,ria1;b0Vnt;ndergr1pstairs;adua14ou1;nd;a3e1oken,ri0;en,r1;min0rori13;boo,n;age,e5ilv0Flack,o3quat,ta2u1well;bordina0Xper5;b0Lndard;ciali0Yl1vereign;e,ve16;cret,n1ri0;ior;a4e2ou1ubbiL;nd,tiY;ar,bBl0Wnt0p1side11;resent0Vublican;ci0Qsh;a4eriodic0last0Zotenti0r1;emi2incip0o1;!fession0;er,um;rall4st,tie0U;ff1pposi0Hv0;ens0Oi0C;agg01ov1uts;el;a5e3iniatJo1;bi01der07r1;al,t0;di1tr0N;an,um;le,riG;attOi2u1;sh;ber0ght,qC;stice,veniT;de0mpressioYn1;cumbe0Edividu0no0Dsta0Eterim;alf,o1umdrum;bby,melF;en2old,ra1;ph0Bve;er0ious;a7e5i4l3u1;git03t1;ure;uid;ne;llow,m1;aFiL;ir,t,vo1;riOuriO;l3p00x1;c1ecutUpeV;ess;d1iK;er;ar2e1;mographUrivO;k,l2;hiGlassSo2rude,unn1;ing;m5n1operK;creCstitueOte2vertab1;le;mpor1nt;ary;ic,m2p1;anion,lex;er2u1;ni8;ci0;al;e5lank,o4r1;i2u1;te;ef;ttom,urgeois;st;cadem9d6l2ntarct9r1;ab,ct8;e3tern1;at1;ive;rt;oles1ult;ce1;nt;ic",
  "Adj|Past": "true¦0:4Q;1:4C;2:4H;3:4E;a44b3Tc36d2Je29f20g1Wh1Si1Jj1Gkno1Fl1Am15n12o0Xp0Mqu0Kr08sLtEuAv9w4yellow0;a7ea6o4rinkl0;r4u3Y;n,ri0;k31th3;rp0sh0tZ;ari0e1O;n5p4s0;d1li1Rset;cov3derstood,i4;fi0t0;a8e3Rhr7i6ouTr4urn0wi4C;a4imm0ou2G;ck0in0pp0;ed,r0;eat2Qi37;m0nn0r4;get0ni2T;aOcKeIhGimFm0Hoak0pDt7u4;bsid3Ogge44s4;pe4ta2Y;ct0nd0;a8e7i2Eok0r5u4;ff0mp0nn0;ength2Hip4;ed,p0;am0reotyp0;in0t0;eci4ik0oH;al3Efi0;pRul1;a4ock0ut;d0r0;a4c1Jle2t31;l0s3Ut0;a6or5r4;at4e25;ch0;r0tt3;t4ut0;is2Mur1;aEe5o4;tt0;cAdJf2Bg9je2l8m0Knew0p7qu6s4;eTpe2t4;or0ri2;e3Dir0;e1lac0;at0e2Q;i0Rul1;eiv0o4ycl0;mme2Lrd0v3;in0lli0ti2A;a4ot0;li28;aCer30iBlAo9r5u4;mp0zzl0;e6i2Oo4;ce2Fd4lo1Anou30pos0te2v0;uc0;fe1CocCp0Iss0;i2Kli1L;ann0e2CuS;ck0erc0ss0;ck0i2Hr4st0;allLk0;bse7c6pp13rgan2Dver4;lo4whelm0;ok0;cupi0;rv0;aJe5o4;t0uri1A;ed0gle2;a6e5ix0o4ut0ys1N;di1Nt15u26;as0Clt0;n4rk0;ag0ufact0A;e6i5o4;ad0ck0st,v0;cens0m04st0;ft,v4;el0;tt0wn;a5o15u4;dg0s1B;gg0;llumSmpAn4sol1;br0cre1Ldebt0f8jZspir0t5v4;it0olv0;e4ox0Y;gr1n4re23;d0si15;e2l1o1Wuri1;li0o01r4;ov0;a6e1o4um03;ok0r4;ri0Z;mm3rm0;i6r5u4;a1Bid0;a0Ui0Rown;ft0;aAe9i8l6oc0Ir4;a4i0oz0Y;ctHg19m0;avo0Ju4;st3;ni08tt0x0;ar0;d0il0sc4;in1;dCl1mBn9quipp0s8x4;agger1c6p4te0T;a0Se4os0;ct0rie1D;it0;cap0tabliZ;cha0XgFha1As4;ur0;a0Zbarra0N;i0Buc1;aMeDi5r4;a01i0;gni08miniSre2s4;a9c6grun0Ft4;o4re0Hu17;rt0;iplWou4;nt0r4;ag0;bl0;cBdRf9l8p7ra6t5v4;elop0ot0;ail0ermQ;ng0;re07;ay0ight0;e4in0o0M;rr0;ay0enTor1;m5t0z4;ed,zl0;ag0p4;en0;aPeLhIlHo9r6u4;lt4r0stom03;iv1;a5owd0u4;sh0;ck0mp0;d0loAm7n4ok0v3;centr1f5s4troC;id3olid1;us0;b5pl4;ic1;in0;r0ur0;assi9os0utt3;ar5i4;ll0;g0m0;lebr1n6r4;ti4;fi0;tralJ;g0lcul1;aDewild3iCl9o7r5urn4;ed,t;ok4uis0;en;il0r0t4und;tl0;e5i4;nd0;ss0;as0;ffl0k0laMs0tt3;bPcNdKfIg0lFmaz0nDppBrm0ss9u5wa4;rd0;g5thor4;iz0;me4;nt0;o6u4;m0r0;li0re4;ci1;im1ticip1;at0;a5leg0t3;er0;rm0;fe2;ct0;ju5o7va4;nc0;st0;ce4knowledg0;pt0;and5so4;rb0;on0;ed",
  "Singular": "true¦0:5J;1:5H;2:4W;3:4S;4:52;5:57;6:5L;7:56;8:5B;a52b4Lc3Nd35e2Xf2Og2Jh28in24j23k22l1Um1Ln1Ho1Bp0Rqu0Qr0FsZtMuHvCw9x r58yo yo;a9ha3Po3Q;f3i4Rt0Gy9;! arou39;arCeAideo ga2Qo9;cabu4Jl5C;gOr9t;di4Zt1Y;iety,ni4P;nBp30rAs 9;do43s5E;bani1in0;coordinat3Ader9;estima1to24we41; rex,aKeJhHiFoErBuAv9;! show;m2On2rntLto1D;agedy,ib9o4E;e,u9;n0ta46;ni1p2rq3L;c,er,m9;etF;ing9ree26;!y;am,mp3F;ct2le6x return;aNcMeKhor4QiJkHoGpin off,tDuBy9;ll9ner7st4T;ab2X;b9i1n28per bowl,rro1X;st3Ltot0;atAipe2Go1Lrate7udent9;! lo0I;i39u1;ft ser4Lmeo1I;elet5i9;ll,r3V;b38gn2Tte;ab2Jc9min3B;t,urity gua2N;e6ho2Y;bbatic0la3Jndwi0Qpi5;av5eDhetor2iAo9;de6om,w;tAv9;erb2C;e,u0;bDcBf9publ2r10spi1;er9orm3;e6r0;i9ord label;p2Ht0;a1u46;estion mark,ot2F;aPeMhoLiIlGoErAu9yram1F;ddi3HpErpo1Js3J;eBo9;bl3Zs9;pe3Jta1;dic1Rmi1Fp1Qroga8ss relea1F;p9rt0;py;a9ebisci1;q2Dte;cn2eAg9;!gy;!r;ne call,tocoK;anut,dAr9t0yo1;cen3Jsp3K;al,est0;nop4rAt9;e,hog5;adi11i2V;atme0bj3FcBpia1rde0thers,utspok5ve9wn3;n,r9;ti0Pview;cuAe9;an;pi3;arBitAot9umb3;a2Fhi2R;e,ra1;cot2ra8;aFeCiAo9ur0;nopo4p18rni2Nsq1Rti36uld;c,li11n0As9tt5;chief,si34;dAnu,t9;al,i3;al,ic;gna1mm0nd15rsupi0te9yf4;ri0;aDegCiBu9;ddi1n9;ch;me,p09; Be0M;bor14y9; 9er;up;eyno1itt5;el4ourn0;cBdices,itia8ni25sAtel0Lvert9;eb1J;e28titu1;en8i2T;aIeEighDoAu9;man right,s22;me9rmoFsp1Ftb0K;! r9;un; scho0YriY;a9i1N;d9v5; start,pho9;ne;ndful,sh brown,v5ze;aBelat0Ilaci3r9ul4yp1S;an9enadi3id;a1Cd slam,ny;df4r9;l2ni1I;aGeti1HiFlu1oCrAun9;er0;ee market,i9onti3;ga1;l4ur9;so9;me;ePref4;br2mi4;conoFffi7gg,lecto0Rmbas1EnCpidem2s1Zth2venBxAyel9;id;ampZempl0Nte6;i19t;er7terp9;ri9;se;my;eLiEoBr9ump tru0U;agonf4i9;er,ve thru;cAg7i4or,ssi3wn9;side;to0EumenE;aEgniDnn3sAvide9;nd;conte6incen8p9tri11;osi9;ti0C;ta0H;le0X;athBcAf9ni0terre6;ault 05err0;al,im0;!b9;ed;aWeThMiLlJoDr9;edit caBuc9;ib9;le;rd;efficDke,lCmmuniqLnsApi3rr0t0Xus9yo1;in;erv9uI;ato02;ic,lQ;ie6;er7i9oth;e6n2;ty,vil wM;aDeqCick5ocoBr9;istmas car9ysanthemum;ol;la1;ue;ndeli3racteri9;st2;iAllEr9;e0tifica1;liZ;hi3nFpErCt9ucus;erpi9hedr0;ll9;ar;!bohyd9ri3;ra1;it0;aAe,nib0t9;on;l,ry;aMeLiop2leJoHrDu9;nny,r9tterf4;g9i0;la9;ry;eakAi9;ck;fa9throB;st;dy,ro9wl;ugh;mi9;sh;an,l4;nkiArri3;er;ng;cSdMlInFppeti1rDsBtt2utop9;sy;ic;ce6pe9;ct;r9sen0;ay;ecAoma4tiA;ly;do1;i5l9;er7y;gy;en; hominDjAvan9;tage;ec8;ti9;ve;em;cCeAqui9;tt0;ta1;te;iAru0;al;de6;nt",
  "Person|Noun": "true¦a0Eb07c03dWeUfQgOhLjHkiGlFmCnBolive,p7r4s3trini06v1wa0;ng,rd,tts;an,enus,iol0;a,et;ky,onPumm09;ay,e1o0uby;bin,d,se;ed,x;a2e1o0;l,tt04;aLnJ;dYge,tR;at,orm;a0eloW;t0x,ya;!s;a9eo,iH;ng,tP;a2e1o0;lGy;an,w3;de,smi4y;a0erb,iOolBuntR;ll,z0;el;ail,e0iLuy;ne;a1ern,i0lo;elds,nn;ith,n0;ny;a0dEmir,ula,ve;rl;a4e3i1j,ol0;ly;ck,x0;ie;an,ja;i0wn;sy;am,h0liff,rystal;a0in,ristian;mbers,ri0;ty;a4e3i2o,r0ud;an0ook;dy;ll;nedict,rg;k0nks;er;l0rt;fredo,ma",
  "Actor|Verb": "true¦aCb8c5doctor,engineAfool,g3host,judge,m2nerd,p1recruit,scout,ushAvolunteAwi0;mp,tneA;arent,ilot;an,ime;eek,oof,r0uide;adu8oom;ha1o0;ach,nscript,ok;mpion,uffeur;o2u0;lly,tch0;er;ss;ddi1ffili0rchite1;ate;ct",
  "MaleName": "true¦0:H6;1:FZ;2:DS;3:GQ;4:CZ;5:FV;6:GM;7:FP;8:GW;9:ET;A:C2;B:GD;aF8bE1cCQdBMeASfA1g8Yh88i7Uj6Sk6Bl5Mm48n3So3Ip33qu31r26s1Et0Ru0Ov0CwTxSyHzC;aCor0;cChC1karia,nAT;!hDkC;!aF6;!ar7CeF5;aJevgenBSoEuC;en,rFVsCu3FvEF;if,uf;nDs6OusC;ouf,s6N;aCg;s,tC;an,h0;hli,nCrosE1ss09;is,nC;!iBU;avi2ho5;aPeNiDoCyaEL;jcieBJlfgang,odrFutR;lFnC;f8TsC;lCt1;ow;bGey,frEhe4QlC;aE5iCy;am,e,s;ed8iC;d,ed;eAur;i,ndeD2rn2sC;!l9t1;lDyC;l1ne;lDtC;!er;aCHy;aKernDAiFladDoC;jteB0lodymyr;!iC;mFQsDB;cFha0ktBZnceDrgCOvC;a0ek;!nC;t,zo;!e4StBV;lCnC7sily;!entC;in9J;ghE2lCm70nax,ri,sm0;riCyss87;ch,k;aWeRhNiLoGrEuDyC;!l2roEDs1;n6r6E;avD0eCist0oy,um0;ntCRvBKy;bFdAWmCny;!asDmCoharu;aFFie,y;!z;iA6y;mCt4;!my,othy;adEeoDia0SomC;!as;!dor91;!de4;dFrC;enBKrC;anBJeCy;ll,nBI;!dy;dgh,ha,iCnn2req,tsu5V;cDAka;aYcotWeThPiMlobod0oKpenc2tEurDvenAEyCzym1;ed,lvest2;aj,e9V;anFeDuC;!aA;fan17phEQvCwaA;e77ie;!islaCl9;v,w;lom1rBuC;leymaDHta;dDgmu9UlCm1yabonga;as,v8B;!dhart8Yn9;aEeClo75;lCrm0;d1t1;h9Jne,qu1Jun,wn,yne;aDbastiEDk2Yl5Mpp,rgCth,ymoCU;e1Dio;m4n;!tC;!ie,y;eDPlFmEnCq67tosCMul;dCj2UtiA5;e01ro;!iATkeB6mC4u5;!ik,vato9K;aZeUheC8iRoGuDyC;an,ou;b99dDf4peAssC;!elEG;ol00y;an,bLc7MdJel,geIh0lHmGnEry,sDyC;!ce;ar7Ocoe,s;!aCnBU;ld,n;an,eo;a7Ef;l7Jr;e3Eg2n9olfo,riC;go;bBNeDH;cCl9;ar87c86h54kCo;!ey,ie,y;cFeA3gDid,ubByCza;an8Ln06;g85iC;naC6s;ep;ch8Kfa5hHin2je8HlGmFndEoHpha5sDul,wi36yC;an,mo8O;h9Im4;alDSol3O;iD0on;f,ph;ul;e9CinC;cy,t1;aOeLhilJiFrCyoG;aDeC;m,st1;ka85v2O;eDoC;tr;r8GtC;er,ro;!ipCl6H;!p6U;dCLrcy,tC;ar,e9JrC;!o7;b9Udra8So9UscAHtri62ulCv8I;!ie,o7;ctav6Ji2lImHndrBRrGsDtCum6wB;is,to;aDc6k6m0vCwaBE;al79;ma;i,vR;ar,er;aDeksandr,ivC;er,i2;f,v;aNeLguyBiFoCu3O;aDel,j4l0ma0rC;beAm0;h,m;cFels,g5i9EkDlC;es,s;!au,h96l78olaC;!i,y;hCkCol76;ol75;al,d,il,ls1vC;ilAF;hom,tC;e,hC;anCy;!a5i5;aYeViLoGuDyC;l4Nr1;hamDr84staC;fa,p6E;ed,mG;di10e,hamEis4JntDritz,sCussa;es,he;e,y;ad,ed,mC;ad,ed;cGgu5hai,kFlEnDtchC;!e8O;a9Pik;house,o7t1;ae73eC3ha8Iolaj;ah,hDkC;!ey,y;aDeC;al,l;el,l;hDlv3rC;le,ri8Ev4T;di,met;ay0c00gn4hWjd,ks2NlTmadZnSrKsXtDuric7VxC;imilBKwe8B;eHhEi69tCus,y69;!eo,hCia7;ew,i67;eDiC;as,eu,s;us,w;j,o;cHiGkFlEqu8Qsha83tCv3;iCy;!m,n;in,on;el,o7us;a6Yo7us;!elCin,o7us;!l8o;frAEi5Zny,u5;achDcoCik;lm;ai,y;amDdi,e5VmC;oud;adCm6W;ou;aulCi9P;ay;aWeOiMloyd,oJuDyC;le,nd1;cFdEiDkCth2uk;a7e;gi,s,z;ov7Cv6Hw6H;!as,iC;a6Een;g0nn52renDuCvA4we7D;!iS;!zo;am,n4oC;n5r;a9Yevi,la5KnHoFst2thaEvC;eCi;nte;bo;nCpo8V;!a82el,id;!nC;aAy;mEnd1rDsz73urenCwr6K;ce,t;ry,s;ar,beAont;aOeIhalHiFla4onr63rDu5SylC;e,s;istCzysztof;i0oph2;er0ngsl9p,rC;ilA9k,ollos;ed,id;en0iGnDrmCv4Z;it;!dDnCt1;e2Ny;ri4Z;r,th;cp2j4mEna8BrDsp6them,uC;ri;im,l;al,il;a03eXiVoFuC;an,lCst3;en,iC;an,en,o,us;aQeOhKkub4AnIrGsDzC;ef;eDhCi9Wue;!ua;!f,ph;dCge;i,on;!aCny;h,s,th6J;anDnC;!ath6Hie,n72;!nC;!es;!l,sCy;ph;o,qu3;an,mC;!i,m6V;d,ffFns,rCs4;a7JemDmai7QoCry;me,ni1H;i9Dy;!e73rC;ey,y;cKdBkImHrEsDvi2yC;dBs1;on,p2;ed,oDrCv67;e6Qod;d,s61;al,es5Wis1;a,e,oCub;b,v;ob,qu13;aTbNchiMgLke53lija,nuKonut,rIsEtCv0;ai,suC;ki;aDha0i8XmaCsac;el,il;ac,iaC;h,s;a,vinCw3;!g;k,nngu6X;nac1Xor;ka;ai,rahC;im;aReLoIuCyd6;beAgGmFsC;eyDsC;a3e3;in,n;ber5W;h,o;m2raDsse3wC;a5Pie;c49t1K;a0Qct3XiGnDrC;beAman08;dr7VrC;iCy2N;!k,q1R;n0Tt3S;bKlJmza,nIo,rEsDyC;a5KdB;an,s0;lEo67r2IuCv9;hi5Hki,tC;a,o;an,ey;k,s;!im;ib;a08e00iUlenToQrMuCyorgy;iHnFsC;!taC;f,vC;!e,o;n6tC;er,h2;do,lC;herDlC;auCerQ;me;aEegCov2;!g,orC;!io,y;dy,h7C;dfr9nza3XrDttfC;ri6C;an,d47;!n;acoGlEno,oCuseppe;rgiCvan6O;!o,s;be6Ies,lC;es;mo;oFrC;aDha4HrC;it,y;ld,rd8;ffErgC;!e7iCy;!os;!r9;bElBrCv3;eCla1Nr4Hth,y;th;e,rC;e3YielC;!i4;aXeSiQlOorrest,rCyod2E;aHedFiC;edDtC;s,z;ri18;!d42eri11riC;ck,k;nCs2;cEkC;ie,lC;in,yn;esLisC;!co,z3M;etch2oC;ri0yd;d5lConn;ip;deriFliEng,rC;dinaCg4nan0B;nd8;pe,x;co;bCdi,hd;iEriC;ce,zC;io;an,en,o;benez2dZfrYit0lTmMnJo3rFsteb0th0ugenEvCymBzra;an,eCge4D;ns,re3K;!e;gi,iDnCrol,v3w3;est8ie,st;cCk;!h,k;o0DriCzo;co,qC;ue;aHerGiDmC;aGe3A;lCrh0;!iC;a10o,s;s1y;nu5;beAd1iEliDm2t1viCwood;n,s;ot28s;!as,j5Hot,sC;ha;a3en;!dGg6mFoDua2QwC;a2Pin;arC;do;oZuZ;ie;a04eTiOmitrNoFrag0uEwDylC;an,l0;ay3Hig4D;a3Gdl9nc0st3;minFnDri0ugCvydGy2S;!lF;!a36nCov0;e1Eie,y;go,iDykC;as;cCk;!k;i,y;armuFetDll1mitri7neCon,rk;sh;er,m6riC;ch;id;andLepak,j0lbeAmetri4nIon,rGsEvDwCxt2;ay30ey;en,in;hawn,moC;nd;ek,riC;ck;is,nC;is,y;rt;re;an,le,mKnIrEvC;e,iC;!d;en,iEne0PrCyl;eCin,yl;l45n;n,o,us;!iCny;el,lo;iCon;an,en,on;a0Fe0Ch03iar0lRoJrFuDyrC;il,us;rtC;!is;aEistC;iaCob12;no;ig;dy,lInErC;ey,neliCy;s,us;nEor,rDstaC;nt3;ad;or;by,e,in,l3t1;aHeEiCyde;fCnt,ve;fo0Xt1;menDt4;us;s,t;rFuDyC;!t1;dCs;e,io;enC;ce;aHeGrisC;!toC;phCs;!eC;!r;st2t;d,rCs;b5leC;s,y;cDdrCs6;ic;il;lHmFrC;ey,lDroCy;ll;!o7t1;er1iC;lo;!eb,v3;a09eZiVjorn,laUoSrEuCyr1;ddy,rtKst2;er;aKeFiEuDyC;an,ce,on;ce,no;an,ce;nDtC;!t;dDtC;!on;an,on;dFnC;dDisC;lav;en,on;!foOl9y;bby,gd0rCyd;is;i0Lke;bElDshC;al;al,lL;ek;nIrCshoi;at,nEtC;!raC;m,nd;aDhaCie;rd;rd8;!iDjam3nCs1;ie,y;to;kaMlazs,nHrC;n9rDtC;!holomew;eCy;tt;ey;dCeD;ar,iC;le;ar1Nb1Dd16fon15gust3hm12i0Zja0Yl0Bm07nTputsiSrGsaFugustEveDyCziz;a0kh0;ry;o,us;hi;aMchiKiJjun,mHnEon,tCy0;em,hCie,ur8;ur;aDoC;!ld;ud,v;aCin;an,nd8;!el,ki;baCe;ld;ta;aq;aMdHgel8tCw6;hoFoC;iDnC;!i8y;ne;ny;er7rCy;eDzC;ej;!as,i,j,s,w;!s;s,tolC;iCy;!y;ar,iEmaCos;nu5r;el;ne,r,t;aVbSdBeJfHiGl01onFphonsEt1vC;aPin;on;e,o;so,zo;!sR;!onZrC;ed;c,jaHksFssaHxC;!andC;er,rC;e,os,u;andCei;ar,er,r;ndC;ro;en;eDrecC;ht;rt8;dd3in,n,sC;taC;ir;ni;dDm6;ar;an,en;ad,eC;d,t;in;so;aGi,olErDvC;ik;ian8;f8ph;!o;mCn;!a;dGeFraDuC;!bakr,lfazl;hCm;am;!l;allFel,oulaye,ulC;!lDrahm0;an;ah,o;ah;av,on",
  "Uncountable": "true¦0:2E;1:2L;2:33;a2Ub2Lc29d22e1Rf1Ng1Eh16i11j0Yk0Wl0Rm0Hn0Do0Cp03rZsLt9uran2Jv7w3you gu0E;a5his17i4oo3;d,l;ldlife,ne;rm8t1;apor,ernacul29i3;neg28ol1Otae;eDhBiAo8r4un3yranny;a,gst1B;aff2Oea1Ko4ue nor3;th;o08u3;bleshoot2Ose1Tt;night,othpas1Vwn3;foEsfoE;me off,n;er3und1;e,mod2S;a,nnis;aDcCeBhAi9ki8o7p6t4u3weepstak0;g1Unshi2Hshi;ati08e3;am,el;ace2Keci0;ap,cc1meth2C;n,ttl0;lk;eep,ingl0or1C;lf,na1Gri0;ene1Kisso1C;d0Wfe2l4nd,t3;i0Iurn;m1Ut;abi0e4ic3;e,ke15;c3i01laxa11search;ogni10rea10;a9e8hys7luto,o5re3ut2;amble,mis0s3ten20;en1Zs0L;l3rk;i28l0EyH; 16i28;a24tr0F;nt3ti0M;i0s;bstetri24vercrowd1Qxyg09;a5e4owada3utella;ys;ptu1Ows;il poliZtional securi2;aAe8o5u3;m3s1H;ps;n3o1K;ey,o3;gamy;a3cha0Elancholy,rchandi1Htallurgy;sl0t;chine3g1Aj1Hrs,thema1Q; learn1Cry;aught1e6i5ogi4u3;ck,g12;c,s1M;ce,ghtn18nguis1LteratWv1;ath1isVss;ara0EindergartPn3;icke0Aowled0Y;e3upit1;a3llyfiGwel0G;ns;ce,gnor6mp5n3;forma00ter3;net,sta07;atiSort3rov;an18;a7e6isto09o3ung1;ckey,mework,ne4o3rseradi8spitali2use arrest;ky;s2y;adquarteXre;ir,libut,ppiHs3;hi3te;sh;ene8l6o5r3um,ymnas11;a3eZ;niUss;lf,re;ut3yce0F;en; 3ti0W;edit0Hpo3;ol;aNicFlour,o4urnit3;ure;od,rgive3uri1wl;ness;arCcono0LducaBlectr9n7quip8thi0Pvery6x3;ist4per3;ti0B;en0J;body,o08th07;joy3tertain3;ment;ici2o3;ni0H;tiS;nings,th;emi02i6o4raugh3ynas2;ts;pe,wnstai3;rs;abet0ce,s3;honZrepu3;te;aDelciChAivi07l8o3urrency;al,ld w6mmenta5n3ral,ttIuscoB;fusiHt 3;ed;ry;ar;assi01oth0;es;aos,e3;eMwK;us;d,rO;a8i6lood,owlHread5u3;ntGtt1;er;!th;lliarJs3;on;g3ss;ga3;ge;cKdviJeroGirFmBn6ppeal court,r4spi3thleL;rin;ithmet3sen3;ic;i6y3;o4th3;ing;ne;se;en5n3;es2;ty;ds;craft;bi8d3nau7;yna3;mi6;ce;id,ous3;ti3;cs",
  "Infinitive": "true¦0:9G;1:9T;2:AD;3:90;4:9Z;5:84;6:AH;7:A9;8:92;9:A0;A:AG;B:AI;C:9V;D:8R;E:8O;F:97;G:6H;H:7D;a94b8Hc7Jd68e4Zf4Mg4Gh4Ai3Qj3Nk3Kl3Bm34nou48o2Vp2Equ2Dr1Es0CtZuTvRwI;aOeNiLors5rI;eJiI;ng,te;ak,st3;d5e8TthI;draw,er;a2d,ep;i2ke,nIrn;d1t;aIie;liADniAry;nJpI;ho8Llift;cov1dJear8Hfound8DlIplug,rav82tie,ve94;eaAo3X;erIo;cut,go,staAFvalA3w2G;aSeQhNoMrIu73;aIe72;ffi3Smp3nsI;aBfo7CpI;i8oD;pp3ugh5;aJiJrIwaD;eat5i2;nk;aImA0;ch,se;ck3ilor,keImp1r8L;! paD;a0Ic0He0Fh0Bi0Al08mugg3n07o05p02qu01tUuLwI;aJeeIim;p,t5;ll7Wy;bNccMffLggeCmmKppJrI;mouFpa6Zvi2;o0re6Y;ari0on;er,i4;e7Numb;li9KmJsiIveD;de,st;er9it;aMe8MiKrI;ang3eIi2;ng27w;fIng;f5le;b,gg1rI;t3ve;a4AiA;a4UeJit,l7DoI;il,of;ak,nd;lIot7Kw;icEve;atGeak,i0O;aIi6;m,y;ft,ng,t;aKi6CoJriIun;nk,v6Q;ot,rt5;ke,rp5tt1;eIll,nd,que8Gv1w;!k,m;aven9ul8W;dd5tis1Iy;a0FeKiJoI;am,t,ut;d,p5;a0Ab08c06d05f01group,hea00iZjoi4lXmWnVpTq3MsOtMup,vI;amp,eJiIo3B;sEve;l,rI;e,t;i8rI;ie2ofE;eLiKpo8PtIurfa4;o24rI;aHiBuctu8;de,gn,st;mb3nt;el,hra0lIreseF;a4e71;d1ew,o07;aHe3Fo2;a7eFiIo6Jy;e2nq41ve;mbur0nf38;r0t;inKleBocus,rJuI;el,rbiA;aBeA;an4e;aBu4;ei2k8Bla43oIyc3;gni39nci3up,v1;oot,uI;ff;ct,d,liIp;se,ze;tt3viA;aAenGit,o7;aWerUinpoiFlumm1LoTrLuI;b47ke,niArIt;poDsuI;aFe;eMoI;cKd,fe4XhibEmo7noJpo0sp1tru6vI;e,i6o5L;un4;la3Nu8;aGclu6dJf1occupy,sup0JvI;a6BeF;etermi4TiB;aGllu7rtr5Ksse4Q;cei2fo4NiAmea7plex,sIva6;eve8iCua6;mp1rItrol,ve;a6It6E;bOccuNmEpMutLverIwe;l07sJtu6Yu0wI;helm;ee,h1F;gr5Cnu2Cpa4;era7i4Ipo0;py,r;ey,seItaH;r2ss;aMe0ViJoIultiply;leCu6Pw;micJnIspla4;ce,g3us;!k;iIke,na9;m,ntaH;aPeLiIo0u3N;ke,ng1quIv5;eIi6S;fy;aKnIss5;d,gI;th5;rn,ve;ng2Gu1N;eep,idnJnI;e4Cow;ap;oHuI;gg3xtaI;po0;gno8mVnIrk;cTdRfQgeChPitia7ju8q1CsNtKun6EvI;a6eIo11;nt,rt,st;erJimi6BoxiPrI;odu4u6;aBn,pr03ru6C;iCpi8tIu8;all,il,ruB;abEibE;eCo3Eu0;iIul9;ca7;i7lu6;b5Xmer0pI;aLer4Uin9ly,oJrI;e3Ais6Bo2;rt,se,veI;riA;le,rt;aLeKiIoiCuD;de,jaInd1;ck;ar,iT;mp1ng,pp5raIve;ng5Mss;ath1et,iMle27oLrI;aJeIow;et;b,pp3ze;!ve5A;gg3ve;aTer45i5RlSorMrJuI;lf4Cndrai0r48;eJiIolic;ght5;e0Qsh5;b3XeLfeEgJsI;a3Dee;eIi2;!t;clo0go,shIwa4Z;ad3F;att1ee,i36;lt1st5;a0OdEl0Mm0FnXquip,rWsVtGvTxI;aRcPeDhOiNpJtIu6;ing0Yol;eKi8lIo0un9;aHoI;it,re;ct,di7l;st,t;a3oDu3B;e30lI;a10u6;lt,mi28;alua7oI;ke,l2;chew,pou0tab19;a0u4U;aYcVdTfSgQhan4joy,lPqOrNsuMtKvI;e0YisI;a9i50;er,i4rI;aHenGuC;e,re;iGol0F;ui8;ar9iC;a9eIra2ulf;nd1;or4;ang1oIu8;r0w;irc3lo0ou0ErJuI;mb1;oaGy4D;b3ct;bKer9pI;hasiIow1;ze;aKody,rI;a4oiI;d1l;lm,rk;ap0eBuI;ci40de;rIt;ma0Rn;a0Re04iKo,rIwind3;aw,ed9oI;wn;agno0e,ff1g,mi2Kne,sLvI;eIul9;rIst;ge,t;aWbVcQlod9mant3pNru3TsMtI;iIoDu37;lJngI;uiA;!l;ol2ua6;eJlIo0ro2;a4ea0;n0r0;a2Xe36lKoIu0S;uIv1;ra9;aIo0;im;a3Kur0;b3rm;af5b01cVduBep5fUliTmQnOpMrLsiCtaGvI;eIol2;lop;ch;a20i2;aDiBloIoD;re,y;oIy;te,un4;eJoI;liA;an;mEv1;a4i0Ao06raud,y;ei2iMla8oKrI;ee,yI;!pt;de,mIup3;missi34po0;de,ma7ph1;aJrief,uI;g,nk;rk;mp5rk5uF;a0Dea0h0Ai09l08oKrIurta1G;a2ea7ipp3uI;mb3;ales4e04habEinci6ll03m00nIrro6;cXdUfQju8no7qu1sLtKvI;eIin4;ne,r9y;aHin2Bribu7;er2iLoli2Epi8tJuI;lt,me;itu7raH;in;d1st;eKiJoIroFu0;rm;de,gu8rm;ss;eJoI;ne;mn,n0;eIlu6ur;al,i2;buCe,men4pI;eIi3ly;l,te;eBi6u6;r4xiC;ean0iT;rcumveFte;eJirp,oI;o0p;riAw;ncIre5t1ulk;el;a02eSi6lQoPrKuI;iXrIy;st,y;aLeaKiJoad5;en;ng;stfeLtX;ke;il,l11mba0WrrMth1;eIow;ed;!coQfrie1LgPhMliLqueaKstJtrIwild1;ay;ow;th;e2tt3;a2eJoI;ld;ad;!in,ui3;me;bysEckfi8ff3tI;he;b15c0Rd0Iff0Ggree,l0Cm09n03ppZrXsQttOuMvJwaE;it;eDoI;id;rt;gIto0X;meF;aIeCraB;ch,in;pi8sJtoI;niA;aKeIi04u8;mb3rt,ss;le;il;re;g0Hi0ou0rI;an9i2;eaKly,oiFrI;ai0o2;nt;r,se;aMi0GnJtI;icipa7;eJoIul;un4y;al;ly0;aJu0;se;lga08ze;iKlI;e9oIu6;t,w;gn;ix,oI;rd;a03jNmiKoJsoI;rb;pt,rn;niIt;st1;er;ouJuC;st;rn;cLhie2knowled9quiItiva7;es4re;ce;ge;eQliOoKrJusI;e,tom;ue;mIst;moJpI;any,liA;da7;ma7;te;pt;andPduBet,i6oKsI;coKol2;ve;liArt,uI;nd;sh;de;ct;on",
  "Person": "true¦0:1Q;a29b1Zc1Md1Ee18f15g13h0Ri0Qj0Nk0Jl0Gm09n06o05p00rPsItCusain bolt,v9w4xzibit,y1;anni,oko on2uji,v1;an,es;en,o;a3ednesday adams,i2o1;lfram,o0Q;ll ferrell,z khalifa;lt disn1Qr1;hol,r0G;a2i1oltai06;n dies0Zrginia wo17;lentino rossi,n goG;a4h3i2ripp,u1yra banks;lZpac shakur;ger woods,mba07;eresa may,or;kashi,t1ylor;um,ya1B;a5carlett johanss0h4i3lobodan milosevic,no2ocr1Lpider1uperm0Fwami; m0Em0E;op dogg,w whi1H;egfried,nbad;akespeaTerlock holm1Sia labeouf;ddam hussa16nt1;a cla11ig9;aAe6i5o3u1za;mi,n dmc,paul,sh limbau1;gh;bin hood,d stew16nald1thko;in0Mo;han0Yngo starr,valdo;ese witherspo0i1mbrandt;ll2nh1;old;ey,y;chmaninoff,ffi,iJshid,y roma1H;a4e3i2la16o1uff daddy;cahont0Ie;lar,p19;le,rZ;lm17ris hilt0;leg,prah winfr0Sra;a2e1iles cra1Bostradam0J; yo,l5tt06wmQ;pole0s;a5e4i2o1ubar03;by,lie5net,rriss0N;randa ju1tt romn0M;ly;rl0GssiaB;cklemo1rkov,s0ta hari,ya angelou;re;ady gaga,e1ibera0Pu;bron jam0Xch wale1e;sa;anye west,e3i1obe bryant;d cudi,efer suther1;la0P;ats,sha;a2effers0fk,k rowling,rr tolki1;en;ck the ripp0Mwaharlal nehru,y z;liTnez,ron m7;a7e5i3u1;lk hog5mphrey1sa01;! bog05;l1tl0H;de; m1dwig,nry 4;an;ile selassFlle ber4m3rrison1;! 1;ford;id,mo09;ry;ast0iannis,o1;odwPtye;ergus0lorence nightinga08r1;an1ederic chopN;s,z;ff5m2nya,ustaXzeki1;el;eril lagasse,i1;le zatop1nem;ek;ie;a6e4i2octor w1rake;ho;ck w1ego maradoC;olf;g1mi lovaOnzel washingt0;as;l1nHrth vadR;ai lNt0;a8h5lint0o1thulhu;n1olio;an,fuci1;us;on;aucKop2ristian baMy1;na;in;millo,ptain beefhe4r1;dinal wols2son1;! palmF;ey;art;a8e5hatt,i3oHro1;ck,n1;te;ll g1ng crosby;atB;ck,nazir bhut2rtil,yon1;ce;to;nksy,rack ob1;ama;l 6r3shton kutch2vril lavig8yn ra1;nd;er;chimed2istot1;le;es;capo2paci1;no;ne",
  "Adjective": "true¦0:AI;1:BS;2:BI;3:BA;4:A8;5:84;6:AV;7:AN;8:AF;9:7H;A:BQ;B:AY;C:BC;D:BH;E:9Y;aA2b9Ec8Fd7We79f6Ng6Eh61i4Xj4Wk4Tl4Im41n3Po36p2Oquart7Pr2Ds1Dt14uSvOwFye29;aMeKhIiHoF;man5oFrth7G;dADzy;despreB1n w97s86;acked1UoleF;!sa6;ather1PeFll o70ste1D;!k5;nt1Ist6Ate4;aHeGiFola5T;bBUce versa,gi3Lle;ng67rsa5R;ca1gBSluAV;lt0PnLpHrGsFttermoBL;ef9Ku3;b96ge1; Hb32pGsFtiAH;ca6ide d4R;er,i85;f52to da2;a0Fbeco0Hc0Bd04e02f01gu1XheaBGiXkn4OmUnTopp06pRrNsJtHus0wF;aFiel3K;nt0rra0P;app0eXoF;ld,uS;eHi37o5ApGuF;perv06spec39;e1ok9O;en,ttl0;eFu5;cogn06gul2RlGqu84sF;erv0olv0;at0en33;aFrecede0E;id,rallel0;am0otic0;aFet;rri0tF;ch0;nFq26vers3;sur0terFv7U;eFrupt0;st0;air,inish0orese98;mploy0n7Ov97xpF;ect0lain0;eHisFocume01ue;clFput0;os0;cid0rF;!a8Scov9ha8Jlyi8nea8Gprivileg0sMwF;aFei9I;t9y;hGircumcFonvin2U;is0;aFeck0;lleng0rt0;b20ppea85ssuGttend0uthorF;iz0;mi8;i4Ara;aLeIhoHip 25oGrF;anspare1encha1i2;geth9leADp notch,rpB;rny,ugh6H;ena8DmpGrFs6U;r49tia4;eCo8P;leFst4M;nt0;a0Dc09e07h06i04ki03l01mug,nobbi4XoVpRqueami4XtKuFymb94;bHccinAi generis,pFr5;erFre7N;! dup9b,vi70;du0li7Lp6IsFurb7J;eq9Atanda9X;aKeJi16o2QrGubboFy4Q;rn;aightFin5GungS; fFfF;or7V;adfa9Pri6;lwa6Ftu82;arHeGir6NlendBot Fry;on;c3Qe1S;k5se; call0lImb9phistic16rHuFviV;ndFth1B;proof;dBry;dFub6; o2A;e60ipF;pe4shod;ll0n d7R;g2HnF;ceEg6ist9;am3Se9;co1Zem5lfFn6Are7; suf4Xi43;aGholFient3A;ar5;rlFt4A;et;cr0me,tisfac7F;aOeIheumatoBiGoF;bu8Ztt7Gy3;ghtFv3; 1Sf6X;cJdu8PlInown0pro69sGtF;ard0;is47oF;lu2na1;e1Suc45;alcit8Xe1ondi2;bBci3mpa1;aSePicayu7laOoNrGuF;bl7Tnjabi;eKiIoF;b7VfGmi49pFxi2M;er,ort81;a7uD;maFor,sti7va2;!ry;ciDexis0Ima2CpaB;in55puli8G;cBid;ac2Ynt 3IrFti2;ma40tFv7W;!i3Z;i2YrFss7R;anoBtF; 5XiF;al,s5V;bSffQkPld OnMrLth9utKverF;!aIbMdHhGni75seas,t,wF;ei74rou74;a63e7A;ue;ll;do1Ger,si6A;d3Qg2Aotu5Z; bFbFe on o7g3Uli7;oa80;fashion0school;!ay; gua7XbFha5Uli7;eat;eHligGsF;ce7er0So1C;at0;diFse;a1e1;aOeNiMoGuF;anc0de; moEnHrthFt6V;!eFwe7L;a7Krn;chaGdescri7Iprof30sF;top;la1;ght5;arby,cessa4ighbor5wlyw0xt;k0usiaFv3;ti8;aQeNiLoHuF;dIltiF;facet0p6;deHlGnFot,rbBst;ochro4Xth5;dy;rn,st;ddle ag0nF;dbloZi,or;ag9diocEga,naGrFtropolit4Q;e,ry;ci8;cIgenta,inHj0Fkeshift,mmGnFri4Oscu61ver18;da5Dy;ali4Lo4U;!stream;abEho;aOeLiIoFumberi8;ngFuti1R;stan3RtF;erm,i4H;ghtGteraF;l,ry,te;heart0wei5O;ft JgFss9th3;al,eFi0M;nda4;nguBps0te5;apGind5noF;wi8;ut;ad0itte4uniW;ce co0Hgno6Mll0Cm04nHpso 2UrF;a2releF;va1; ZaYcoWdReQfOgrNhibi4Ri05nMoLsHtFvalu5M;aAeF;nDrdepe2K;a7iGolFuboI;ub6ve1;de,gF;nifica1;rdi5N;a2er;own;eriIiLluenVrF;ar0eq5H;pt,rt;eHiGoFul1O;or;e,reA;fiFpe26termi5E;ni2;mpFnsideCrreA;le2;ccuCdeq5Ene,ppr4J;fFsitu,vitro;ro1;mJpF;arHeGl15oFrop9;li2r11;n2LrfeA;ti3;aGeFi18;d4BnD;tuE;egGiF;c0YteC;al,iF;tiF;ma2;ld;aOelNiLoFuma7;a4meInHrrGsFur5;ti6;if4E;e58o3U; ma3GsF;ick;ghfalut2HspF;an49;li00pf33;i4llow0ndGrdFtM; 05coEworki8;sy,y;aLener44iga3Blob3oKrGuF;il1Nng ho;aFea1Fizzl0;cGtF;ef2Vis;ef2U;ld3Aod;iFuc2D;nf2R;aVeSiQlOoJrF;aGeFil5ug3;q43tf2O;gFnt3S;i6ra1;lk13oHrF; keeps,eFge0Vm9tu41;g0Ei2Ds3R;liF;sh;ag4Mowe4uF;e1or45;e4nF;al,i2;d Gmini7rF;ti6ve1;up;bl0lDmIr Fst pac0ux;oGreacF;hi8;ff;ed,ili0R;aXfVlTmQnOqu3rMthere3veryday,xF;aApIquisi2traHuF;be48lF;ta1;!va2L;edRlF;icF;it;eAstF;whi6; Famor0ough,tiE;rou2sui2;erGiF;ne1;ge1;dFe2Aoq34;er5;ficF;ie1;g9sF;t,ygF;oi8;er;aWeMiHoGrFue;ea4owY;ci6mina1ne,r31ti8ubQ;dact2Jfficult,m,sGverF;ge1se;creGePjoi1paCtF;a1inA;et,te; Nadp0WceMfiLgeneCliJmuEpeIreliAsGvoF;id,ut;pFtitu2ul1L;eCoF;nde1;ca2ghF;tf13;a1ni2;as0;facto;i5ngero0I;ar0Ce09h07i06l05oOrIuF;rmudgeon5stoma4teF;sy;ly;aIeHu1EystalF; cleFli7;ar;epy;fFv17z0;ty;erUgTloSmPnGrpoCunterclVveFy;rt;cLdJgr21jIsHtrF;aFi2;dic0Yry;eq1Yta1;oi1ug3;escenFuN;di8;a1QeFiD;it0;atoDmensuCpF;ass1SulF;so4;ni3ss3;e1niza1;ci1J;ockwiD;rcumspeAvil;eFintzy;e4wy;leGrtaF;in;ba2;diac,ef00;a00ePiLliJoGrFuck nak0;and new,isk,on22;gGldface,naF; fi05fi05;us;nd,tF;he;gGpartisFzarE;an;tiF;me;autifOhiNlLnHsFyoN;iWtselF;li8;eGiFt;gn;aFfi03;th;at0oF;v0w;nd;ul;ckwards,rF;e,rT; priori,b13c0Zd0Tf0Ng0Ihe0Hl09mp6nt06pZrTsQttracti0MuLvIwF;aGkF;wa1B;ke,re;ant garGeraF;ge;de;diIsteEtF;heFoimmu7;nt07;re;to4;hGlFtu2;eep;en;bitIchiv3roHtF;ifiFsy;ci3;ga1;ra4;ry;pFt;aHetizi8rF;oprF;ia2;llFre1;ed,i8;ng;iquFsy;at0e;ed;cohKiJkaHl,oGriFterX;ght;ne,of;li7;ne;ke,ve;olF;ic;ad;ain07gressiIi6rF;eeF;ab6;le;ve;fGraB;id;ectGlF;ue1;ioF;na2; JaIeGvF;erD;pt,qF;ua2;ma1;hoc,infinitum;cuCquiGtu3u2;al;esce1;ra2;erSjeAlPoNrKsGuF;nda1;e1olu2trF;aAuD;se;te;eaGuF;pt;st;aFve;rd;aFe;ze;ct;ra1;nt",
  "Pronoun": "true¦elle,h3i2me,she,th0us,we,you;e0ou;e,m,y;!l,t;e,im",
  "Preposition": "true¦aPbMcLdKexcept,fIinGmid,notwithstandiWoDpXqua,sCt7u4v2w0;/o,hereSith0;! whHin,oW;ersus,i0;a,s a vis;n1p0;!on;like,til;h1ill,oward0;!s;an,ereby,r0;ough0u;!oM;ans,ince,o that,uch G;f1n0ut;!to;!f;! 0to;effect,part;or,r0;om;espite,own,u3;hez,irca;ar1e0oBy;sides,tween;ri7;bo8cross,ft7lo6m4propos,round,s1t0;!op;! 0;a whole,long 0;as;id0ong0;!st;ng;er;ut",
  "SportsTeam": "true¦0:18;1:1E;2:1D;3:14;a1Db15c0Sd0Kfc dallas,g0Ihouston 0Hindiana0Gjacksonville jagua0k0El0Am01new UoRpKqueens parkJreal salt lake,sBt6utah jazz,vancouver whitecaps,w4yW;ashington 4h10;natio1Mredski2wizar0W;ampa bay 7e6o4;ronto 4ttenham hotspur;blue ja0Mrapto0;nnessee tita2xasD;buccanee0ra0K;a8eattle 6porting kansas0Wt4; louis 4oke0V;c1Drams;marine0s4;eah13ounH;cramento Rn 4;antonio spu0diego 4francisco gJjose earthquak1;char08paB; ran07;a9h6ittsburgh 5ortland t4;imbe0rail blaze0;pirat1steele0;il4oenix su2;adelphia 4li1;eagl1philNunE;dr1;akland 4klahoma city thunder,rlando magic;athle0Lrai4;de0;england 8orleans 7york 4;g5je3knYme3red bul0Xy4;anke1;ian3;pelica2sain3;patrio3revolut4;ion;anchEeAi4ontreal impact;ami 8lwaukee b7nnesota 4;t5vi4;kings;imberwolv1wi2;rewe0uc0J;dolphi2heat,marli2;mphis grizz4ts;li1;a6eic5os angeles 4;clippe0dodFlaB;esterV; galaxy,ke0;ansas city 4nF;chiefs,roya0D; pace0polis col3;astr05dynamo,rocke3texa2;olden state warrio0reen bay pac4;ke0;allas 8e4i04od6;nver 6troit 4;lio2pisto2ti4;ge0;broncYnugge3;cowbo5maver4;icZ;ys;arEelLhAincinnati 8leveland 6ol4;orado r4umbus crew sc;api7ocki1;brow2cavalie0guar4in4;dia2;bengaVre4;ds;arlotte horAicago 4;b5cubs,fire,wh4;iteB;ea0ulQ;diff4olina panthe0; city;altimore Alackburn rove0oston 6rooklyn 4uffalo bilN;ne3;ts;cel5red4; sox;tics;rs;oriol1rave2;rizona Ast8tlanta 4;brav1falco2h4;awA;ns;es;on villa,r4;os;c6di4;amondbac4;ks;ardi4;na4;ls",
  "Unit": "true¦a07b04cXdWexVfTgRhePinYjoule0BkMlJmDnan08oCp9quart0Bsq ft,t7volts,w6y2ze3°1µ0;g,s;c,f,n;dVear1o0;ttR; 0s 0;old;att,b;erNon0;!ne02;ascals,e1i0;cXnt00;rcent,tJ;hms,unceY;/s,e4i0m²,²,³;/h,cro2l0;e0liK;!²;grLsR;gCtJ;it1u0;menQx;erPreP;b5elvins,ilo1m0notO;/h,ph,²;!byGgrEmCs;ct0rtzL;aJogrC;allonJb0ig3rB;ps;a0emtEl oz,t4;hrenheit,radG;aby9;eci3m1;aratDe1m0oulombD;²,³;lsius,nti0;gr2lit1m0;et0;er8;am7;b1y0;te5;l,ps;c2tt0;os0;econd1;re0;!s",
  "Noun|Gerund": "true¦0:3O;1:3M;2:3N;3:3D;4:32;5:2V;6:3E;7:3K;8:36;9:3J;A:3B;a3Pb37c2Jd27e23f1Vg1Sh1Mi1Ij1Gk1Dl18m13n11o0Wp0Pques0Sr0EsTtNunderMvKwFyDzB;eroi0oB;ni0o3P;aw2eB;ar2l3;aEed4hispe5i5oCrB;ap8est3i1;n0ErB;ki0r31;i1r2s9tc9;isualizi0oB;lunt1Vti0;stan4ta6;aFeDhin6iCraBy8;c6di0i2vel1M;mi0p8;aBs1;c9si0;l6n2s1;aUcReQhOiMkatKl2Wmo6nowJpeItFuCwB;ea5im37;b35f0FrB;fi0vB;e2Mi2J;aAoryt1KrCuB;d2KfS;etc9ugg3;l3n4;bCi0;ebBi0;oar4;gnBnAt1;a3i0;ip8oB;p8rte2u1;a1r27t1;hCo5reBulp1;a2Qe2;edu3oo3;i3yi0;aKeEi4oCuB;li0n2;oBwi0;fi0;aFcEhear7laxi0nDpor1sB;pon4tructB;r2Iu5;de5;or4yc3;di0so2;p8ti0;aFeacek20laEoCrBublis9;a1Teten4in1oces7;iso2siB;tio2;n2yi0;ckaAin1rB;ki0t1O;fEpeDrganiCvB;erco24ula1;si0zi0;ni0ra1;fe5;avi0QeBur7;gotia1twor6;aDeCi2oB;de3nito5;a2dita1e1ssaA;int0XnBrke1;ifUufactu5;aEeaDiBodAyi0;cen7f1mi1stB;e2i0;r2si0;n4ug9;iCnB;ea4it1;c6l3;ogAuB;dAgg3stif12;ci0llust0VmDnBro2;nova1sp0NterBven1;ac1vie02;agi2plo4;aDea1iCoBun1;l4w3;ki0ri0;nd3rB;roWvB;es1;aCene0Lli4rBui4;ee1ie0N;rde2the5;aHeGiDlCorBros1un4;e0Pmat1;ir1oo4;gh1lCnBs9;anZdi0;i0li0;e3nX;r0Zscina1;a1du01nCxB;erci7plo5;chan1di0ginB;ee5;aLeHiGoub1rCum8wB;el3;aDeCiB;bb3n6vi0;a0Qs7;wi0;rTscoDvi0;ba1coZlBvelo8;eCiB;ve5;ga1;nGti0;aVelebUhSlPoDrBur3yc3;aBos7yi0;f1w3;aLdi0lJmFnBo6pi0ve5;dDsCvinB;ci0;trBul1;uc1;muniDpB;lBo7;ai2;ca1;lBo5;ec1;c9ti0;ap8eaCimToBubT;ni0t9;ni0ri0;aBee5;n1t1;ra1;m8rCs1te5;ri0;vi0;aPeNitMlLoGrDuB;dge1il4llBr8;yi0;an4eat9oadB;cas1;di0;a1mEokB;i0kB;ee8;pi0;bi0;es7oa1;c9i0;gin2lonAt1;gi0;bysit1c6ki0tt3;li0;ki0;bando2cGdverti7gi0pproac9rgDssuCtB;trac1;mi0;ui0;hi0;si0;coun1ti0;ti0;ni0;ng",
  "PhrasalVerb": "true¦0:92;1:96;2:8H;3:8V;4:8A;5:83;6:85;7:98;8:90;9:8G;A:8X;B:8R;C:8U;D:8S;E:70;F:97;G:8Y;H:81;I:7H;J:79;a9Fb7Uc6Rd6Le6Jf5Ig50h4Biron0j47k40l3Em31n2Yo2Wp2Cquiet Hr1Xs0KtZuXvacuu6QwNyammerBzK;ero Dip LonK;e0k0;by,ov9up;aQeMhLiKor0Mrit19;mp0n3Fpe0r5s5;ackAeel Di0S;aLiKn33;gh 3Wrd0;n Dr K;do1in,oJ;it 79k5lk Lrm 69sh Kt83v60;aw3do1o7up;aw3in,oC;rgeBsK;e 2herE;a00eYhViRoQrMuKypP;ckErn K;do1in,oJup;aLiKot0y 30;ckl7Zp F;ck HdK;e 5Y;n7Wp 3Es5K;ck MdLe Kghten 6me0p o0Rre0;aw3ba4do1in,up;e Iy 2;by,oG;ink Lrow K;aw3ba4in,up;ba4ov9up;aKe 77ll62;m 2r 5M;ckBke Llk K;ov9shit,u47;aKba4do1in,leave,o4Dup;ba4ft9pa69w3;a0Vc0Te0Mh0Ii0Fl09m08n07o06p01quar5GtQuOwK;earMiK;ngLtch K;aw3ba4o8K; by;cKi6Bm 2ss0;k 64;aReQiPoNrKud35;aigh2Det75iK;ke 7Sng K;al6Yup;p Krm2F;by,in,oG;c3Ln3Lr 2tc4O;p F;c3Jmp0nd LrKveAy 2O;e Ht 2L;ba4do1up;ar3GeNiMlLrKurB;ead0ingBuc5;a49it 6H;c5ll o3Cn 2;ak Fe1Xll0;a3Bber 2rt0und like;ap 5Vow Duggl5;ash 6Noke0;eep NiKow 6;cLp K;o6Dup;e 68;in,oK;ff,v9;de19gn 4NnKt 6Gz5;gKkE; al6Ale0;aMoKu5W;ot Kut0w 7M;aw3ba4f48oC;c2WdeEk6EveA;e Pll1Nnd Orv5tK; Ktl5J;do1foLin,o7upK;!on;ot,r5Z;aw3ba4do1in,o33up;oCto;al66out0rK;ap65ew 6J;ilAv5;aXeUiSoOuK;b 5Yle0n Kstl5;aLba4do1inKo2Ith4Nu5P;!to;c2Xr8w3;ll Mot LpeAuK;g3Ind17;a2Wf3Po7;ar8in,o7up;ng 68p oKs5;ff,p18;aKelAinEnt0;c6Hd K;o4Dup;c27t0;aZeYiWlToQrOsyc35uK;ll Mn5Kt K;aKba4do1in,oJto47up;pa4Dw3;a3Jdo1in,o21to45up;attleBess KiNop 2;ah2Fon;iLp Kr4Zu1Gwer 6N;do1in,o6Nup;nt0;aLuK;gEmp 6;ce u20y 6D;ck Kg0le 4An 6p5B;oJup;el 5NncilE;c53ir 39n0ss MtLy K;ba4oG; Hc2R;aw3ba4in,oJ;pKw4Y;e4Xt D;aLerd0oK;dAt53;il Hrrow H;aTeQiPoLuK;ddl5ll I;c1FnkeyMp 6uthAve K;aKdo1in,o4Lup;l4Nw3; wi4K;ss0x 2;asur5e3SlLss K;a21up;t 6;ke Ln 6rKs2Ax0;k 6ryA;do,fun,oCsure,up;a02eViQoLuK;ck0st I;aNc4Fg MoKse0;k Kse4D;aft9ba4do1forw37in56o0Zu46;in,oJ;d 6;e NghtMnLsKve 00;ten F;e 2k 2; 2e46;ar8do1in;aMt LvelK; oC;do1go,in,o7up;nEve K;in,oK;pKut;en;c5p 2sh LtchBughAy K;do1o59;in4Po7;eMick Lnock K;do1oCup;oCup;eLy K;in,up;l Ip K;aw3ba4do1f04in,oJto,up;aMoLuK;ic5mpE;ke3St H;c43zz 2;a01eWiToPuK;nLrrKsh 6;y 2;keLt K;ar8do1;r H;lKneErse3K;d Ke 2;ba4dKfast,o0Cup;ear,o1;de Lt K;ba4on,up;aw3o7;aKlp0;d Ml Ir Kt 2;fKof;rom;f11in,o03uW;cPm 2nLsh0ve Kz2P;at,it,to;d Lg KkerP;do1in,o2Tup;do1in,oK;ut,v9;k 2;aZeTive Rloss IoMrLunK; f0S;ab hold,in43ow 2U; Kof 2I;aMb1Mit,oLr8th1IuK;nd9;ff,n,v9;bo7ft9hQw3;aw3bKdo1in,oJrise,up,w3;a4ir2H;ar 6ek0t K;aLb1Fdo1in,oKr8up;ff,n,ut,v9;cLhKl2Fr8t,w3;ead;ross;d aKng 2;bo7;a0Ee07iYlUoQrMuK;ck Ke2N;ar8up;eLighten KownBy 2;aw3oG;eKshe27; 2z5;g 2lMol Krk I;aKwi20;bo7r8;d 6low 2;aLeKip0;sh0;g 6ke0mKrKtten H;e F;gRlPnNrLsKzzle0;h F;e Km 2;aw3ba4up;d0isK;h 2;e Kl 1T;aw3fPin,o7;ht ba4ure0;ePnLsK;s 2;cMd K;fKoG;or;e D;d04l 2;cNll Krm0t1G;aLbKdo1in,o09sho0Eth08victim;a4ehi2O;pa0C;e K;do1oGup;at Kdge0nd 12y5;in,o7up;aOi1HoNrK;aLess 6op KuN;aw3b03in,oC;gBwB; Ile0ubl1B;m 2;a0Ah05l02oOrLut K;aw3ba4do1oCup;ackBeep LoKy0;ss Dwd0;by,do1in,o0Uup;me NoLuntK; o2A;k 6l K;do1oG;aRbQforOin,oNtKu0O;hLoKrue;geth9;rough;ff,ut,v9;th,wK;ard;a4y;paKr8w3;rt;eaLose K;in,oCup;n 6r F;aNeLiK;ll0pE;ck Der Kw F;on,up;t 2;lRncel0rOsMtch LveE; in;o1Nup;h Dt K;doubt,oG;ry LvK;e 08;aw3oJ;l Km H;aLba4do1oJup;ff,n,ut;r8w3;a0Ve0MiteAl0Fo04rQuK;bblNckl05il0Dlk 6ndl05rLsKtMy FzzA;t 00;n 0HsK;t D;e I;ov9;anWeaUiLush K;oGup;ghQng K;aNba4do1forMin,oLuK;nd9p;n,ut;th;bo7lKr8w3;ong;teK;n 2;k K;do1in,o7up;ch0;arTg 6iRn5oPrNssMttlLunce Kx D;aw3ba4;e 6; ar8;e H;do1;k Dt 2;e 2;l 6;do1up;d 2;aPeed0oKurt0;cMw K;aw3ba4do1o7up;ck;k K;in,oC;ck0nk0stA; oQaNef 2lt0nd K;do1ov9up;er;up;r Lt K;do1in,oCup;do1o7;ff,nK;to;ck Pil0nMrgLsK;h D;ainBe D;g DkB; on;in,o7;aw3do1in,oCup;ff,ut;ay;ct FdQir0sk MuctionA; oG;ff;ar8o7;ouK;nd; o7;d K;do1oKup;ff,n;wn;o7up;ut",
  "ProperNoun": "true¦aIbDc8dalhousHe7f5gosford,h4iron maiden,kirby,landsdowne,m2nis,r1s0wembF;herwood,paldiB;iel,othwe1;cgi0ercedes,issy;ll;intBudsB;airview,lorence,ra0;mpt9nco;lmo,uro;a1h0;arlt6es5risti;rl0talina;et4i0;ng;arb3e0;et1nt0rke0;ley;on;ie;bid,jax",
  "Person|Place": "true¦a8d6h4jordan,k3orlando,s1vi0;ctor9rgin9;a0ydney;lvador,mara,ntia4;ent,obe;amil0ous0;ton;arw2ie0;go;lexandr1ust0;in;ia",
  "LastName": "true¦0:BR;1:BF;2:B5;3:BH;4:AX;5:9Y;6:B6;7:BK;8:B0;9:AV;A:AL;B:8Q;C:8G;D:7K;E:BM;F:AH;aBDb9Zc8Wd88e81f7Kg6Wh64i60j5Lk4Vl4Dm39n2Wo2Op25quispe,r1Ls0Pt0Ev03wTxSyKzG;aIhGimmerm6A;aGou,u;ng,o;khar5ytsE;aKeun9BiHoGun;koya32shiBU;!lG;diGmaz;rim,z;maGng;da,g52mo83sGzaC;aChiBV;iao,u;aLeJiHoGright,u;jcA5lff,ng;lGmm0nkl0sniewsC;kiB1liams33s3;bGiss,lt0;b,er,st0;a6Vgn0lHtG;anabe,s3;k0sh,tG;e2Non;aLeKiHoGukD;gt,lk5roby5;dHllalGnogr3Kr1Css0val3S;ba,ob1W;al,ov4;lasHsel8W;lJn dIrgBEsHzG;qu7;ilyEqu7siljE;en b6Aijk,yk;enzueAIverde;aPeix1VhKi2j8ka43oJrIsui,uG;om5UrG;c2n0un1;an,emblA7ynisC;dorAMlst3Km4rrAth;atch0i8UoG;mHrG;are84laci79;ps3sG;en,on;hirDkah9Mnaka,te,varA;a06ch01eYhUiRmOoMtIuHvGzabo;en9Jobod3N;ar7bot4lliv2zuC;aIeHoG;i7Bj4AyanAB;ele,in2FpheBvens25;l8rm0;kol5lovy5re7Tsa,to,uG;ng,sa;iGy72;rn5tG;!h;l71mHnGrbu;at9cla9Egh;moBo7M;aIeGimizu;hu,vchG;en8Luk;la,r1G;gu9infe5YmGoh,pulveA7rra5P;jGyG;on5;evi6iltz,miHneid0roed0uGwarz;be3Elz;dHtG;!t,z;!t;ar4Th8ito,ka4OlJnGr4saCto,unde19v4;ch7dHtGz;a5Le,os;b53e16;as,ihDm4Po0Y;aVeSiPoJuHyG;a6oo,u;bio,iz,sG;so,u;bKc8Fdrigue67ge10j9YmJosevelt,sItHux,wG;e,li6;a9Ch;enb4Usi;a54e4L;erts15i93;bei4JcHes,vGzzo;as,e9;ci,hards12;ag2es,iHut0yG;es,nol5N;s,t0;dImHnGsmu97v6C;tan1;ir7os;ic,u;aUeOhMiJoHrGut8;asad,if6Zochazk27;lishc2GpGrti72u10we76;e3Aov51;cHe45nG;as,to;as70hl0;aGillips;k,m,n6I;a3Hde3Wete0Bna,rJtG;ersHrovGters54;!a,ic;!en,on;eGic,kiBss3;i9ra,tz,z;h86k,padopoulIrk0tHvG;ic,l4N;el,te39;os;bMconn2Ag2TlJnei6PrHsbor6XweBzG;dem7Rturk;ella4DtGwe6N;ega,iz;iGof7Hs8I;vGyn1R;ei9;aSri1;aPeNiJoGune50ym2;rHvGwak;ak4Qik5otn66;odahl,r4S;cholsZeHkolGls4Jx3;ic,ov84;ls1miG;!n1;ils3mG;co4Xec;gy,kaGray2sh,var38;jiGmu9shiG;ma;a07c04eZiWoMuHyeG;rs;lJnIrGssoli6S;atGp03r7C;i,ov4;oz,te58;d0l0;h2lOnNo0RrHsGza1A;er,s;aKeJiIoz5risHtG;e56on;!on;!n7K;au,i9no,t5J;!lA;r1Btgome59;i3El0;cracFhhail5kkeHlG;l0os64;ls1;hmeJiIj30lHn3Krci0ssiGyer2N;!er;n0Po;er,j0;dDti;cartHlG;aughl8e2;hy;dQe7Egnu68i0jer3TkPmNnMrItHyG;er,r;ei,ic,su21thews;iHkDquAroqu8tinG;ez,s;a5Xc,nG;!o;ci5Vn;a5UmG;ad5;ar5e6Kin1;rig77s1;aVeOiLoJuHyG;!nch;k4nGo;d,gu;mbarGpe3Fvr4we;di;!nGu,yana2B;coln,dG;b21holm,strom;bedEfeKhIitn0kaHn8rGw35;oy;!j;m11tG;in1on1;bvGvG;re;iGmmy,ng,rs2Qu,voie,ws3;ne,t1F;aZeYh2iWlUnez50oNrJuHvar2woG;k,n;cerGmar68znets5;a,o34;aHem0isGyeziu;h23t3O;m0sni4Fus3KvG;ch4O;bay57ch,rh0Usk16vaIwalGzl5;czGsC;yk;cIlG;!cGen4K;huk;!ev4ic,s;e8uiveG;rt;eff0kGl4mu9nnun1;ucF;ll0nnedy;hn,llKminsCne,pIrHstra3Qto,ur,yGzl5;a,s0;j0Rls22;l2oG;or;oe;aPenOha6im14oHuG;ng,r4;e32hInHrge32u6vG;anD;es,ss3;anHnsG;en,on,t3;nesGs1R;en,s1;kiBnings,s1;cJkob4EnGrv0E;kDsG;en,sG;en0Ion;ks3obs2A;brahimDglesi5Nke5Fl0Qno07oneIshikHto,vanoG;u,v54;awa;scu;aVeOiNjaltal8oIrist50uG;!aGb0ghAynh;m2ng;a6dz4fIjgaa3Hk,lHpUrGwe,x3X;ak1Gvat;mAt;er,fm3WmG;ann;ggiBtchcock;iJmingw4BnHrGss;nand7re9;deGriks1;rs3;kkiHnG;on1;la,n1;dz4g1lvoQmOns0ZqNrMsJuIwHyG;asFes;kiB;g1ng;anHhiG;mo14;i,ov0J;di6p0r10t;ue;alaG;in1;rs1;aVeorgUheorghe,iSjonRoLrJuGw3;errGnnar3Co,staf3Ctierr7zm2;a,eG;ro;ayli6ee2Lg4iffithGub0;!s;lIme0UnHodGrbachE;e,m2;calvAzale0S;dGubE;bGs0E;erg;aj,i;bs3l,mGordaO;en7;iev3U;gnMlJmaIndFo,rGsFuthi0;cGdn0za;ia;ge;eaHlG;agh0i,o;no;e,on;aVerQiLjeldsted,lKoIrHuG;chs,entAji41ll0;eem2iedm2;ntaGrt8urni0wl0;na;emi6orA;lipIsHtzgeraG;ld;ch0h0;ovG;!ic;hatDnanIrG;arGei9;a,i;deY;ov4;b0rre1D;dKinsJriksIsGvaB;cob3GpGtra3D;inoza,osiQ;en,s3;te8;er,is3warG;ds;aXePiNjurhuMoKrisco15uHvorakG;!oT;arte,boHmitru,nn,rGt3C;and,ic;is;g2he0Omingu7nErd1ItG;to;us;aGcki2Hmitr2Ossanayake,x3;s,z; JbnaIlHmirGrvisFvi,w2;!ov4;gado,ic;th;bo0groot,jo6lHsilGvriA;va;a cruz,e3uG;ca;hl,mcevsCnIt2WviG;dGes,s;ov,s3;ielsGku22;!en;ki;a0Be06hRiobQlarkPoIrGunningh1H;awfo0RivGuz;elli;h1lKntJoIrGs2Nx;byn,reG;a,ia;ke,p0;i,rer2K;em2liB;ns;!e;anu;aOeMiu,oIristGu6we;eGiaG;ns1;i,ng,p9uHwGy;!dH;dGng;huJ;!n,onGu6;!g;kJnIpm2ttHudhGv7;ry;erjee,o14;!d,g;ma,raboG;rty;bJl0Cng4rG;eghetHnG;a,y;ti;an,ota1C;cerAlder3mpbeLrIstGvadi0B;iGro;llo;doHl0Er,t0uGvalho;so;so,zo;ll;a0Fe01hYiXlUoNrKuIyG;rLtyG;qi;chan2rG;ke,ns;ank5iem,oGyant;oks,wG;ne;gdan5nIruya,su,uchaHyKziG;c,n5;rd;darGik;enG;ko;ov;aGond15;nco,zG;ev4;ancFshw16;a08oGuiy2;umGwmG;ik;ckRethov1gu,ktPnNrG;gJisInG;ascoGds1;ni;ha;er,mG;anG;!n;gtGit7nP;ss3;asF;hi;er,hG;am;b4ch,ez,hRiley,kk0ldw8nMrIshHtAu0;es;ir;bInHtlGua;ett;es,i0;ieYosa;dGik;a9yoG;padhyG;ay;ra;k,ng;ic;bb0Acos09d07g04kht05lZnPrLsl2tJyG;aHd8;in;la;chis3kiG;ns3;aImstro6sl2;an;ng;ujo,ya;dJgelHsaG;ri;ovG;!a;ersJov,reG;aGjEws;ss1;en;en,on,s3;on;eksejEiyEmeiIvG;ar7es;ez;da;ev;arwHuilG;ar;al;ams,l0;er;ta;as",
  "Ordinal": "true¦eBf7nin5s3t0zeroE;enDhir1we0;lfCn7;d,t3;e0ixt8;cond,vent7;et0th;e6ie7;i2o0;r0urt3;tie4;ft1rst;ight0lev1;e0h,ie1;en0;th",
  "Cardinal": "true¦bEeBf5mEnine7one,s4t0zero;en,h2rDw0;e0o;lve,n5;irt6ousands,ree;even2ix2;i3o0;r1ur0;!t2;ty;ft0ve;e2y;ight0lev1;!e0y;en;illions",
  "Multiple": "true¦b3hundred,m3qu2se1t0;housand,r2;pt1xt1;adr0int0;illion",
  "City": "true¦0:74;1:61;2:6G;3:6J;4:5S;a68b53c4Id48e44f3Wg3Hh39i31j2Wk2Fl23m1Mn1Co19p0Wq0Ur0Os05tRuQvLwDxiBy9z5;a7h5i4Muri4O;a5e5ongsh0;ng3H;greb,nzib5G;ang2e5okoha3Sunfu;katerin3Hrev0;a5n0Q;m5Hn;arsBeAi6roclBu5;h0xi,zh5P;c7n5;d5nipeg,terth4;hoek,s1L;hi5Zkl3A;l63xford;aw;a8e6i5ladivost5Molgogr6L;en3lni6S;ni22r5;o3saill4N;lenc4Wncouv3Sr3ughn;lan bat1Crumqi,trecht;aFbilisi,eEheDiBo9r7u5;l21n63r5;in,ku;i5ondh62;es51poli;kyo,m2Zron1Pulo5;n,uS;an5jua3l2Tmisoa6Bra3;j4Tshui; hag62ssaloni2H;gucigal26hr0l av1U;briz,i6llinn,mpe56ng5rtu,shk2R;i3Esh0;an,chu1n0p2Eyu0;aEeDh8kopje,owe1Gt7u5;ra5zh4X;ba0Ht;aten is55ockholm,rasbou67uttga2V;an8e6i5;jiazhua1llo1m5Xy0;f50n5;ya1zh4H;gh3Kt4Q;att45o1Vv44;cramen16int ClBn5o paulo,ppo3Rrajevo; 7aa,t5;a 5o domin3E;a3fe,m1M;antonio,die3Cfrancisco,j5ped3Nsalvad0J;o5u0;se;em,t lake ci5Fz25;lou58peters24;a9e8i6o5;me,t59;ga,o5yadh;! de janei3F;cife,ims,nn3Jykjavik;b4Sip4lei2Inc2Pwalpindi;ingdao,u5;ez2i0Q;aFeEhDiCo9r7u6yong5;ya1;eb59ya1;a5etor3M;g52to;rt5zn0; 5la4Co;au prin0Melizabe24sa03;ls3Prae5Atts26;iladelph3Gnom pe1Aoenix;ki1tah tik3E;dua,lerYnaji,r4Ot5;na,r32;ak44des0Km1Mr6s5ttawa;a3Vlo;an,d06;a7ew5ing2Fovosibir1Jyc; 5cast36;del24orlea44taip14;g8iro4Wn5pl2Wshv33v0;ch6ji1t5;es,o1;a1o1;a6o5p4;ya;no,sa0W;aEeCi9o6u5;mb2Ani26sc3Y;gadishu,nt6s5;c13ul;evideo,pelli1Rre2Z;ami,l6n14s5;kolc,sissauga;an,waukee;cca,d5lbour2Mmph41ndo1Cssi3;an,ell2Xi3;cau,drAkass2Sl9n8r5shh4A;aca6ib5rakesh,se2L;or;i1Sy;a4EchFdal0Zi47;mo;id;aDeAi8o6u5vSy2;anMckn0Odhia3;n5s angel26;d2g bea1N;brev2Be3Lma5nz,sb2verpo28;!ss27; ma39i5;c5pzig;est16; p6g5ho2Wn0Cusan24;os;az,la33;aHharFiClaipeBo9rak0Du7y5;iv,o5;to;ala lump4n5;mi1sh0;hi0Hlka2Xpavog4si5wlo2;ce;da;ev,n5rkuk;gst2sha5;sa;k5toum;iv;bHdu3llakuric0Qmpa3Fn6ohsiu1ra5un1Iwaguc0Q;c0Pj;d5o,p4;ah1Ty;a7e6i5ohannesV;l1Vn0;dd36rusalem;ip4k5;ar2H;bad0mph1OnArkutUs7taXz5;mir,tapala5;pa;fah0l6tanb5;ul;am2Zi2H;che2d5;ianap2Mo20;aAe7o5yder2W; chi mi5ms,nolulu;nh;f6lsin5rakli2;ki;ei;ifa,lifax,mCn5rb1Dva3;g8nov01oi;aFdanEenDhCiPlasgBo9raz,u5;a5jr23;dal6ng5yaquil;zh1J;aja2Oupe;ld coa1Bthen5;bu2S;ow;ent;e0Uoa;sk;lw7n5za;dhi5gt1E;nag0U;ay;aisal29es,o8r6ukuya5;ma;ankfu5esno;rt;rt5sh0; wor6ale5;za;th;d5indhov0Pl paso;in5mont2;bur5;gh;aBe8ha0Xisp4o7resd0Lu5;b5esseldorf,nkirk,rb0shanbe;ai,l0I;ha,nggu0rtmu13;hradSl6nv5troit;er;hi;donghIe6k09l5masc1Zr es sala1KugavpiY;i0lU;gu,je2;aJebu,hAleve0Vo5raio02uriti1Q;lo7n6penhag0Ar5;do1Ok;akKst0V;gUm5;bo;aBen8i6ongqi1ristchur5;ch;ang m7ca5ttago1;go;g6n5;ai;du,zho1;ng5ttogr14;ch8sha,zh07;gliari,i9lga8mayenJn6pe town,r5tanO;acCdiff;ber1Ac5;un;ry;ro;aWeNhKirmingh0WoJr9u5;chareTdapeTenos air7r5s0tu0;g5sa;as;es;a9is6usse5;ls;ba6t5;ol;ne;sil8tisla7zzav5;il5;le;va;ia;goZst2;op6ubaneshw5;ar;al;iCl9ng8r5;g6l5n;in;en;aluru,hazi;fa6grade,o horizon5;te;st;ji1rut;ghd0BkFn9ot8r7s6yan n4;ur;el,r07;celo3i,ranquil09;ou;du1g6ja lu5;ka;alo6k5;ok;re;ng;ers5u;field;a05b02cc01ddis aba00gartaZhmedXizawl,lSmPnHqa00rEsBt7uck5;la5;nd;he7l5;an5;ta;ns;h5unci2;dod,gab5;at;li5;ngt2;on;a8c5kaOtwerp;hora6o3;na;ge;h7p5;ol5;is;eim;aravati,m0s5;terd5;am; 7buquerq6eppo,giers,ma5;ty;ue;basrah al qadim5mawsil al jadid5;ah;ab5;ad;la;ba;ra;idj0u dha5;bi;an;lbo6rh5;us;rg",
  "Region": "true¦0:2O;1:2L;2:2U;3:2F;a2Sb2Fc21d1Wes1Vf1Tg1Oh1Ki1Fj1Bk16l13m0Sn09o07pYqVrSsJtEuBverAw6y4zacatec2W;akut0o0Fu4;cat1k09;a5est 4isconsin,yomi1O;bengal,virgin0;rwick3shington4;! dc;acruz,mont;dmurt0t4;ah,tar4; 2Pa12;a6e5laxca1Vripu21u4;scaEva;langa2nnessee,x2J;bas10m4smQtar29;aulip2Hil nadu;a9elang07i7o5taf16u4ylh1J;ff02rr09s1E;me1Gno1Uuth 4;cZdY;ber0c4kkim,naloa;hu1ily;n5rawak,skatchew1xo4;ny; luis potosi,ta catari2;a4hodeA;j4ngp0C;asth1shahi;ingh29u4;e4intana roo;bec,en6retaro;aAe6rince edward4unjab; i4;sl0G;i,n5r4;ak,nambu0F;a0Rnsylv4;an0;ha0Pra4;!na;axa0Zdisha,h4klaho21ntar4reg7ss0Dx0I;io;aLeEo6u4;evo le4nav0X;on;r4tt18va scot0;f9mandy,th4; 4ampton3;c6d5yo4;rk3;ako1O;aroli2;olk;bras1Nva0Dw4; 6foundland4;! and labrad4;or;brunswick,hamp3jers5mexiTyork4;! state;ey;galPyarit;aAeghala0Mi6o4;nta2r4;dov0elos;ch6dlanDn5ss4zor11;issippi,ouri;as geraPneso18;ig1oac1;dhy12harasht0Gine,lac07ni5r4ssachusetts;anhao,i el,ylG;p4toba;ur;anca3e4incoln3ouisI;e4iR;ds;a6e5h4omi;aka06ul2;dah,lant1ntucky,ra01;bardino,lmyk0ns0Qr4;achay,el0nata0X;alis6har4iangxi;kh4;and;co;daho,llino7n4owa;d5gush4;et0;ia2;is;a6ert5i4un1;dalFm0D;ford3;mp3rya2waii;ansu,eorg0lou7oa,u4;an4izhou,jarat;ajuato,gdo4;ng;cester3;lori4uji1;da;sex;ageUe7o5uran4;go;rs4;et;lawaMrby3;aFeaEh9o4rim08umbr0;ahui7l6nnectic5rsi4ventry;ca;ut;i03orado;la;e5hattisgarh,i4uvash0;apRhuahua;chn5rke4;ss0;ya;ra;lGm4;bridge3peche;a9ihar,r8u4;ck4ryat0;ingham3;shi4;re;emen,itish columb0;h0ja cal8lk7s4v7;hkorto4que;st1;an;ar0;iforn0;ia;dygHguascalientes,lBndhr9r5ss4;am;izo2kans5un4;achal 7;as;na;a 4;pradesh;a6ber5t4;ai;ta;ba5s4;ka;ma;ea",
  "Place": "true¦0:4T;1:4V;2:44;3:4B;4:3I;a4Eb3Gc2Td2Ge26f25g1Vh1Ji1Fk1Cl14m0Vn0No0Jp08r04sTtNuLvJw7y5;a5o0Syz;kut1Bngtze;aDeChitBi9o5upatki,ycom2P;ki26o5;d5l1B;b3Ps5;i4to3Y;c0SllowbroCn5;c2Qgh2;by,chur1P;ed0ntw3Gs22;ke6r3St5;erf1f1; is0Gf3V;auxha3Mirgin is0Jost5;ok;laanbaatar,pto5xb3E;n,wn;a9eotihuac43h7ive49o6ru2Nsarskoe selo,u5;l2Dzigo47;nto,rquay,tt2J;am3e 5orn3E;bronx,hamptons;hiti,j mah0Iu1N;aEcotts bluff,eCfo,herbroQoApring9t7u5yd2F;dbu1Wn5;der03set3B;aff1ock2Nr5;atf1oud;hi37w24;ho,uth5; 1Iam1Zwo3E;a5i2O;f2Tt0;int lawrence riv3Pkhal2D;ayleigh,ed7i5oc1Z;chmo1Eo gran4ver5;be1Dfr09si4; s39cliffe,hi2Y;aCe9h8i5ompeii,utn2;c6ne5tcai2T; 2Pc0G;keri13t0;l,x;k,lh2mbr6n5r2J;n1Hzance;oke;cif38pahanaumokuak30r5;k5then0;si4w1K;ak7r6x5;f1l2X;ange county,d,f1inoco;mTw1G;e8i1Uo5;r5tt2N;th5wi0E; 0Sam19;uschwanste1Pw5; eng6a5h2market,po36;rk;la0P;a8co,e6i5uc;dt1Yll0Z;adow5ko0H;lands;chu picchu,gad2Ridsto1Ql8n7ple6r5;kh2; g1Cw11;hatt2Osf2B;ibu,t0ve1Z;a8e7gw,hr,in5owlOynd02;coln memori5dl2C;al;asi4w3;kefr7mbe1On5s,x;ca2Ig5si05;f1l27t0;ont;azan kreml14e6itchen2Gosrae,rasnoyar5ul;sk;ns0Hs1U;ax,cn,lf1n6ps5st;wiN;d5glew0Lverness;ian27ochina;aDeBi6kg,nd,ov5unti2H;d,enweep;gh6llc5;reL;bu03l5;and5;!s;r5yw0C;ef1tf1;libu24mp6r5stings;f1lem,row;stead,t0;aDodavari,r5uelph;avenAe5imsS;at 8en5; 6f1Fwi5;ch;acr3vall1H;brita0Flak3;hur5;st;ng3y villa0W;airhavHco,ra;aAgli9nf17ppi8u7ver6x5;et1Lf1;glad3t0;rope,st0;ng;nt0;rls1Ls5;t 5;e5si4;nd;aCe9fw,ig8o7ryd6u5xb;mfri3nstab00rh2tt0;en;nca18rcKv19wnt0B;by;n6r5vonpo1D;ry;!h2;nu8r5;l6t5;f1moor;ingt0;be;aLdg,eIgk,hClBo5royd0;l6m5rnwa0B;pt0;c7lingw6osse5;um;ood;he0S;earwat0St;a8el6i5uuk;chen itza,mney ro07natSricahua;m0Zt5;enh2;mor5rlottetPth2;ro;dar 5ntervilA;breaks,faZg5;rove;ld9m8r5versh2;lis6rizo pla5;in;le;bLpbellf1;weQ;aZcn,eNingl01kk,lackLolt0r5uckV;aGiAo5;ckt0ok5wns cany0;lyn,s5;i4to5;ne;de;dge6gh5;am,t0;n6t5;own;or5;th;ceb6m5;lNpt0;rid5;ge;bu5pool,wa8;rn;aconsfEdf1lBr9verly7x5;hi5;ll; hi5;lls;wi5;ck; air,l5;ingh2;am;ie5;ld;ltimore,rnsl6tters5;ea;ey;bLct0driadic,frica,ginJlGmFn9rc8s7tl6yleOzor3;es;!ant8;hcroft,ia; de triomphe,t6;adyr,ca8dov9tarct5;ic5; oce5;an;st5;er;ericas,s;be6dersh5hambra,list0;ot;rt0;cou5;rt;bot7i5;ngd0;on;sf1;ord",
  "Country": "true¦0:38;1:2L;2:3B;a2Xb2Ec22d1Ye1Sf1Mg1Ch1Ai14j12k0Zl0Um0Gn05om2pZqat1KrXsKtCu7v5wal4yemTz3;a25imbabwe;es,lis and futu2Y;a3enezue32ietnam;nuatu,tican city;gTk6nited 4ruXs3zbeE; 2Ca,sr;arab emirat0Kkingdom,states3;! of am2Y;!raiV;a8haCimor les0Co7rinidad 5u3;nis0rk3valu;ey,me2Zs and caic1V;and t3t3;oba1L;go,kel10nga;iw2ji3nz2T;ki2V;aDcotl1eCi9lov8o6pa2Dri lanka,u5w3yr0;az3edAitzerl1;il1;d2riname;lomon1Xmal0uth 3;afr2KkMsud2;ak0en0;erra leoFn3;gapo1Yt maart3;en;negLrb0ychellZ;int 3moa,n marino,udi arab0;hele26luc0mart21;epublic of ir0Eom2Euss0w3;an27;a4eIhilippinUitcairn1Mo3uerto riN;l1rtugF;ki2Dl4nama,pua new0Vra3;gu7;au,esti3;ne;aBe9i7or3;folk1Ith4w3;ay; k3ern mariana1D;or0O;caragua,ger3ue;!ia;p3ther1Aw zeal1;al;mib0u3;ru;a7exi6icro0Bo3yanm06;ldova,n3roc5zambA;a4gol0t3;enegro,serrat;co;cAdagasc01l7r5urit4yot3;te;an0i16;shall0Xtin3;ique;a4div3i,ta;es;wi,ys0;ao,ed02;a6e5i3uxembourg;b3echtenste12thu1G;er0ya;ban0Isotho;os,tv0;azakh1Fe4iriba04o3uwait,yrgyz1F;rXsovo;eling0Knya;a3erG;ma16p2;c7nd6r4s3taly,vory coast;le of m2rael;a3el1;n,q;ia,oJ;el1;aiTon3ungary;dur0Ng kong;aBermany,ha0QibraltAre8u3;a6ern5inea3ya0P;! biss3;au;sey;deloupe,m,tema0Q;e3na0N;ce,nl1;ar;bUmb0;a7i6r3;ance,ench 3;guia0Epoly3;nes0;ji,nl1;lklandUroeU;ast tim7cu6gypt,l salv6ngl1quatorial4ritr5st3thiop0;on0; guin3;ea;ad3;or;enmark,jibou5ominica4r con3;go;!n C;ti;aBentral african Ah8o5roat0u4yprRzech3; 9ia;ba,racao;c4lo3morQngo brazzaville,okGsta r04te de ivoiL;mb0;osE;i3ristmasG;le,na;republic;m3naUpe verde,ymanA;bod0ero3;on;aGeDhut2o9r5u3;lgar0r3;kina faso,ma,undi;azil,itish 3unei;virgin3; is3;lands;liv0nai5snia and herzegoviHtswaHuvet3; isl1;and;re;l3n8rmuG;ar3gium,ize;us;h4ngladesh,rbad3;os;am4ra3;in;as;fghaGlDmBn6r4ustr3zerbaij2;al0ia;genti3men0uba;na;dorra,g5t3;arct7igua and barbu3;da;o3uil3;la;er3;ica;b3ger0;an0;ia;ni3;st2;an",
  "FirstName": "true¦aTblair,cQdOfrancoZgabMhinaLilya,jHkClBm6ni4quinn,re3s0;h0umit,yd;ay,e0iloh;a,lby;g9ne;co,ko0;!s;a1el0ina,org6;!okuhF;ds,naia,r1tt0xiB;i,y;ion,lo;ashawn,eif,uca;a3e1ir0rM;an;lsFn0rry;dall,yat5;i,sD;a0essIie,ude;i1m0;ie,mG;me;ta;rie0y;le;arcy,ev0;an,on;as1h0;arl8eyenne;ey,sidy;drien,kira,l4nd1ubr0vi;ey;i,r0;a,e0;a,y;ex2f1o0;is;ie;ei,is",
  "WeekDay": "true¦fri2mon2s1t0wednesd3;hurs1ues1;aturd1und1;!d0;ay0;!s",
  "Month": "true¦dec0february,july,nov0octo1sept0;em0;ber",
  "Date": "true¦ago,on4som4t1week0yesterd5; end,ends;mr1o0;d2morrow;!w;ed0;ay",
  "Duration": "true¦centurAd8h7m5q4se3w1y0;ear8r8;eek0k7;!end,s;ason,c5;tr,uarter;i0onth3;llisecond2nute2;our1r1;ay0ecade0;!s;ies,y",
  "FemaleName": "true¦0:J7;1:JB;2:IJ;3:IK;4:J1;5:IO;6:JS;7:JO;8:HB;9:JK;A:H4;B:I2;C:IT;D:JH;E:IX;F:BA;G:I4;aGTbFLcDRdD0eBMfB4gADh9Ti9Gj8Dk7Cl5Wm48n3Lo3Hp33qu32r29s15t0Eu0Cv02wVxiTyOzH;aLeIineb,oHsof3;e3Sf3la,ra;h2iKlIna,ynH;ab,ep;da,ma;da,h2iHra;nab;aKeJi0FolB7uIvH;et8onDP;i0na;le0sen3;el,gm3Hn,rGLs8W;aoHme0nyi;m5XyAD;aMendDZhiDGiH;dele9lJnH;if48niHo0;e,f47;a,helmi0lHma;a,ow;ka0nB;aNeKiHusa5;ck84kIl8oleAviH;anFenJ4;ky,toriBK;da,lA8rHs0;a,nHoniH9;a,iFR;leHnesH9;nILrH;i1y;g9rHs6xHA;su5te;aYeUhRiNoLrIuHy2;i,la;acJ3iHu0J;c3na,sH;hFta;nHr0F;iFya;aJffaEOnHs6;a,gtiH;ng;!nFSra;aIeHomasi0;a,l9Oo8Ares1;l3ndolwethu;g9Fo88rIssH;!a,ie;eHi,ri7;sa,za;bOlMmKnIrHs6tia0wa0;a60yn;iHya;a,ka,s6;arFe2iHm77ra;!ka;a,iH;a,t6;at6it6;a0Ecarlett,e0AhWiSkye,neza0oQri,tNuIyH;bIGlvi1;ha,mayIJniAsIzH;an3Net8ie,y;anHi7;!a,e,nH;aCe;aIeH;fan4l5Dphan6E;cI5r5;b3fiAAm0LnHphi1;d2ia,ja,ya;er2lJmon1nIobh8QtH;a,i;dy;lETv3;aMeIirHo0risFDy5;a,lDM;ba,e0i5lJrH;iHr6Jyl;!d8Ifa;ia,lDZ;hd,iMki2nJrIu0w0yH;la,ma,na;i,le9on,ron,yn;aIda,ia,nHon;a,on;!ya;k6mH;!aa;lJrItaye82vH;da,inj;e0ife;en1i0ma;anA9bLd5Oh1SiBkKlJmInd2rHs6vannaC;aCi0;ant6i2;lDOma,ome;ee0in8Tu2;in1ri0;a05eZhXiUoHuthDM;bScRghQl8LnPsJwIxH;anB3ie,y;an,e0;aIeHie,lD;ann7ll1marDGtA;!lHnn1;iHyn;e,nH;a,dF;da,i,na;ayy8G;hel67io;bDRerAyn;a,cIkHmas,nFta,ya;ki,o;h8Xki;ea,iannGMoH;da,n1P;an0bJemFgi0iInHta,y0;a8Bee;han86na;a,eH;cHkaC;a,ca;bi0chIe,i0mo0nHquETy0;di,ia;aERelHiB;!e,le;een4ia0;aPeOhMiLoJrHute6A;iHudenCV;scil3LyamvaB;lHrt3;i0ly;a,paluk;ilome0oebe,ylH;is,lis;ggy,nelope,r5t2;ige,m0VnKo5rvaDMtIulH;a,et8in1;ricHt4T;a,e,ia;do2i07;ctav3dIfD3is6ksa0lHphD3umC5yunbileg;a,ga,iv3;eHvAF;l3t8;aWeUiMoIurHy5;!ay,ul;a,eJor,rIuH;f,r;aCeEma;ll1mi;aNcLhariBQkKlaJna,sHta,vi;anHha;ur;!y;a,iDZki;hoGk9YolH;a,e4P;!mh;hir,lHna,risDEsreE;!a,lBV;asuMdLh3i6Dl5nKomi7rgEVtH;aHhal4;lHs6;i1ya;cy,et8;e9iF0ya;nngu2X;a0Ackenz4e02iMoJrignayani,uriDJyH;a,rH;a,iOlNna,tG;bi0i2llBJnH;a,iH;ca,ka,qD9;a,cUdo4ZkaTlOmi,nMrItzi,yH;ar;aJiIlH;anET;am;!l,nB;dy,eHh,n4;nhGrva;aKdJe0iCUlH;iHy;cent,e;red;!gros;!e5;ae5hH;ae5el3Z;ag5DgNi,lKrH;edi7AiIjem,on,yH;em,l;em,sCG;an4iHliCF;nHsCJ;a,da;!an,han;b09cASd07e,g05ha,i04ja,l02n00rLsoum5YtKuIv84xBKyHz4;bell,ra,soBB;d7rH;a,eE;h8Gild1t4;a,cUgQiKjor4l7Un4s6tJwa,yH;!aHbe6Xja9lAE;m,nBL;a,ha,in1;!aJbCGeIja,lDna,sHt63;!a,ol,sa;!l1D;!h,mInH;!a,e,n1;!awit,i;arJeIie,oHr48ueri8;!t;!ry;et46i3B;el4Xi7Cy;dHon,ue5;akranAy;ak,en,iHlo3S;a,ka,nB;a,re,s4te;daHg4;!l3E;alDd4elHge,isDJon0;ei9in1yn;el,le;a0Ne0CiXoQuLyH;d3la,nH;!a,dIe2OnHsCT;!a,e2N;a,sCR;aD4cJel0Pis1lIna,pHz;e,iA;a,u,wa;iHy;a0Se,ja,l2NnB;is,l1UrItt1LuHvel4;el5is1;aKeIi7na,rH;aADi7;lHn1tA;ei;!in1;aTbb9HdSepa,lNnKsJvIzH;!a,be5Ret8z4;!ia;a,et8;!a,dH;a,sHy;ay,ey,i,y;a,iJja,lH;iHy;aA8e;!aH;!nF;ia,ya;!nH;!a,ne;aPda,e0iNjYla,nMoKsJtHx93y5;iHt4;c3t3;e2PlCO;la,nHra;a,ie,o2;a,or1;a,gh,laH;!ni;!h,nH;a,d2e,n5V;cOdon9DiNkes6mi9Gna,rMtJurIvHxmi,y5;ern1in3;a,e5Aie,yn;as6iIoH;nya,ya;fa,s6;a,isA9;a,la;ey,ie,y;a04eZhXiOlASoNrJyH;lHra;a,ee,ie;istHy6I;a,en,iIyH;!na;!e,n5F;nul,ri,urtnB8;aOerNlB7mJrHzzy;a,stH;en,in;!berlImernH;aq;eHi,y;e,y;a,stE;!na,ra;aHei2ongordzol;dij1w5;el7UiKjsi,lJnIrH;a,i,ri;d2na,za;ey,i,lBLs4y;ra,s6;biAcARdiat7MeBAiSlQmPnyakuma1DrNss6NtKviAyH;!e,lH;a,eH;e,i8T;!a6HeIhHi4TlDri0y;ar8Her8Hie,leErBAy;!lyn8Ori0;a,en,iHl5Xoli0yn;!ma,nFs95;a5il1;ei8Mi,lH;e,ie;a,tl6O;a0AeZiWoOuH;anMdLlHst88;es,iH;a8NeHs8X;!n9tH;!a,te;e5Mi3My;a,iA;!anNcelDdMelGhan7VleLni,sIva0yH;a,ce;eHie;fHlDph7Y;a,in1;en,n1;i7y;!a,e,n45;lHng;!i1DlH;!i1C;anNle0nKrJsH;i8JsH;!e,i8I;i,ri;!a,elGif2CnH;a,et8iHy;!e,f2A;a,eJiInH;a,eIiH;e,n1;!t8;cMda,mi,nIque4YsminFvie2y9zH;min7;a7eIiH;ce,e,n1s;!lHs82t0F;e,le;inIk6HlDquelH;in1yn;da,ta;da,lRmPnOo0rNsIvaHwo0zaro;!a0lu,na;aJiIlaHob89;!n9R;do2;belHdo2;!a,e,l3B;a7Ben1i0ma;di2es,gr72ji;a9elBogH;en1;a,e9iHo0se;a0na;aSeOiJoHus7Kyacin2C;da,ll4rten24snH;a,i9U;lImaH;ri;aIdHlaI;a,egard;ry;ath1BiJlInrietArmi9sH;sa,t1A;en2Uga,mi;di;bi2Fil8MlNnMrJsItHwa,yl8M;i5Tt4;n60ti;iHmo51ri53;etH;!te;aCnaC;a,ey,l4;a02eWiRlPoNrKunJwH;enHyne1R;!dolD;ay,el;acieIetHiselB;a,chE;!la;ld1CogooH;sh;adys,enHor3yn2K;a,da,na;aKgi,lIna,ov8EselHta;a,e,le;da,liH;an;!n0;mLnJorgIrH;ald5Si,m3Etrud7;et8i4X;a,eHna;s29vieve;ma;bIle,mHrnet,yG;al5Si5;iIrielH;a,l1;!ja;aTeQiPlorOoz3rH;anJeIiH;da,eB;da,ja;!cH;esIiHoi0P;n1s66;!ca;a,enc3;en,o0;lIn0rnH;anB;ec3ic3;jr,nArKtHy7;emIiHma,oumaA;ha,ma,n;eh;ah,iBrah,za0;cr4Rd0Re0Qi0Pk0Ol07mXn54rUsOtNuMvHwa;aKelIiH;!e,ta;inFyn;!a;!ngel4V;geni1ni47;h5Yien9ta;mLperanKtH;eIhHrel5;er;l31r7;za;a,eralB;iHma,ne4Lyn;cHka,n;a,ka;aPeNiKmH;aHe21ie,y;!li9nuH;elG;lHn1;e7iHy;a,e,ja;lHrald;da,y;!nue5;aWeUiNlMma,no2oKsJvH;a,iH;na,ra;a,ie;iHuiH;se;a,en,ie,y;a0c3da,e,f,nMsJzaH;!betHveA;e,h;aHe,ka;!beH;th;!a,or;anor,nH;!a,i;!in1na;ate1Rta;leEs6;vi;eIiHna,wi0;e,th;l,n;aYeMh3iLjeneKoH;lor5Vminiq4Ln3FrHtt4;a,eEis,la,othHthy;ea,y;ba;an09naCon9ya;anQbPde,eOiMlJmetr3nHsir5M;a,iH;ce,se;a,iIla,orHphi9;es,is;a,l6F;dHrdH;re;!d5Ena;!b2ForaCraC;a,d2nH;!a,e;hl3i0l0GmNnLphn1rIvi1WyH;le,na;a,by,cIia,lH;a,en1;ey,ie;a,et8iH;!ca,el1Aka,z;arHia;is;a0Re0Nh04i02lUoJristIynH;di,th3;al,i0;lPnMrIurH;tn1D;aJd2OiHn2Ori9;!nH;a,e,n1;!l4;cepci5Cn4sH;tanHuelo;ce,za;eHleE;en,t8;aJeoIotH;il54;!pat2;ir7rJudH;et8iH;a,ne;a,e,iH;ce,sZ;a2er2ndH;i,y;aReNloe,rH;isJyH;stH;al;sy,tH;a1Sen,iHy;an1e,n1;deJlseIrH;!i7yl;a,y;li9;nMrH;isKlImH;ai9;a,eHot8;n1t8;!sa;d2elGtH;al,elG;cIlH;es8i47;el3ilH;e,ia,y;itlYlXmilWndVrMsKtHy5;aIeIhHri0;er1IleErDy;ri0;a38sH;a37ie;a,iOlLmeJolIrH;ie,ol;!e,in1yn;lHn;!a,la;a,eIie,otHy;a,ta;ne,y;na,s1X;a0Ii0I;a,e,l1;isAl4;in,yn;a0Ke02iZlXoUrH;andi7eRiJoIyH;an0nn;nwDoke;an3HdgMgiLtH;n31tH;!aInH;ey,i,y;ny;d,t8;etH;!t7;an0e,nH;da,na;bbi7glarIlo07nH;iAn4;ka;ancHythe;a,he;an1Clja0nHsm3M;iAtH;ou;aWcVlinUniArPssOtJulaCvH;!erlH;ey,y;hJsy,tH;e,iHy7;e,na;!anH;ie,y;!ie;nItHyl;ha,ie;adIiH;ce;et8i9;ay,da;ca,ky;!triH;ce,z;rbJyaH;rmH;aa;a2o2ra;a2Ub2Od25g21i1Sj5l18m0Zn0Boi,r06sWtVuPvOwa,yIzH;ra,u0;aKes6gJlIn,seH;!l;in;un;!nH;a,na;a,i2K;drLguJrIsteH;ja;el3;stH;in1;a,ey,i,y;aahua,he0;hIi2Gja,miAs2DtrH;id;aMlIraqHt21;at;eIi7yH;!n;e,iHy;gh;!nH;ti;iJleIo6piA;ta;en,n1t8;aHelG;!n1J;a01dje5eZgViTjRnKohito,toHya;inet8nH;el5ia;te;!aKeIiHmJ;e,ka;!mHtt7;ar4;!belIliHmU;sa;!l1;a,eliH;ca;ka,sHta;a,sa;elHie;a,iH;a,ca,n1qH;ue;!tH;a,te;!bImHstasiMya;ar3;el;aLberKeliJiHy;e,l3naH;!ta;a,ja;!ly;hGiIl3nB;da;a,ra;le;aWba,ePiMlKthJyH;a,c3sH;a,on,sa;ea;iHys0N;e,s0M;a,cIn1sHza;a,e,ha,on,sa;e,ia,ja;c3is6jaKksaKna,sJxH;aHia;!nd2;ia,saH;nd2;ra;ia;i0nIyH;ah,na;a,is,naCoud;la;c6da,leEmNnLsH;haClH;inHyY;g,n;!h;a,o,slH;ey;ee;en;at6g4nIusH;ti0;es;ie;aWdiTelMrH;eJiH;anMenH;a,e,ne;an0;na;!aLeKiIyH;nn;a,n1;a,e;!ne;!iH;de;e,lDsH;on;yn;!lH;i9yn;ne;aKbIiHrL;!e,gaK;ey,i7y;!e;gaH;il;dKliyJradhIs6;ha;ya;ah;a,ya",
  "Honorific": "true¦director1field marsh2lieutenant1rear0sergeant major,vice0; admir1; gener0;al",
  "Adj|Gerund": "true¦0:3F;1:3H;2:31;3:2X;4:35;5:33;6:3C;7:2Z;8:36;9:29;a33b2Tc2Bd1Te1If19g12h0Zi0Rl0Nm0Gnu0Fo0Ap04rYsKtEuBvAw1Ayiel3;ar6e08;nBpA;l1Rs0B;fol3n1Zsett2;aEeDhrBi4ouc7rAwis0;e0Bif2oub2us0yi1;ea1SiA;l2vi1;l2mp0rr1J;nt1Vxi1;aMcreec7enten2NhLkyrocke0lo0Vmi2oJpHtDuBweA;e0Ul2;pp2ArA;gi1pri5roun3;aBea8iAri2Hun9;mula0r4;gge4rA;t2vi1;ark2eAraw2;e3llb2F;aAot7;ki1ri1;i9oc29;dYtisf6;aEeBive0oAus7;a4l2;assu4defi9fres7ig9juve07mai9s0vAwar3;ea2italiAol1G;si1zi1;gi1ll6mb2vi1;a6eDier23lun1VrAun2C;eBoA;mi5vo1Z;ce3s5vai2;n3rpleA;xi1;ffCpWutBverAwi1;arc7lap04p0Pri3whel8;goi1l6st1J;en3sA;et0;m2Jrtu4;aEeDiCoBuAyst0L;mb2;t1Jvi1;s5tiga0;an1Rl0n3smeri26;dAtu4;de9;aCeaBiAo0U;fesa0Tvi1;di1ni1;c1Fg19s0;llumiGmFnArri0R;cDfurHsCtBviA;go23ti1;e1Oimi21oxica0rig0V;pi4ul0;orpo20r0K;po5;na0;eaBorr02umilA;ia0;li1rtwar8;lFrA;atiDipCoBuelA;i1li1;undbrea10wi1;pi1;f6ng;a4ea8;a3etc7it0lEoCrBulfA;il2;ee1FighXust1L;rAun3;ebo3thco8;aCoA;a0wA;e4i1;mi1tte4;lectrJmHnExA;aCci0hBis0pA;an3lo3;aOila1B;c0spe1A;ab2coura0CdBergi13ga0Clive9ric7s02tA;hral2i0J;ea4u4;barras5er09pA;owe4;if6;aQeIiBrA;if0;sAzz6;aEgDhearCsen0tA;rAur11;ac0es5;te9;us0;ppoin0r8;biliGcDfi9gra3ligh0mBpres5sAvasG;erE;an3ea9orA;ali0L;a6eiBli9rA;ea5;vi1;ta0;maPri1s7un0zz2;aPhMlo5oAripp2ut0;mGnArrespon3;cer9fDspi4tA;inBrA;as0ibu0ol2;ui1;lic0u5;ni1;fDmCpA;eAromi5;l2ti1;an3;or0;aAil2;llenAnAr8;gi1;l8ptAri1;iva0;aff2eGin3lFoDrBuA;d3st2;eathtaAui5;ki1;gg2i2o8ri1unA;ci1;in3;co8wiA;lAtc7;de4;bsorVcOgonMlJmHnno6ppea2rFsA;pi4su4toA;nBun3;di1;is7;hi1;res0;li1;aFu5;si1;ar8lu4;ri1;mi1;iAzi1;zi1;cAhi1;eleDomA;moBpan6;yi1;da0;ra0;ti1;bi1;ng",
  "Comparable": "true¦0:3C;1:3Q;2:3F;a3Tb3Cc33d2Te2Mf2Ag1Wh1Li1Fj1Ek1Bl13m0Xn0So0Rp0Iqu0Gr07sHtCug0vAw4y3za0Q;el10ouN;ary,e6hi5i3ry;ck0Cde,l3n1ry,se;d,y;ny,te;a3i3R;k,ry;a3erda2ulgar;gue,in,st;a6en2Xhi5i4ouZr3;anqu2Cen1ue;dy,g36me0ny;ck,rs28;ll,me,rt,wd3I;aRcaPeOhMiLkin0BlImGoEpDt6u4w3;eet,ift;b3dd0Wperfi21rre28;sta26t21;a8e7iff,r4u3;pUr1;a4ict,o3;ng;ig2Vn0N;a1ep,rn;le,rk,te0;e1Si2Vright0;ci1Yft,l3on,re;emn,id;a3el0;ll,rt;e4i3y;g2Mm0Z;ek,nd2T;ck24l0mp1L;a3iRrill,y;dy,l01rp;ve0Jxy;n1Jr3;ce,y;d,fe,int0l1Hv0V;a8e6i5o3ude;mantic,o19sy,u3;gh;pe,t1P;a3d,mo0A;dy,l;gg4iFndom,p3re,w;id;ed;ai2i3;ck,et;hoAi1Fl9o8r5u3;ny,r3;e,p11;egna2ic4o3;fouSud;ey,k0;liXor;ain,easa2;ny;dd,i0ld,ranL;aive,e5i4o3u14;b0Sisy,rm0Ysy;bb0ce,mb0R;a3r1w;r,t;ad,e5ild,o4u3;nda12te;ist,o1;a4ek,l3;low;s0ty;a8e7i6o3ucky;f0Jn4o15u3ve0w10y0N;d,sy;e0g;ke0l,mp,tt0Eve0;e1Qwd;me,r3te;ge;e4i3;nd;en;ol0ui19;cy,ll,n3;secu6t3;e3ima4;llege2rmedia3;te;re;aAe7i6o5u3;ge,m3ng1C;bYid;me0t;gh,l0;a3fXsita2;dy,rWv3;en0y;nd13ppy,r3;d3sh;!y;aFenEhCiBlAoofy,r3;a8e6i5o3ue0Z;o3ss;vy;m,s0;at,e3y;dy,n;nd,y;ad,ib,ooD;a2d1;a3o3;st0;tDuiS;u1y;aCeebBi9l8o6r5u3;ll,n3r0N;!ny;aCesh,iend0;a3nd,rmD;my;at,ir7;erce,nan3;ci9;le;r,ul3;ty;a6erie,sse4v3xtre0B;il;nti3;al;r4s3;tern,y;ly,th0;appZe9i5ru4u3;mb;nk;r5vi4z3;zy;ne;e,ty;a3ep,n9;d3f,r;!ly;agey,h8l7o5r4u3;dd0r0te;isp,uel;ar3ld,mmon,st0ward0zy;se;evKou1;e3il0;ap,e3;sy;aHiFlCoAr5u3;ff,r0sy;ly;a6i3oad;g4llia2;nt;ht;sh,ve;ld,un3;cy;a4o3ue;nd,o1;ck,nd;g,tt3;er;d,ld,w1;dy;bsu6ng5we3;so3;me;ry;rd",
  "Adverb": "true¦a08b05d00eYfSheQinPjustOkinda,likewiZmMnJoEpCquite,r9s5t2u0very,well;ltima01p0; to,wards5;h1iny bit,o0wiO;o,t6;en,us;eldom,o0uch;!me1rt0; of;how,times,w0C;a1e0;alS;ndomRth05;ar excellenEer0oint blank; Lhaps;f3n0utright;ce0ly;! 0;ag05moX; courGten;ewJo0; longWt 0;onHwithstand9;aybe,eanwhiNore0;!ovT;! aboX;deed,steY;lla,n0;ce;or3u0;ck1l9rther0;!moK;ing; 0evK;exampCgood,suH;n mas0vI;se;e0irect2; 2fini0;te0;ly;juAtrop;ackward,y 0;far,no0; means,w; GbroFd nauseam,gEl7ny5part,s4t 2w0;ay,hi0;le;be7l0mo7wor7;arge,ea6; soon,i4;mo0way;re;l 3mo2ongsi1ready,so,togeth0ways;er;de;st;b1t0;hat;ut;ain;ad;lot,posteriori",
  "Conjunction": "true¦aXbTcReNhowMiEjust00noBo9p8supposing,t5wh0yet;e1il0o3;e,st;n1re0thN; if,by,vM;evL;h0il,o;erefOo0;!uU;lus,rovided th9;r0therwiM;! not; mattEr,w0;! 0;since,th4w7;f4n0; 0asmuch;as mIcaForder t0;h0o;at;! 0;only,t0w0;hen;!ev3;ith2ven0;! 0;if,tB;er;o0uz;s,z;e0ut,y the time;cau1f0;ore;se;lt3nd,s 0;far1if,m0soon1t2;uch0; as;hou0;gh",
  "Currency": "true¦$,aud,bQcOdJeurIfHgbp,hkd,iGjpy,kElDp8r7s3usd,x2y1z0¢,£,¥,ден,лв,руб,฿,₡,₨,€,₭,﷼;lotyQł;en,uanP;af,of;h0t5;e0il5;k0q0;elK;oubleJp,upeeJ;e2ound st0;er0;lingG;n0soF;ceEnies;empi7i7;n,r0wanzaCyatC;!onaBw;ls,nr;ori7ranc9;!os;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;e0ny;nt1;aht,itcoin0;!s",
  "Determiner": "true¦aBboth,d9e6few,le5mu8neiDplenty,s4th2various,wh0;at0ich0;evC;a0e4is,ose;!t;everal,ome;!ast,s;a1l0very;!se;ch;e0u;!s;!n0;!o0y;th0;er",
  "Adj|Present": "true¦a07b04cVdQeNfJhollIidRlEmCnarrIoBp9qua8r7s3t2uttFw0;aKet,ro0;ng,u08;endChin;e2hort,l1mooth,our,pa9tray,u0;re,speU;i2ow;cu6da02leSpaN;eplica01i02;ck;aHerfePr0;eseUime,omV;bscu1pen,wn;atu0e3odeH;re;a2e1ive,ow0;er;an;st,y;ow;a2i1oul,r0;ee,inge;rm;iIke,ncy,st;l1mpty,x0;emHpress;abo4ic7;amp,e2i1oub0ry,ull;le;ffu9re6;fu8libe0;raE;alm,l5o0;mpleCn3ol,rr1unterfe0;it;e0u7;ct;juga8sum7;ea1o0;se;n,r;ankru1lu0;nt;pt;li2pproxi0rticula1;ma0;te;ght",
  "Person|Adj": "true¦b3du2earnest,frank,mi2r0san1woo1;an0ich,u1;dy;sty;ella,rown",
  "Modal": "true¦c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to,a;ight,ust;an,o0;uld",
  "Verb": "true¦born,cannot,gonna,has,keep tabs,msg",
  "Person|Verb": "true¦b8ch7dr6foster,gra5ja9lan4ma2ni9ollie,p1rob,s0wade;kip,pike,t5ue;at,eg,ier2;ck,r0;k,shal;ce;ce,nt;ew;ase,u1;iff,l1ob,u0;ck;aze,ossom",
  "Person|Date": "true¦a2j0sep;an0une;!uary;p0ugust,v0;ril"
};
},{}],"node_modules/efrt/src/pack/fns.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var commonPrefix = function commonPrefix(w1, w2) {
  var len = Math.min(w1.length, w2.length);
  while (len > 0) {
    var prefix = w1.slice(0, len);
    if (prefix === w2.slice(0, len)) {
      return prefix;
    }
    len -= 1;
  }
  return '';
};

/* Sort elements and remove duplicates from array (modified in place) */
var unique = function unique(a) {
  a.sort();
  for (var i = 1; i < a.length; i++) {
    if (a[i - 1] === a[i]) {
      a.splice(i, 1);
    }
  }
};
var _default = exports.default = {
  commonPrefix: commonPrefix,
  unique: unique
};
},{}],"node_modules/efrt/src/pack/histogram.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var Histogram = function Histogram() {
  this.counts = {};
};
var methods = {
  init: function init(sym) {
    if (this.counts[sym] === undefined) {
      this.counts[sym] = 0;
    }
  },
  add: function add(sym, n) {
    if (n === undefined) {
      n = 1;
    }
    this.init(sym);
    this.counts[sym] += n;
  },
  countOf: function countOf(sym) {
    this.init(sym);
    return this.counts[sym];
  },
  highest: function highest(top) {
    var sorted = [];
    var keys = Object.keys(this.counts);
    for (var i = 0; i < keys.length; i++) {
      var sym = keys[i];
      sorted.push([sym, this.counts[sym]]);
    }
    sorted.sort(function (a, b) {
      return b[1] - a[1];
    });
    if (top) {
      sorted = sorted.slice(0, top);
    }
    return sorted;
  }
};
Object.keys(methods).forEach(function (k) {
  Histogram.prototype[k] = methods[k];
});
var _default = exports.default = Histogram;
},{}],"node_modules/efrt/src/encoding.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var BASE = 36;
var seq = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var cache = seq.split('').reduce(function (h, c, i) {
  h[c] = i;
  return h;
}, {});

// 0, 1, 2, ..., A, B, C, ..., 00, 01, ... AA, AB, AC, ..., AAA, AAB, ...
var toAlphaCode = function toAlphaCode(n) {
  if (seq[n] !== undefined) {
    return seq[n];
  }
  var places = 1;
  var range = BASE;
  var s = '';
  for (; n >= range; n -= range, places++, range *= BASE) {}
  while (places--) {
    var d = n % BASE;
    s = String.fromCharCode((d < 10 ? 48 : 55) + d) + s;
    n = (n - d) / BASE;
  }
  return s;
};
var fromAlphaCode = function fromAlphaCode(s) {
  if (cache[s] !== undefined) {
    return cache[s];
  }
  var n = 0;
  var places = 1;
  var range = BASE;
  var pow = 1;
  for (; places < s.length; n += range, places++, range *= BASE) {}
  for (var i = s.length - 1; i >= 0; i--, pow *= BASE) {
    var d = s.charCodeAt(i) - 48;
    if (d > 10) {
      d -= 7;
    }
    n += d * pow;
  }
  return n;
};
var _default = exports.default = {
  toAlphaCode: toAlphaCode,
  fromAlphaCode: fromAlphaCode
};
},{}],"node_modules/efrt/src/pack/pack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _histogram = _interopRequireDefault(require("./histogram.js"));
var _encoding = _interopRequireDefault(require("../encoding.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var config = {
  NODE_SEP: ';',
  KEY_VAL: ':',
  STRING_SEP: ',',
  TERMINAL_PREFIX: '!',
  BASE: 36
};
// Return packed representation of Trie as a string.
// Return packed representation of Trie as a string.
//
// Each node of the Trie is output on a single line.
//
// For example Trie("the them there thesis this"):
// {
//    "th": {
//      "is": 1,
//      "e": {
//        "": 1,
//        "m": 1,
//        "re": 1,
//        "sis": 1
//      }
//    }
//  }
//
// Would be reperesented as:
//
// th0
// e0is
// !m,re,sis
//
// The line begins with a '!' iff it is a terminal node of the Trie.
// For each string property in a node, the string is listed, along
// with a (relative!) line number of the node that string references.
// Terminal strings (those without child node references) are
// separated by ',' characters.
var nodeLine = function nodeLine(self, node) {
  var line = '',
    sep = '';
  if (self.isTerminal(node)) {
    line += config.TERMINAL_PREFIX;
  }
  var props = self.nodeProps(node);
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    if (typeof node[prop] === 'number') {
      line += sep + prop;
      sep = config.STRING_SEP;
      continue;
    }
    if (self.syms[node[prop]._n]) {
      line += sep + prop + self.syms[node[prop]._n];
      sep = '';
      continue;
    }
    var ref = _encoding.default.toAlphaCode(node._n - node[prop]._n - 1 + self.symCount);
    // Large reference to smaller string suffix -> duplicate suffix
    if (node[prop]._g && ref.length >= node[prop]._g.length && node[node[prop]._g] === 1) {
      ref = node[prop]._g;
      line += sep + prop + ref;
      sep = config.STRING_SEP;
      continue;
    }
    line += sep + prop + ref;
    sep = '';
  }
  return line;
};
var _analyzeRefs = function analyzeRefs(self, node) {
  if (self.visited(node)) {
    return;
  }
  var props = self.nodeProps(node, true);
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var ref = node._n - node[prop]._n - 1;
    // Count the number of single-character relative refs
    if (ref < config.BASE) {
      self.histRel.add(ref);
    }
    // Count the number of characters saved by converting an absolute
    // reference to a one-character symbol.
    self.histAbs.add(node[prop]._n, _encoding.default.toAlphaCode(ref).length - 1);
    _analyzeRefs(self, node[prop]);
  }
};
var symbolCount = function symbolCount(self) {
  self.histAbs = self.histAbs.highest(config.BASE);
  var savings = [];
  savings[-1] = 0;
  var best = 0,
    sCount = 0;
  var defSize = 3 + _encoding.default.toAlphaCode(self.nodeCount).length;
  for (var sym = 0; sym < config.BASE; sym++) {
    if (self.histAbs[sym] === undefined) {
      break;
    }
    savings[sym] = self.histAbs[sym][1] - defSize - self.histRel.countOf(config.BASE - sym - 1) + savings[sym - 1];
    if (savings[sym] >= best) {
      best = savings[sym];
      sCount = sym + 1;
    }
  }
  return sCount;
};
var _numberNodes = function numberNodes(self, node) {
  // Topological sort into nodes array
  if (node._n !== undefined) {
    return;
  }
  var props = self.nodeProps(node, true);
  for (var i = 0; i < props.length; i++) {
    _numberNodes(self, node[props[i]]); //recursive
  }
  node._n = self.pos++;
  self.nodes.unshift(node);
};
var pack = function pack(self) {
  self.nodes = [];
  self.nodeCount = 0;
  self.syms = {};
  self.symCount = 0;
  self.pos = 0;
  // Make sure we've combined all the common suffixes
  self.optimize();
  self.histAbs = new _histogram.default();
  self.histRel = new _histogram.default();
  _numberNodes(self, self.root);
  self.nodeCount = self.nodes.length;
  self.prepDFS();
  _analyzeRefs(self, self.root);
  self.symCount = symbolCount(self);
  for (var sym = 0; sym < self.symCount; sym++) {
    self.syms[self.histAbs[sym][0]] = _encoding.default.toAlphaCode(sym);
  }
  for (var i = 0; i < self.nodeCount; i++) {
    self.nodes[i] = nodeLine(self, self.nodes[i]);
  }
  // Prepend symbols
  for (var _sym = self.symCount - 1; _sym >= 0; _sym--) {
    self.nodes.unshift(_encoding.default.toAlphaCode(_sym) + config.KEY_VAL + _encoding.default.toAlphaCode(self.nodeCount - self.histAbs[_sym][0] - 1));
  }
  return self.nodes.join(config.NODE_SEP);
};
var _default = exports.default = pack;
},{"./histogram.js":"node_modules/efrt/src/pack/histogram.js","../encoding.js":"node_modules/efrt/src/encoding.js"}],"node_modules/efrt/src/pack/methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fns = _interopRequireDefault(require("./fns.js"));
var _pack2 = _interopRequireDefault(require("./pack.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var NOT_ALLOWED = new RegExp('[0-9A-Z,;!:|¦]'); //characters banned from entering the trie
// reserved propery names
var internal = {
  _d: true,
  _v: true,
  _c: true,
  _g: true,
  _n: true
};
var methods = {
  // Insert words from one big string, or from an array.
  insertWords: function insertWords(words) {
    if (words === undefined) {
      return;
    }
    if (typeof words === 'string') {
      words = words.split(/[^a-zA-Z]+/);
    }
    for (var i = 0; i < words.length; i++) {
      words[i] = words[i].toLowerCase();
    }
    _fns.default.unique(words);
    for (var _i = 0; _i < words.length; _i++) {
      if (words[_i].match(NOT_ALLOWED) === null) {
        this.insert(words[_i]);
      }
    }
  },
  insert: function insert(word) {
    this._insert(word, this.root);
    var lastWord = this.lastWord;
    this.lastWord = word;
    var prefix = _fns.default.commonPrefix(word, lastWord);
    if (prefix === lastWord) {
      return;
    }
    var freeze = this.uniqueNode(lastWord, word, this.root);
    if (freeze) {
      this.combineSuffixNode(freeze);
    }
  },
  _insert: function _insert(word, node) {
    var prefix, next;

    // Duplicate word entry - ignore
    if (word.length === 0) {
      return;
    }

    // Do any existing props share a common prefix?
    var keys = Object.keys(node);
    for (var i = 0; i < keys.length; i++) {
      var prop = keys[i];
      prefix = _fns.default.commonPrefix(word, prop);
      if (prefix.length === 0) {
        continue;
      }
      // Prop is a proper prefix - recurse to child node
      if (prop === prefix && _typeof(node[prop]) === 'object') {
        this._insert(word.slice(prefix.length), node[prop]);
        return;
      }
      // Duplicate terminal string - ignore
      if (prop === word && typeof node[prop] === 'number') {
        return;
      }
      next = {};
      next[prop.slice(prefix.length)] = node[prop];
      this.addTerminal(next, word = word.slice(prefix.length));
      delete node[prop];
      node[prefix] = next;
      this.wordCount++;
      return;
    }

    // No shared prefix.  Enter the word here as a terminal string.
    this.addTerminal(node, word);
    this.wordCount++;
  },
  // Add a terminal string to node.
  // If 2 characters or less, just add with value == 1.
  // If more than 2 characters, point to shared node
  // Note - don't prematurely share suffixes - these
  // terminals may become split and joined with other
  // nodes in this part of the tree.
  addTerminal: function addTerminal(node, prop) {
    if (prop.length <= 1) {
      node[prop] = 1;
      return;
    }
    var next = {};
    node[prop[0]] = next;
    this.addTerminal(next, prop.slice(1));
  },
  // Well ordered list of properties in a node (string or object properties)
  // Use nodesOnly==true to return only properties of child nodes (not
  // terminal strings.
  nodeProps: function nodeProps(node, nodesOnly) {
    var props = [];
    for (var prop in node) {
      // is it a usuable prop, or a special reserved one?
      if (prop !== '' && !internal.hasOwnProperty(prop)) {
        if (!nodesOnly || _typeof(node[prop]) === 'object') {
          props.push(prop);
        }
      }
    }
    props.sort();
    return props;
  },
  optimize: function optimize() {
    this.combineSuffixNode(this.root);
    this.prepDFS();
    this.countDegree(this.root);
    this.prepDFS();
    this.collapseChains(this.root);
  },
  // Convert Trie to a DAWG by sharing identical nodes
  combineSuffixNode: function combineSuffixNode(node) {
    // Frozen node - can't change.
    if (node._c) {
      return node;
    }
    // Make sure all children are combined and generate unique node
    // signature for this node.
    var sig = [];
    if (this.isTerminal(node)) {
      sig.push('!');
    }
    var props = this.nodeProps(node);
    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      if (_typeof(node[prop]) === 'object') {
        node[prop] = this.combineSuffixNode(node[prop]);
        sig.push(prop);
        sig.push(node[prop]._c);
      } else {
        sig.push(prop);
      }
    }
    sig = sig.join('-');
    var shared = this.suffixes[sig];
    if (shared) {
      return shared;
    }
    this.suffixes[sig] = node;
    node._c = this.cNext++;
    return node;
  },
  prepDFS: function prepDFS() {
    this.vCur++;
  },
  visited: function visited(node) {
    if (node._v === this.vCur) {
      return true;
    }
    node._v = this.vCur;
    return false;
  },
  countDegree: function countDegree(node) {
    if (node._d === undefined) {
      node._d = 0;
    }
    node._d++;
    if (this.visited(node)) {
      return;
    }
    var props = this.nodeProps(node, true);
    for (var i = 0; i < props.length; i++) {
      this.countDegree(node[props[i]]);
    }
  },
  // Remove intermediate singleton nodes by hoisting into their parent
  collapseChains: function collapseChains(node) {
    var prop, child, i;
    if (this.visited(node)) {
      return;
    }
    var props = this.nodeProps(node);
    for (i = 0; i < props.length; i++) {
      prop = props[i];
      child = node[prop];
      if (_typeof(child) !== 'object') {
        continue;
      }
      this.collapseChains(child);
      // Hoist the singleton child's single property to the parent
      if (child._g !== undefined && (child._d === 1 || child._g.length === 1)) {
        delete node[prop];
        prop += child._g;
        node[prop] = child[child._g];
      }
    }
    // Identify singleton nodes
    if (props.length === 1 && !this.isTerminal(node)) {
      node._g = prop;
    }
  },
  isTerminal: function isTerminal(node) {
    return !!node[''];
  },
  // Find highest node in Trie that is on the path to word
  // and that is NOT on the path to other.
  uniqueNode: function uniqueNode(word, other, node) {
    var props = this.nodeProps(node, true);
    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      if (prop === word.slice(0, prop.length)) {
        if (prop !== other.slice(0, prop.length)) {
          return node[prop];
        }
        return this.uniqueNode(word.slice(prop.length), other.slice(prop.length), node[prop]);
      }
    }
    return undefined;
  },
  pack: function pack() {
    return (0, _pack2.default)(this);
  }
};
var _default = exports.default = methods;
},{"./fns.js":"node_modules/efrt/src/pack/fns.js","./pack.js":"node_modules/efrt/src/pack/pack.js"}],"node_modules/efrt/src/pack/trie.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _methods = _interopRequireDefault(require("./methods.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/*
 A JavaScript implementation of a Trie search datastructure.
Each node of the Trie is an Object that can contain the following properties:
      '' - If present (with value == 1), the node is a Terminal Node - the prefix
          leading to this node is a word in the dictionary.
      numeric properties (value == 1) - the property name is a terminal string
          so that the prefix + string is a word in the dictionary.
      Object properties - the property name is one or more characters to be consumed
          from the prefix of the test string, with the remainder to be checked in
          the child node.
      '_c': A unique name for the node (starting from 1), used in combining Suffixes.
      '_n': Created when packing the Trie, the sequential node number
          (in pre-order traversal).
      '_d': The number of times a node is shared (it's in-degree from other nodes).
      '_v': Visited in DFS.
      '_g': For singleton nodes, the name of it's single property.
 */
var Trie = function Trie(words) {
  this.root = {};
  this.lastWord = '';
  this.suffixes = {};
  this.suffixCounts = {};
  this.cNext = 1;
  this.wordCount = 0;
  this.insertWords(words);
  this.vCur = 0;
};
Object.keys(_methods.default).forEach(function (k) {
  Trie.prototype[k] = _methods.default[k];
});
var _default = exports.default = Trie;
},{"./methods.js":"node_modules/efrt/src/pack/methods.js"}],"node_modules/efrt/src/pack/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _trie = _interopRequireDefault(require("./trie.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var isArray = function isArray(input) {
  return Object.prototype.toString.call(input) === '[object Array]';
};
var handleFormats = function handleFormats(input) {
  //null
  if (input === null || input === undefined) {
    return {};
  }
  //string
  if (typeof input === 'string') {
    return input.split(/ +/g).reduce(function (h, str) {
      h[str] = true;
      return h;
    }, {});
  }
  //array
  if (isArray(input)) {
    return input.reduce(function (h, str) {
      h[str] = true;
      return h;
    }, {});
  }
  //object
  return input;
};

//turn an array into a compressed string
var pack = function pack(obj) {
  obj = handleFormats(obj);
  //pivot into categories:
  var flat = Object.keys(obj).reduce(function (h, k) {
    var val = obj[k];
    //array version-
    //put it in several buckets
    if (isArray(val)) {
      for (var i = 0; i < val.length; i++) {
        h[val[i]] = h[val[i]] || [];
        h[val[i]].push(k);
      }
      return h;
    }
    //normal string/boolean version
    if (h.hasOwnProperty(val) === false) {
      //basically h[val]=[]  - support reserved words
      Object.defineProperty(h, val, {
        writable: true,
        enumerable: true,
        configurable: true,
        value: []
      });
    }
    h[val].push(k);
    return h;
  }, {});
  //pack each into a compressed string
  Object.keys(flat).forEach(function (k) {
    var t = new _trie.default(flat[k]);
    flat[k] = t.pack();
  });
  return Object.keys(flat).map(function (k) {
    return k + '¦' + flat[k];
  }).join('|');
};
var _default = exports.default = pack;
},{"./trie.js":"node_modules/efrt/src/pack/trie.js"}],"node_modules/efrt/src/unpack/symbols.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _encoding = _interopRequireDefault(require("../encoding.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var symbols = function symbols(t) {
  //... process these lines
  var reSymbol = new RegExp('([0-9A-Z]+):([0-9A-Z]+)');
  for (var i = 0; i < t.nodes.length; i++) {
    var m = reSymbol.exec(t.nodes[i]);
    if (!m) {
      t.symCount = i;
      break;
    }
    t.syms[_encoding.default.fromAlphaCode(m[1])] = _encoding.default.fromAlphaCode(m[2]);
  }
  //remove from main node list
  t.nodes = t.nodes.slice(t.symCount, t.nodes.length);
};
var _default = exports.default = symbols;
},{"../encoding.js":"node_modules/efrt/src/encoding.js"}],"node_modules/efrt/src/unpack/traverse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _symbols = _interopRequireDefault(require("./symbols.js"));
var _encoding = _interopRequireDefault(require("../encoding.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// References are either absolute (symbol) or relative (1 - based)
var indexFromRef = function indexFromRef(trie, ref, index) {
  var dnode = _encoding.default.fromAlphaCode(ref);
  if (dnode < trie.symCount) {
    return trie.syms[dnode];
  }
  return index + dnode + 1 - trie.symCount;
};
var toArray = function toArray(trie) {
  var all = [];
  var _crawl = function crawl(index, pref) {
    var node = trie.nodes[index];
    if (node[0] === '!') {
      all.push(pref);
      node = node.slice(1); //ok, we tried. remove it.
    }
    var matches = node.split(/([A-Z0-9,]+)/g);
    for (var i = 0; i < matches.length; i += 2) {
      var str = matches[i];
      var ref = matches[i + 1];
      if (!str) {
        continue;
      }
      var have = pref + str;
      //branch's end
      if (ref === ',' || ref === undefined) {
        all.push(have);
        continue;
      }
      var newIndex = indexFromRef(trie, ref, index);
      _crawl(newIndex, have);
    }
  };
  _crawl(0, '');
  return all;
};

//PackedTrie - Trie traversal of the Trie packed-string representation.
var unpack = function unpack(str) {
  var trie = {
    nodes: str.split(';'),
    syms: [],
    symCount: 0
  };
  //process symbols, if they have them
  if (str.match(':')) {
    (0, _symbols.default)(trie);
  }
  return toArray(trie);
};
var _default = exports.default = unpack;
},{"./symbols.js":"node_modules/efrt/src/unpack/symbols.js","../encoding.js":"node_modules/efrt/src/encoding.js"}],"node_modules/efrt/src/unpack/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _traverse = _interopRequireDefault(require("./traverse.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var unpack = function unpack(str) {
  if (!str) {
    return {};
  }
  //turn the weird string into a key-value object again
  var obj = str.split('|').reduce(function (h, s) {
    var arr = s.split('¦');
    h[arr[0]] = arr[1];
    return h;
  }, {});
  var all = {};
  Object.keys(obj).forEach(function (cat) {
    var arr = (0, _traverse.default)(obj[cat]);
    //special case, for botched-boolean
    if (cat === 'true') {
      cat = true;
    }
    for (var i = 0; i < arr.length; i++) {
      var k = arr[i];
      if (all.hasOwnProperty(k) === true) {
        if (Array.isArray(all[k]) === false) {
          all[k] = [all[k], cat];
        } else {
          all[k].push(cat);
        }
      } else {
        all[k] = cat;
      }
    }
  });
  return all;
};
var _default = exports.default = unpack;
},{"./traverse.js":"node_modules/efrt/src/unpack/traverse.js"}],"node_modules/efrt/src/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = '2.7.0';
},{}],"node_modules/efrt/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "unpack", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});
var _index = _interopRequireDefault(require("./pack/index.js"));
var _index2 = _interopRequireDefault(require("./unpack/index.js"));
var _version = _interopRequireDefault(require("./_version.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
},{"./pack/index.js":"node_modules/efrt/src/pack/index.js","./unpack/index.js":"node_modules/efrt/src/unpack/index.js","./_version.js":"node_modules/efrt/src/_version.js"}],"node_modules/compromise/src/2-two/preTagger/model/lexicon/misc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var prp = ['Possessive', 'Pronoun'];
//words that can't be compressed, for whatever reason
var misc = {
  // numbers
  '20th century fox': 'Organization',
  '7 eleven': 'Organization',
  'motel 6': 'Organization',
  g8: 'Organization',
  vh1: 'Organization',
  '76ers': 'SportsTeam',
  '49ers': 'SportsTeam',
  q1: 'Date',
  q2: 'Date',
  q3: 'Date',
  q4: 'Date',
  km2: 'Unit',
  m2: 'Unit',
  dm2: 'Unit',
  cm2: 'Unit',
  mm2: 'Unit',
  mile2: 'Unit',
  in2: 'Unit',
  yd2: 'Unit',
  ft2: 'Unit',
  m3: 'Unit',
  dm3: 'Unit',
  cm3: 'Unit',
  in3: 'Unit',
  ft3: 'Unit',
  yd3: 'Unit',
  // ampersands
  'at&t': 'Organization',
  'black & decker': 'Organization',
  'h & m': 'Organization',
  'johnson & johnson': 'Organization',
  'procter & gamble': 'Organization',
  "ben & jerry's": 'Organization',
  '&': 'Conjunction',
  //pronouns
  i: ['Pronoun', 'Singular'],
  he: ['Pronoun', 'Singular'],
  she: ['Pronoun', 'Singular'],
  it: ['Pronoun', 'Singular'],
  they: ['Pronoun', 'Plural'],
  we: ['Pronoun', 'Plural'],
  was: ['Copula', 'PastTense'],
  is: ['Copula', 'PresentTense'],
  are: ['Copula', 'PresentTense'],
  am: ['Copula', 'PresentTense'],
  were: ['Copula', 'PastTense'],
  // possessive pronouns
  her: prp,
  his: prp,
  hers: prp,
  their: prp,
  theirs: prp,
  themselves: prp,
  your: prp,
  our: prp,
  ours: prp,
  my: prp,
  its: prp,
  // misc
  vs: ['Conjunction', 'Abbreviation'],
  if: ['Condition', 'Preposition'],
  closer: 'Comparative',
  closest: 'Superlative',
  much: 'Adverb',
  may: 'Modal',
  // irregular conjugations with two forms
  babysat: 'PastTense',
  blew: 'PastTense',
  drank: 'PastTense',
  drove: 'PastTense',
  forgave: 'PastTense',
  skiied: 'PastTense',
  spilt: 'PastTense',
  stung: 'PastTense',
  swam: 'PastTense',
  swung: 'PastTense',
  guaranteed: 'PastTense',
  shrunk: 'PastTense',
  // support 'near', 'nears', 'nearing'
  nears: 'PresentTense',
  nearing: 'Gerund',
  neared: 'PastTense',
  no: ['Negative', 'Expression']

  // '-': 'Preposition', //june - july

  // there: 'There'
};
var _default = exports.default = misc;
},{}],"node_modules/compromise/src/2-two/preTagger/model/lexicon/frozenLex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  '20th century fox': 'Organization',
  '7 eleven': 'Organization',
  'motel 6': 'Organization',
  'excuse me': 'Expression',
  'financial times': 'Organization',
  'guns n roses': 'Organization',
  'la z boy': 'Organization',
  'labour party': 'Organization',
  'new kids on the block': 'Organization',
  'new york times': 'Organization',
  'the guess who': 'Organization',
  'thin lizzy': 'Organization',
  'prime minister': 'Actor',
  'free market': 'Singular',
  'lay up': 'Singular',
  'living room': 'Singular',
  'living rooms': 'Plural',
  'spin off': 'Singular',
  'appeal court': 'Uncountable',
  'cold war': 'Uncountable',
  'gene pool': 'Uncountable',
  'machine learning': 'Uncountable',
  'nail polish': 'Uncountable',
  'time off': 'Uncountable',
  'take part': 'Infinitive',
  'bill gates': 'Person',
  'doctor who': 'Person',
  'dr who': 'Person',
  'he man': 'Person',
  'iron man': 'Person',
  'kid cudi': 'Person',
  'run dmc': 'Person',
  'rush limbaugh': 'Person',
  'snow white': 'Person',
  'tiger woods': 'Person',
  'brand new': 'Adjective',
  'en route': 'Adjective',
  'left wing': 'Adjective',
  'off guard': 'Adjective',
  'on board': 'Adjective',
  'part time': 'Adjective',
  'right wing': 'Adjective',
  'so called': 'Adjective',
  'spot on': 'Adjective',
  'straight forward': 'Adjective',
  'super duper': 'Adjective',
  'tip top': 'Adjective',
  'top notch': 'Adjective',
  'up to date': 'Adjective',
  'win win': 'Adjective',
  'brooklyn nets': 'SportsTeam',
  'chicago bears': 'SportsTeam',
  'houston astros': 'SportsTeam',
  'houston dynamo': 'SportsTeam',
  'houston rockets': 'SportsTeam',
  'houston texans': 'SportsTeam',
  'minnesota twins': 'SportsTeam',
  'orlando magic': 'SportsTeam',
  'san antonio spurs': 'SportsTeam',
  'san diego chargers': 'SportsTeam',
  'san diego padres': 'SportsTeam',
  'iron maiden': 'ProperNoun',
  'isle of man': 'Country',
  'united states': 'Country',
  'united states of america': 'Country',
  'prince edward island': 'Region',
  'cedar breaks': 'Place',
  'cedar falls': 'Place',
  'point blank': 'Adverb',
  'tiny bit': 'Adverb',
  'by the time': 'Conjunction',
  'no matter': 'Conjunction',
  'civil wars': 'Plural',
  'credit cards': 'Plural',
  'default rates': 'Plural',
  'free markets': 'Plural',
  'head starts': 'Plural',
  'home runs': 'Plural',
  'lay ups': 'Plural',
  'phone calls': 'Plural',
  'press releases': 'Plural',
  'record labels': 'Plural',
  'soft serves': 'Plural',
  'student loans': 'Plural',
  'tax returns': 'Plural',
  'tv shows': 'Plural',
  'video games': 'Plural',
  'took part': 'PastTense',
  'takes part': 'PresentTense',
  'taking part': 'Gerund',
  'taken part': 'Participle',
  'light bulb': 'Noun',
  'rush hour': 'Noun',
  'fluid ounce': 'Unit',
  'the rolling stones': 'Organization'
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/lexicon/emoticons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//just some of the most common emoticons
//faster than
//http://stackoverflow.com/questions/28077049/regex-matching-emoticons
var _default = exports.default = [':(', ':)', ':P', ':p', ':O', ';(', ';)', ';P', ';p', ';O', ':3', ':|', ':/', ':\\', ':$', ':*', ':@', ':-(', ':-)', ':-P', ':-p', ':-O', ':-3', ':-|', ':-/', ':-\\', ':-$', ':-*', ':-@', ':^(', ':^)', ':^P', ':^p', ':^O', ':^3', ':^|', ':^/', ':^\\', ':^$', ':^*', ':^@', '):', '(:', '$:', '*:', ')-:', '(-:', '$-:', '*-:', ')^:', '(^:', '$^:', '*^:', '<3', '</3', '<\\3', '=('];
},{}],"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/_rules.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/** patterns for turning 'bus' to 'buses'*/
var suffixes = {
  a: [[/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae'], [/ia$/i, 'ia']],
  e: [[/(kn|l|w)ife$/i, '$1ives'], [/(hive)$/i, '$1s'], [/([m|l])ouse$/i, '$1ice'], [/([m|l])ice$/i, '$1ice']],
  f: [[/^(dwar|handkerchie|hoo|scar|whar)f$/i, '$1ves'], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i, '$1ves']],
  i: [[/(octop|vir)i$/i, '$1i']],
  m: [[/([ti])um$/i, '$1a']],
  n: [[/^(oxen)$/i, '$1']],
  o: [[/(al|ad|at|er|et|ed)o$/i, '$1oes']],
  s: [[/(ax|test)is$/i, '$1es'], [/(alias|status)$/i, '$1es'], [/sis$/i, 'ses'], [/(bu)s$/i, '$1ses'], [/(sis)$/i, 'ses'], [/^(?!talis|.*hu)(.*)man$/i, '$1men'], [/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i']],
  x: [[/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices'], [/^(ox)$/i, '$1en']],
  y: [[/([^aeiouy]|qu)y$/i, '$1ies']],
  z: [[/(quiz)$/i, '$1zes']]
};
var _default = exports.default = suffixes;
},{}],"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _rules = _interopRequireDefault(require("./_rules.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var addE = /([xsz]|ch|sh)$/;
var trySuffix = function trySuffix(str) {
  var c = str[str.length - 1];
  if (_rules.default.hasOwnProperty(c) === true) {
    for (var i = 0; i < _rules.default[c].length; i += 1) {
      var reg = _rules.default[c][i][0];
      if (reg.test(str) === true) {
        return str.replace(reg, _rules.default[c][i][1]);
      }
    }
  }
  return null;
};
/** Turn a singular noun into a plural
 * assume the given string is singular
 */
var pluralize = function pluralize() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var model = arguments.length > 1 ? arguments[1] : undefined;
  var _model$two = model.two,
    irregularPlurals = _model$two.irregularPlurals,
    uncountable = _model$two.uncountable;
  // is it a word without a plural form?
  if (uncountable.hasOwnProperty(str)) {
    return str;
  }
  // check irregulars list
  if (irregularPlurals.hasOwnProperty(str)) {
    return irregularPlurals[str];
  }
  //we have some rules to try-out
  var plural = trySuffix(str);
  if (plural !== null) {
    return plural;
  }
  //like 'church'
  if (addE.test(str)) {
    return str + 'es';
  }
  // ¯\_(ツ)_/¯
  return str + 's';
};
var _default = exports.default = pluralize;
},{"./_rules.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/_rules.js"}],"node_modules/compromise/src/2-two/preTagger/model/lexicon/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "frozenLex", {
  enumerable: true,
  get: function () {
    return _frozenLex.default;
  }
});
exports.switches = exports.lexicon = void 0;
var _data = _interopRequireDefault(require("./_data.js"));
var _efrt = require("efrt");
var _misc = _interopRequireDefault(require("./misc.js"));
var _frozenLex = _interopRequireDefault(require("./frozenLex.js"));
var _emoticons = _interopRequireDefault(require("./emoticons.js"));
var _index = _interopRequireDefault(require("../../methods/transform/nouns/toPlural/index.js"));
var _plurals = _interopRequireDefault(require("../irregulars/plurals.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// unpack our lexicon of words
// (found in ./lexicon/)

// more clever things are done on the data later
//  - once the plugin is applied
var hasSwitch = /\|/;
var lexicon = exports.lexicon = _misc.default;
var switches = exports.switches = {};
var tmpModel = {
  two: {
    irregularPlurals: _plurals.default,
    uncountable: {}
  }
};
Object.keys(_data.default).forEach(function (tag) {
  var wordsObj = (0, _efrt.unpack)(_data.default[tag]);
  // POS tag, or something fancier?
  if (!hasSwitch.test(tag)) {
    // set them as simple word key-value lookup
    Object.keys(wordsObj).forEach(function (w) {
      lexicon[w] = tag;
    });
    return;
  }
  // add them as seperate key-val object
  Object.keys(wordsObj).forEach(function (w) {
    switches[w] = tag;
    // pluralize Noun|Verb switches
    if (tag === 'Noun|Verb') {
      var plural = (0, _index.default)(w, tmpModel);
      switches[plural] = 'Plural|Verb';
    }
  });
});
// add ':)'
_emoticons.default.forEach(function (str) {
  return lexicon[str] = 'Emoticon';
});

// misc cleanup
delete lexicon[''];
delete lexicon[null];
delete lexicon[' '];
},{"./_data.js":"node_modules/compromise/src/2-two/preTagger/model/lexicon/_data.js","efrt":"node_modules/efrt/src/index.js","./misc.js":"node_modules/compromise/src/2-two/preTagger/model/lexicon/misc.js","./frozenLex.js":"node_modules/compromise/src/2-two/preTagger/model/lexicon/frozenLex.js","./emoticons.js":"node_modules/compromise/src/2-two/preTagger/model/lexicon/emoticons.js","../../methods/transform/nouns/toPlural/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/index.js","../irregulars/plurals.js":"node_modules/compromise/src/2-two/preTagger/model/irregulars/plurals.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/_noun.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var n = 'Singular';
var _default = exports.default = {
  beforeTags: {
    Determiner: n,
    //the date
    Possessive: n,
    //his date
    Acronym: n,
    //u.s. state
    // ProperNoun:n,
    Noun: n,
    //nasa funding
    Adjective: n,
    //whole bottles
    // Verb:true, //save storm victims
    PresentTense: n,
    //loves hiking
    Gerund: n,
    //uplifting victims
    PastTense: n,
    //saved storm victims
    Infinitive: n,
    //profess love
    Date: n,
    //9pm show
    Ordinal: n,
    //first date
    Demonym: n //dutch map
  },
  afterTags: {
    Value: n,
    //date nine  -?
    Modal: n,
    //date would
    Copula: n,
    //fear is
    PresentTense: n,
    //babysitting sucks
    PastTense: n,
    //babysitting sucked
    // Noun:n, //talking therapy, planning process
    Demonym: n,
    //american touch
    Actor: n //dance therapist
  },
  // ownTags: { ProperNoun: n },
  beforeWords: {
    the: n,
    //the brands
    with: n,
    //with cakes
    without: n,
    //
    // was:n, //was time  -- was working
    // is:n, //
    of: n,
    //of power
    for: n,
    //for rats
    any: n,
    //any rats
    all: n,
    //all tips
    on: n,
    //on time
    // thing-ish verbs
    cut: n,
    //cut spending
    cuts: n,
    //cut spending
    increase: n,
    // increase funding
    decrease: n,
    //
    raise: n,
    //
    drop: n,
    //
    // give: n,//give parents
    save: n,
    //
    saved: n,
    //
    saves: n,
    //
    make: n,
    //
    makes: n,
    //
    made: n,
    //
    minus: n,
    //minus laughing
    plus: n,
    //
    than: n,
    //more than age
    another: n,
    //
    versus: n,
    //
    neither: n,
    //
    about: n,
    //about claims
    // strong adjectives
    favorite: n,
    //
    best: n,
    //
    daily: n,
    //
    weekly: n,
    //
    linear: n,
    //
    binary: n,
    //
    mobile: n,
    //
    lexical: n,
    //
    technical: n,
    //
    computer: n,
    //
    scientific: n,
    //
    security: n,
    //
    government: n,
    //
    popular: n,
    //
    formal: n,
    no: n,
    //no worries
    more: n,
    //more details
    one: n,
    //one flood
    let: n,
    //let fear
    her: n,
    //her boots
    his: n,
    //
    their: n,
    //
    our: n,
    //
    us: n,
    //served us drinks
    sheer: n,
    monthly: n,
    yearly: n,
    current: n,
    previous: n,
    upcoming: n,
    last: n,
    next: n,
    main: n,
    initial: n,
    final: n,
    beginning: n,
    end: n,
    top: n,
    bottom: n,
    future: n,
    past: n,
    major: n,
    minor: n,
    side: n,
    central: n,
    peripheral: n,
    public: n,
    private: n
  },
  afterWords: {
    of: n,
    //date of birth (preposition)
    system: n,
    aid: n,
    method: n,
    utility: n,
    tool: n,
    reform: n,
    therapy: n,
    philosophy: n,
    room: n,
    authority: n,
    says: n,
    said: n,
    wants: n,
    wanted: n,
    is: n,
    did: n,
    do: n,
    can: n,
    //parents can
    wise: n //service-wise
    // they: n,//snakes they
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/clues/_verb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var v = 'Infinitive';
var _default = exports.default = {
  beforeTags: {
    Modal: v,
    //would date
    Adverb: v,
    //quickly date
    Negative: v,
    //not date
    Plural: v //characters drink
    // ProperNoun: vb,//google thought
  },
  afterTags: {
    Determiner: v,
    //flash the
    Adverb: v,
    //date quickly
    Possessive: v,
    //date his
    Reflexive: v,
    //resolve yourself
    // Noun:true, //date spencer
    Preposition: v,
    //date around, dump onto, grumble about
    // Conjunction: v, // dip to, dip through
    Cardinal: v,
    //cut 3 squares
    Comparative: v,
    //feel greater
    Superlative: v //feel greatest
  },
  beforeWords: {
    i: v,
    //i date
    we: v,
    //we date
    you: v,
    //you date
    they: v,
    //they date
    to: v,
    //to date
    please: v,
    //please check
    will: v,
    //will check
    have: v,
    had: v,
    would: v,
    could: v,
    should: v,
    do: v,
    did: v,
    does: v,
    can: v,
    must: v,
    us: v,
    me: v,
    let: v,
    even: v,
    when: v,
    help: v,
    //help combat
    // them: v,
    he: v,
    she: v,
    it: v,
    being: v,
    // prefixes
    bi: v,
    co: v,
    contra: v,
    de: v,
    inter: v,
    intra: v,
    mis: v,
    pre: v,
    out: v,
    counter: v,
    nobody: v,
    somebody: v,
    anybody: v,
    everybody: v
    // un: v,
    // over: v,
    // under: v,
  },
  afterWords: {
    the: v,
    //echo the
    me: v,
    //date me
    you: v,
    //date you
    him: v,
    //loves him
    us: v,
    //cost us
    her: v,
    //
    his: v,
    //
    them: v,
    //
    they: v,
    //
    it: v,
    //hope it
    himself: v,
    herself: v,
    itself: v,
    myself: v,
    ourselves: v,
    themselves: v,
    something: v,
    anything: v,
    a: v,
    //covers a
    an: v,
    //covers an
    // from: v, //ranges from
    up: v,
    //serves up
    down: v,
    //serves up
    by: v,
    // in: v, //bob in
    out: v,
    // on: v,
    off: v,
    under: v,
    what: v,
    //look what
    // when: v,//starts when
    // for:true, //settled for
    all: v,
    //shiver all night
    // conjunctions
    to: v,
    //dip to
    because: v,
    //
    although: v,
    //
    // after: v,
    // before: v,//
    how: v,
    //
    otherwise: v,
    //
    together: v,
    //fit together
    though: v,
    //
    into: v,
    //
    yet: v,
    //
    more: v,
    //kill more
    here: v,
    // look here
    there: v,
    //
    away: v //float away
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/clues/actor-verb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _noun = _interopRequireDefault(require("./_noun.js"));
var _verb = _interopRequireDefault(require("./_verb.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'the pilot' vs 'pilot the plane'
var clue = {
  beforeTags: Object.assign({}, _verb.default.beforeTags, _noun.default.beforeTags, {}),
  afterTags: Object.assign({}, _verb.default.afterTags, _noun.default.afterTags, {}),
  beforeWords: Object.assign({}, _verb.default.beforeWords, _noun.default.beforeWords, {}),
  afterWords: Object.assign({}, _verb.default.afterWords, _noun.default.afterWords, {})
};
var _default = exports.default = clue;
},{"./_noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_noun.js","./_verb.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_verb.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/_adj.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var jj = 'Adjective';
var _default = exports.default = {
  beforeTags: {
    Determiner: jj,
    //the detailed
    // Copula: jj, //is detailed
    Possessive: jj,
    //spencer's detailed
    Hyphenated: jj //rapidly-changing
  },
  afterTags: {
    // Noun: jj, //detailed plan, overwhelming evidence
    Adjective: jj //intoxicated little
  },
  beforeWords: {
    seem: jj,
    //seem prepared
    seemed: jj,
    seems: jj,
    feel: jj,
    //feel prepared
    feels: jj,
    felt: jj,
    stay: jj,
    appear: jj,
    appears: jj,
    appeared: jj,
    also: jj,
    over: jj,
    //over cooked
    under: jj,
    too: jj,
    //too insulting
    it: jj,
    //find it insulting
    but: jj,
    //nothing but frustrating
    still: jj,
    //still scared
    // adverbs that are adjective-ish
    really: jj,
    //really damaged
    quite: jj,
    well: jj,
    very: jj,
    truly: jj,
    how: jj,
    //how slow
    deeply: jj,
    hella: jj,
    // always: jj,
    // never: jj,
    profoundly: jj,
    extremely: jj,
    so: jj,
    badly: jj,
    mostly: jj,
    totally: jj,
    awfully: jj,
    rather: jj,
    nothing: jj,
    //nothing secret,
    something: jj,
    //something wrong
    anything: jj,
    not: jj,
    //not swell
    me: jj,
    //called me swell
    is: jj,
    face: jj,
    //faces shocking revelations
    faces: jj,
    faced: jj,
    look: jj,
    looks: jj,
    looked: jj,
    reveal: jj,
    reveals: jj,
    revealed: jj,
    sound: jj,
    sounded: jj,
    sounds: jj,
    remains: jj,
    remained: jj,
    prove: jj,
    //would prove shocking
    proves: jj,
    proved: jj,
    becomes: jj,
    stays: jj,
    tastes: jj,
    taste: jj,
    smells: jj,
    smell: jj,
    gets: jj,
    //gets shocking snowfall
    grows: jj,
    as: jj,
    rings: jj,
    radiates: jj,
    conveys: jj,
    convey: jj,
    conveyed: jj,
    of: jj
    // 'smacks of': jj,
    // 'reeks of': jj,
  },
  afterWords: {
    too: jj,
    //insulting too
    also: jj,
    //insulting too
    or: jj,
    //insulting or
    enough: jj,
    //cool enough
    as: jj //as shocking as
    //about: jj, //cool about
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/clues/_gerund.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var g = 'Gerund';

// Adj|Gerund
// Noun|Gerund
var _default = exports.default = {
  beforeTags: {
    // Verb: g, // loves shocking
    Adverb: g,
    //quickly shocking
    Preposition: g,
    //by insulting
    Conjunction: g //to insulting
  },
  afterTags: {
    Adverb: g,
    //shocking quickly
    Possessive: g,
    //shocking spencer's
    Person: g,
    //telling spencer
    Pronoun: g,
    //shocking him
    Determiner: g,
    //shocking the
    Copula: g,
    //shocking is
    Preposition: g,
    //dashing by, swimming in
    Conjunction: g,
    //insulting to
    Comparative: g //growing shorter
  },
  beforeWords: {
    been: g,
    keep: g,
    //keep going
    continue: g,
    //
    stop: g,
    //
    am: g,
    //am watching
    be: g,
    //be timing
    me: g,
    //got me thinking
    // action-words
    began: g,
    start: g,
    starts: g,
    started: g,
    stops: g,
    stopped: g,
    help: g,
    helps: g,
    avoid: g,
    avoids: g,
    love: g,
    //love painting
    loves: g,
    loved: g,
    hate: g,
    hates: g,
    hated: g
    // was:g,//was working
    // is:g,
    // be:g,
  },
  afterWords: {
    you: g,
    //telling you
    me: g,
    //
    her: g,
    //
    him: g,
    //
    his: g,
    //
    them: g,
    //
    their: g,
    // fighting their
    it: g,
    //dumping it
    this: g,
    //running this
    there: g,
    // swimming there
    on: g,
    // landing on
    about: g,
    // talking about
    for: g,
    // paying for
    up: g,
    //speeding up
    down: g //
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/clues/adj-gerund.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _adj = _interopRequireDefault(require("./_adj.js"));
var _gerund = _interopRequireDefault(require("./_gerund.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var g = 'Gerund';
var jj = 'Adjective';

// rallying the troops
// her rallying cry
var clue = {
  beforeTags: Object.assign({}, _adj.default.beforeTags, _gerund.default.beforeTags, {
    // Copula: jj,
    Imperative: g,
    //recommend living in
    Infinitive: jj,
    //say charming things
    // PresentTense: g,
    Plural: g //kids cutting
  }),
  afterTags: Object.assign({}, _adj.default.afterTags, _gerund.default.afterTags, {
    Noun: jj //shocking ignorance
    // Plural: jj, //shocking lies
  }),
  beforeWords: Object.assign({}, _adj.default.beforeWords, _gerund.default.beforeWords, {
    is: jj,
    are: g,
    //is overflowing: JJ, are overflowing : VB ??
    was: jj,
    of: jj,
    //of varying
    suggest: g,
    suggests: g,
    suggested: g,
    recommend: g,
    recommends: g,
    recommended: g,
    imagine: g,
    imagines: g,
    imagined: g,
    consider: g,
    considered: g,
    considering: g,
    resist: g,
    resists: g,
    resisted: g,
    avoid: g,
    avoided: g,
    avoiding: g,
    except: jj,
    accept: jj,
    assess: g,
    explore: g,
    fear: g,
    fears: g,
    appreciate: g,
    question: g,
    help: g,
    embrace: g,
    with: jj //filled with daring
  }),
  afterWords: Object.assign({}, _adj.default.afterWords, _gerund.default.afterWords, {
    to: g,
    not: g,
    //trying not to car
    the: g //sweeping the country
  })
};
// console.log(clue)
var _default = exports.default = clue;
},{"./_adj.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_adj.js","./_gerund.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_gerund.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/adj-noun.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _adj = _interopRequireDefault(require("./_adj.js"));
var _noun = _interopRequireDefault(require("./_noun.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// the commercial market
// watching the commercial

var misc = {
  beforeTags: {
    Determiner: undefined,
    //the premier university
    Cardinal: 'Noun',
    //1950 convertable
    PhrasalVerb: 'Adjective' //starts out fine
  },
  afterTags: {
    // Pronoun: 'Noun'//as an adult i
  }
};
var clue = {
  beforeTags: Object.assign({}, _adj.default.beforeTags, _noun.default.beforeTags, misc.beforeTags),
  afterTags: Object.assign({}, _adj.default.afterTags, _noun.default.afterTags, misc.afterTags),
  beforeWords: Object.assign({}, _adj.default.beforeWords, _noun.default.beforeWords, {
    // are representative
    are: 'Adjective',
    is: 'Adjective',
    was: 'Adjective',
    be: 'Adjective',
    // phrasals
    off: 'Adjective',
    //start off fine
    out: 'Adjective' //comes out fine
  }),
  afterWords: Object.assign({}, _adj.default.afterWords, _noun.default.afterWords)
};
var _default = exports.default = clue;
},{"./_adj.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_adj.js","./_noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_noun.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/adj-past.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _adj = _interopRequireDefault(require("./_adj.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// the boiled egg
// boiled the water
var past = 'PastTense';
var jj = 'Adjective';
var adjPast = {
  beforeTags: {
    Adverb: past,
    //quickly detailed
    Pronoun: past,
    //he detailed
    ProperNoun: past,
    //toronto closed
    Auxiliary: past,
    Noun: past //eye closed  -- i guess.
  },
  afterTags: {
    Possessive: past,
    //hooked him
    Pronoun: past,
    //hooked me
    Determiner: past,
    //hooked the
    Adverb: past,
    //cooked perfectly
    Comparative: past,
    //closed higher
    Date: past,
    // alleged thursday
    Gerund: past //left dancing
  },
  beforeWords: {
    be: past,
    //be hooked vs be embarrassed
    who: past,
    //who lost
    get: jj,
    //get charged
    had: past,
    has: past,
    have: past,
    been: past,
    it: past,
    //it intoxicated him
    as: past,
    //as requested
    for: jj,
    //for discounted items
    more: jj,
    //more broken promises
    always: jj
  },
  afterWords: {
    by: past,
    //damaged by
    back: past,
    //charged back
    out: past,
    //charged out
    in: past,
    //crowded in
    up: past,
    //heated up
    down: past,
    //hammered down
    before: past,
    //
    after: past,
    //
    for: past,
    //settled for
    the: past,
    //settled the
    with: past,
    //obsessed with
    as: past,
    //known as
    on: past,
    //focused on
    at: past,
    //recorded at
    between: past,
    //settled between
    to: past,
    //dedicated to
    into: past,
    //pumped into
    us: past,
    //charged us
    them: past,
    //charged us
    his: past,
    //shared his
    her: past,
    //
    their: past,
    //
    our: past,
    //
    me: past,
    //
    about: jj
  }
};
var _default = exports.default = {
  beforeTags: Object.assign({}, _adj.default.beforeTags, adjPast.beforeTags),
  afterTags: Object.assign({}, _adj.default.afterTags, adjPast.afterTags),
  beforeWords: Object.assign({}, _adj.default.beforeWords, adjPast.beforeWords),
  afterWords: Object.assign({}, _adj.default.afterWords, adjPast.afterWords)
};
},{"./_adj.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_adj.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/adj-present.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _adj = _interopRequireDefault(require("./_adj.js"));
var _verb = _interopRequireDefault(require("./_verb.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'would mean' vs 'is mean'
var misc = {
  afterTags: {
    Noun: 'Adjective',
    //ruling party
    Conjunction: undefined //clean and excellent
  }
};
var clue = {
  beforeTags: Object.assign({}, _adj.default.beforeTags, _verb.default.beforeTags, {
    // always clean
    Adverb: undefined,
    Negative: undefined
  }),
  afterTags: Object.assign({}, _adj.default.afterTags, _verb.default.afterTags, misc.afterTags),
  beforeWords: Object.assign({}, _adj.default.beforeWords, _verb.default.beforeWords, {
    // have seperate contracts
    have: undefined,
    had: undefined,
    not: undefined,
    //went wrong, got wrong
    went: 'Adjective',
    goes: 'Adjective',
    got: 'Adjective',
    // be sure
    be: 'Adjective'
  }),
  afterWords: Object.assign({}, _adj.default.afterWords, _verb.default.afterWords, {
    to: undefined,
    //slick to the touch
    as: 'Adjective' //pale as
  })
};
// console.log(clue.beforeWords)
// console.log(clue)
var _default = exports.default = clue;
},{"./_adj.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_adj.js","./_verb.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_verb.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/noun-gerund.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _noun = _interopRequireDefault(require("./_noun.js"));
var _gerund = _interopRequireDefault(require("./_gerund.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'operating the crane', or 'operating room'
var misc = {
  beforeTags: {
    Copula: 'Gerund',
    PastTense: 'Gerund',
    PresentTense: 'Gerund',
    Infinitive: 'Gerund'
  },
  afterTags: {
    Value: 'Gerund' //maintaining 500
  },
  beforeWords: {
    are: 'Gerund',
    were: 'Gerund',
    be: 'Gerund',
    no: 'Gerund',
    without: 'Gerund',
    //are you playing
    you: 'Gerund',
    we: 'Gerund',
    they: 'Gerund',
    he: 'Gerund',
    she: 'Gerund',
    //stop us playing
    us: 'Gerund',
    them: 'Gerund'
  },
  afterWords: {
    // offering the
    the: 'Gerund',
    this: 'Gerund',
    that: 'Gerund',
    //got me thinking
    me: 'Gerund',
    us: 'Gerund',
    them: 'Gerund'
  }
};
var clue = {
  beforeTags: Object.assign({}, _gerund.default.beforeTags, _noun.default.beforeTags, misc.beforeTags),
  afterTags: Object.assign({}, _gerund.default.afterTags, _noun.default.afterTags, misc.afterTags),
  beforeWords: Object.assign({}, _gerund.default.beforeWords, _noun.default.beforeWords, misc.beforeWords),
  afterWords: Object.assign({}, _gerund.default.afterWords, _noun.default.afterWords, misc.afterWords)
};
var _default = exports.default = clue;
},{"./_noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_noun.js","./_gerund.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_gerund.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/noun-verb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _noun = _interopRequireDefault(require("./_noun.js"));
var _verb = _interopRequireDefault(require("./_verb.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var nn = 'Singular';
var vb = 'Infinitive';
// 'boot the ball'   -  'the red boot'
// 'boots the ball'  -   'the red boots'
var clue = {
  beforeTags: Object.assign({}, _verb.default.beforeTags, _noun.default.beforeTags, {
    // Noun: undefined
    Adjective: nn,
    //great name
    Particle: nn //brought under control
  }),
  afterTags: Object.assign({}, _verb.default.afterTags, _noun.default.afterTags, {
    ProperNoun: vb,
    Gerund: vb,
    Adjective: vb,
    Copula: nn
  }),
  beforeWords: Object.assign({}, _verb.default.beforeWords, _noun.default.beforeWords, {
    // is time
    is: nn,
    was: nn,
    //balance of power
    of: nn,
    have: null //have cash
  }),
  afterWords: Object.assign({}, _verb.default.afterWords, _noun.default.afterWords, {
    // for: vb,//work for
    instead: vb,
    // that: nn,//subject that was
    // for: vb,//work for
    about: vb,
    //talk about
    his: vb,
    //shot his
    her: vb,
    //
    to: null,
    by: null,
    in: null
  })
};
var _default = exports.default = clue;
},{"./_noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_noun.js","./_verb.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_verb.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/_person.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var p = 'Person';
var _default = exports.default = {
  beforeTags: {
    Honorific: p,
    Person: p
    // Preposition: p, //with sue
  },
  afterTags: {
    Person: p,
    ProperNoun: p,
    Verb: p //bob could
    // Modal:true, //bob could
    // Copula:true, //bob is
    // PresentTense:true, //bob seems
  },
  ownTags: {
    ProperNoun: p //capital letter
  },
  beforeWords: {
    hi: p,
    hey: p,
    yo: p,
    dear: p,
    hello: p
  },
  afterWords: {
    // person-usually verbs
    said: p,
    says: p,
    told: p,
    tells: p,
    feels: p,
    felt: p,
    seems: p,
    thinks: p,
    thought: p,
    spends: p,
    spendt: p,
    plays: p,
    played: p,
    sing: p,
    sang: p,
    learn: p,
    learned: p,
    wants: p,
    wanted: p
    // and:true, //sue and jeff
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/clues/person-date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _person = _interopRequireDefault(require("./_person.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'april o'neil'  -  'april 1st'

var m = 'Month';
var p = 'Person';
var month = {
  beforeTags: {
    Date: m,
    Value: m
  },
  afterTags: {
    Date: m,
    Value: m
  },
  beforeWords: {
    by: m,
    in: m,
    on: m,
    during: m,
    after: m,
    before: m,
    between: m,
    until: m,
    til: m,
    sometime: m,
    of: m,
    //5th of april
    this: m,
    //this april
    next: m,
    last: m,
    previous: m,
    following: m,
    with: p
    // for: p,
  },
  afterWords: {
    sometime: m,
    in: m,
    of: m,
    until: m,
    the: m //june the 4th
  }
};
var _default = exports.default = {
  beforeTags: Object.assign({}, _person.default.beforeTags, month.beforeTags),
  afterTags: Object.assign({}, _person.default.afterTags, month.afterTags),
  beforeWords: Object.assign({}, _person.default.beforeWords, month.beforeWords),
  afterWords: Object.assign({}, _person.default.afterWords, month.afterWords)
};
},{"./_person.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_person.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/person-noun.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _person = _interopRequireDefault(require("./_person.js"));
var _noun = _interopRequireDefault(require("./_noun.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'babling brook' vs 'brook sheilds'

var clue = {
  beforeTags: Object.assign({}, _noun.default.beforeTags, _person.default.beforeTags),
  afterTags: Object.assign({}, _noun.default.afterTags, _person.default.afterTags),
  beforeWords: Object.assign({}, _noun.default.beforeWords, _person.default.beforeWords, {
    i: 'Infinitive',
    we: 'Infinitive'
  }),
  afterWords: Object.assign({}, _noun.default.afterWords, _person.default.afterWords)
};
var _default = exports.default = clue;
},{"./_person.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_person.js","./_noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_noun.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/person-verb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _person = _interopRequireDefault(require("./_person.js"));
var _verb = _interopRequireDefault(require("./_verb.js"));
var _noun = _interopRequireDefault(require("./_noun.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'rob the store'   -  'rob lowe'
// can be a noun too - 'losing hope'
var clues = {
  beforeTags: Object.assign({}, _noun.default.beforeTags, _person.default.beforeTags, _verb.default.beforeTags),
  afterTags: Object.assign({}, _noun.default.afterTags, _person.default.afterTags, _verb.default.afterTags),
  beforeWords: Object.assign({}, _noun.default.beforeWords, _person.default.beforeWords, _verb.default.beforeWords),
  afterWords: Object.assign({}, _noun.default.afterWords, _person.default.afterWords, _verb.default.afterWords)
};
var _default = exports.default = clues;
},{"./_person.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_person.js","./_verb.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_verb.js","./_noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_noun.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/person-place.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _person = _interopRequireDefault(require("./_person.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var p = 'Place';

// 'paris hilton' vs 'paris france'
var place = {
  beforeTags: {
    Place: p
  },
  afterTags: {
    Place: p,
    Abbreviation: p
  },
  beforeWords: {
    in: p,
    by: p,
    near: p,
    from: p,
    to: p
  },
  afterWords: {
    in: p,
    by: p,
    near: p,
    from: p,
    to: p,
    government: p,
    council: p,
    region: p,
    city: p
  }
};
var clue = {
  beforeTags: Object.assign({}, place.beforeTags, _person.default.beforeTags),
  afterTags: Object.assign({}, place.afterTags, _person.default.afterTags),
  beforeWords: Object.assign({}, place.beforeWords, _person.default.beforeWords),
  afterWords: Object.assign({}, place.afterWords, _person.default.afterWords)
};
var _default = exports.default = clue;
},{"./_person.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_person.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/person-adj.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _person = _interopRequireDefault(require("./_person.js"));
var _adj = _interopRequireDefault(require("./_adj.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// 'rusty nail'   -  'rusty smith'
var clues = {
  beforeTags: Object.assign({}, _person.default.beforeTags, _adj.default.beforeTags),
  afterTags: Object.assign({}, _person.default.afterTags, _adj.default.afterTags),
  beforeWords: Object.assign({}, _person.default.beforeWords, _adj.default.beforeWords),
  afterWords: Object.assign({}, _person.default.afterWords, _adj.default.afterWords)
};
var _default = exports.default = clues;
},{"./_person.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_person.js","./_adj.js":"node_modules/compromise/src/2-two/preTagger/model/clues/_adj.js"}],"node_modules/compromise/src/2-two/preTagger/model/clues/unit-noun.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// '5 oz'   -  'dr oz'
var un = 'Unit';
var clues = {
  beforeTags: {
    Value: un
  },
  afterTags: {},
  beforeWords: {
    per: un,
    every: un,
    each: un,
    square: un,
    //square km
    cubic: un,
    sq: un,
    metric: un //metric ton
  },
  afterWords: {
    per: un,
    squared: un,
    cubed: un,
    long: un //foot long
  }
};
var _default = exports.default = clues;
},{}],"node_modules/compromise/src/2-two/preTagger/model/clues/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _actorVerb = _interopRequireDefault(require("./actor-verb.js"));
var _adjGerund = _interopRequireDefault(require("./adj-gerund.js"));
var _adjNoun = _interopRequireDefault(require("./adj-noun.js"));
var _adjPast = _interopRequireDefault(require("./adj-past.js"));
var _adjPresent = _interopRequireDefault(require("./adj-present.js"));
var _nounGerund = _interopRequireDefault(require("./noun-gerund.js"));
var _nounVerb = _interopRequireDefault(require("./noun-verb.js"));
var _personDate = _interopRequireDefault(require("./person-date.js"));
var _personNoun = _interopRequireDefault(require("./person-noun.js"));
var _personVerb = _interopRequireDefault(require("./person-verb.js"));
var _personPlace = _interopRequireDefault(require("./person-place.js"));
var _personAdj = _interopRequireDefault(require("./person-adj.js"));
var _unitNoun = _interopRequireDefault(require("./unit-noun.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var clues = {
  'Actor|Verb': _actorVerb.default,
  'Adj|Gerund': _adjGerund.default,
  'Adj|Noun': _adjNoun.default,
  'Adj|Past': _adjPast.default,
  'Adj|Present': _adjPresent.default,
  'Noun|Verb': _nounVerb.default,
  'Noun|Gerund': _nounGerund.default,
  'Person|Noun': _personNoun.default,
  'Person|Date': _personDate.default,
  'Person|Verb': _personVerb.default,
  'Person|Place': _personPlace.default,
  'Person|Adj': _personAdj.default,
  'Unit|Noun': _unitNoun.default
};
var copy = function copy(obj, more) {
  var res = Object.keys(obj).reduce(function (h, k) {
    h[k] = obj[k] === 'Infinitive' ? 'PresentTense' : 'Plural';
    return h;
  }, {});
  return Object.assign(res, more);
};

// make a copy of this one
clues['Plural|Verb'] = {
  beforeWords: copy(clues['Noun|Verb'].beforeWords, {
    had: 'Plural',
    //had tears
    have: 'Plural'
  }),
  afterWords: copy(clues['Noun|Verb'].afterWords, {
    his: 'PresentTense',
    her: 'PresentTense',
    its: 'PresentTense',
    in: null,
    to: null,
    is: 'PresentTense',
    //the way it works is
    by: 'PresentTense' //it works by
  }),
  beforeTags: copy(clues['Noun|Verb'].beforeTags, {
    Conjunction: 'PresentTense',
    //and changes
    Noun: undefined,
    //the century demands
    ProperNoun: 'PresentTense' //john plays
  }),
  afterTags: copy(clues['Noun|Verb'].afterTags, {
    Gerund: 'Plural',
    //ice caps disappearing
    Noun: 'PresentTense',
    //changes gears
    Value: 'PresentTense' //changes seven gears
  })
};
// add some custom plural clues
var _default = exports.default = clues;
},{"./actor-verb.js":"node_modules/compromise/src/2-two/preTagger/model/clues/actor-verb.js","./adj-gerund.js":"node_modules/compromise/src/2-two/preTagger/model/clues/adj-gerund.js","./adj-noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/adj-noun.js","./adj-past.js":"node_modules/compromise/src/2-two/preTagger/model/clues/adj-past.js","./adj-present.js":"node_modules/compromise/src/2-two/preTagger/model/clues/adj-present.js","./noun-gerund.js":"node_modules/compromise/src/2-two/preTagger/model/clues/noun-gerund.js","./noun-verb.js":"node_modules/compromise/src/2-two/preTagger/model/clues/noun-verb.js","./person-date.js":"node_modules/compromise/src/2-two/preTagger/model/clues/person-date.js","./person-noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/person-noun.js","./person-verb.js":"node_modules/compromise/src/2-two/preTagger/model/clues/person-verb.js","./person-place.js":"node_modules/compromise/src/2-two/preTagger/model/clues/person-place.js","./person-adj.js":"node_modules/compromise/src/2-two/preTagger/model/clues/person-adj.js","./unit-noun.js":"node_modules/compromise/src/2-two/preTagger/model/clues/unit-noun.js"}],"node_modules/compromise/src/2-two/preTagger/model/patterns/suffixes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//just a foolish lookup of known suffixes
var Adj = 'Adjective';
var Inf = 'Infinitive';
var Pres = 'PresentTense';
var Sing = 'Singular';
var Past = 'PastTense';
var Avb = 'Adverb';
var Plrl = 'Plural';
var Actor = 'Actor';
var Vb = 'Verb';
var Noun = 'Noun';
var Prop = 'ProperNoun';
var Last = 'LastName';
var Modal = 'Modal';
var Place = 'Place';
var Prt = 'Participle';
var _default = exports.default = [null, null, {
  //2-letter
  ea: Sing,
  ia: Noun,
  ic: Adj,
  ly: Avb,
  "'n": Vb,
  "'t": Vb
}, {
  //3-letter
  oed: Past,
  ued: Past,
  xed: Past,
  ' so': Avb,
  "'ll": Modal,
  "'re": 'Copula',
  azy: Adj,
  eer: Noun,
  end: Vb,
  ped: Past,
  ffy: Adj,
  ify: Inf,
  ing: 'Gerund',
  ize: Inf,
  ibe: Inf,
  lar: Adj,
  mum: Adj,
  nes: Pres,
  nny: Adj,
  // oid: Adj,
  ous: Adj,
  que: Adj,
  ger: Noun,
  ber: Noun,
  rol: Sing,
  sis: Sing,
  ogy: Sing,
  oid: Sing,
  ian: Sing,
  zes: Pres,
  eld: Past,
  ken: Prt,
  //awoken
  ven: Prt,
  //woven
  ten: Prt,
  //brighten
  ect: Inf,
  ict: Inf,
  // ide: Inf,
  ign: Inf,
  oze: Inf,
  ful: Adj,
  bal: Adj,
  ton: Noun,
  pur: Place
}, {
  //4-letter
  amed: Past,
  aped: Past,
  ched: Past,
  lked: Past,
  rked: Past,
  reed: Past,
  nded: Past,
  mned: Adj,
  cted: Past,
  dged: Past,
  ield: Sing,
  akis: Last,
  cede: Inf,
  chuk: Last,
  czyk: Last,
  ects: Pres,
  iend: Sing,
  ends: Vb,
  enko: Last,
  ette: Sing,
  iary: Sing,
  wner: Sing,
  //owner
  fies: Pres,
  fore: Avb,
  gate: Inf,
  gone: Adj,
  ices: Plrl,
  ints: Plrl,
  ruct: Inf,
  ines: Plrl,
  ions: Plrl,
  ners: Plrl,
  pers: Plrl,
  lers: Plrl,
  less: Adj,
  llen: Adj,
  made: Adj,
  nsen: Last,
  oses: Pres,
  ould: Modal,
  some: Adj,
  sson: Last,
  ians: Plrl,
  // tage: Inf,
  tion: Sing,
  tage: Noun,
  ique: Sing,
  tive: Adj,
  tors: Noun,
  vice: Sing,
  lier: Sing,
  fier: Sing,
  wned: Past,
  gent: Sing,
  tist: Actor,
  pist: Actor,
  rist: Actor,
  mist: Actor,
  yist: Actor,
  vist: Actor,
  ists: Actor,
  lite: Sing,
  site: Sing,
  rite: Sing,
  mite: Sing,
  bite: Sing,
  mate: Sing,
  date: Sing,
  ndal: Sing,
  vent: Sing,
  uist: Actor,
  gist: Actor,
  note: Sing,
  cide: Sing,
  //homicide
  ence: Sing,
  //absence
  wide: Adj,
  //nationwide
  // side: Adj,//alongside
  vide: Inf,
  //provide
  ract: Inf,
  duce: Inf,
  pose: Inf,
  eive: Inf,
  lyze: Inf,
  lyse: Inf,
  iant: Adj,
  nary: Adj,
  ghty: Adj,
  uent: Adj,
  erer: Actor,
  //caterer
  bury: Place,
  dorf: Noun,
  esty: Noun,
  wych: Place,
  dale: Place,
  folk: Place,
  vale: Place,
  abad: Place,
  sham: Place,
  wick: Place,
  view: Place
}, {
  //5-letter
  elist: Actor,
  holic: Sing,
  phite: Sing,
  tized: Past,
  urned: Past,
  eased: Past,
  ances: Plrl,
  bound: Adj,
  ettes: Plrl,
  fully: Avb,
  ishes: Pres,
  ities: Plrl,
  marek: Last,
  nssen: Last,
  ology: Noun,
  osome: Sing,
  tment: Sing,
  ports: Plrl,
  rough: Adj,
  tches: Pres,
  tieth: 'Ordinal',
  tures: Plrl,
  wards: Avb,
  where: Avb,
  archy: Noun,
  pathy: Noun,
  opoly: Noun,
  embly: Noun,
  phate: Noun,
  ndent: Sing,
  scent: Sing,
  onist: Actor,
  anist: Actor,
  alist: Actor,
  olist: Actor,
  icist: Actor,
  ounce: Inf,
  iable: Adj,
  borne: Adj,
  gnant: Adj,
  inant: Adj,
  igent: Adj,
  atory: Adj,
  // ctory: Adj,
  rient: Sing,
  dient: Sing,
  maker: Actor,
  burgh: Place,
  mouth: Place,
  ceter: Place,
  ville: Place,
  hurst: Place,
  stead: Place,
  endon: Place,
  brook: Place,
  shire: Place,
  worth: Noun,
  field: Prop,
  ridge: Place
}, {
  //6-letter
  auskas: Last,
  parent: Sing,
  cedent: Sing,
  ionary: Sing,
  cklist: Sing,
  brooke: Place,
  keeper: Actor,
  logist: Actor,
  teenth: 'Value',
  worker: Actor,
  master: Actor,
  writer: Actor,
  brough: Place,
  cester: Place,
  ington: Place,
  cliffe: Place,
  ingham: Place
}, {
  //7-letter
  chester: Place,
  logists: Actor,
  opoulos: Last,
  borough: Place,
  sdottir: Last //swedish female
}];
},{}],"node_modules/compromise/src/2-two/preTagger/model/patterns/prefixes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//prefixes give very-little away, in general.
// more-often for scientific terms, etc.
var Adj = 'Adjective';
var Noun = 'Noun';
var Verb = 'Verb';
var _default = exports.default = [null, null, {
  // 2-letter
}, {
  // 3-letter
  neo: Noun,
  bio: Noun,
  // pre: Noun,
  'de-': Verb,
  're-': Verb,
  'un-': Verb,
  'ex-': Noun
}, {
  // 4-letter
  anti: Noun,
  auto: Noun,
  faux: Adj,
  hexa: Noun,
  kilo: Noun,
  mono: Noun,
  nano: Noun,
  octa: Noun,
  poly: Noun,
  semi: Adj,
  tele: Noun,
  'pro-': Adj,
  'mis-': Verb,
  'dis-': Verb,
  'pre-': Adj //hmm
}, {
  // 5-letter
  anglo: Noun,
  centi: Noun,
  ethno: Noun,
  ferro: Noun,
  grand: Noun,
  hepta: Noun,
  hydro: Noun,
  intro: Noun,
  macro: Noun,
  micro: Noun,
  milli: Noun,
  nitro: Noun,
  penta: Noun,
  quasi: Adj,
  radio: Noun,
  tetra: Noun,
  'omni-': Adj,
  'post-': Adj
}, {
  // 6-letter
  pseudo: Adj,
  'extra-': Adj,
  'hyper-': Adj,
  'inter-': Adj,
  'intra-': Adj,
  'deca-': Adj
  // 'trans-': Noun,
}, {
  // 7-letter
  electro: Noun
}];
},{}],"node_modules/compromise/src/2-two/preTagger/model/patterns/endsWith.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//regex suffix patterns and their most common parts of speech,
//built using wordnet, by spencer kelly.
//this mapping shrinks-down the uglified build
var Adj = 'Adjective';
var Inf = 'Infinitive';
var Pres = 'PresentTense';
var Sing = 'Singular';
var Past = 'PastTense';
var Adverb = 'Adverb';
var Exp = 'Expression';
var Actor = 'Actor';
var Verb = 'Verb';
var Noun = 'Noun';
var Last = 'LastName';
var _default = exports.default = {
  a: [[/.[aeiou]na$/, Noun, 'tuna'], [/.[oau][wvl]ska$/, Last], [/.[^aeiou]ica$/, Sing, 'harmonica'], [/^([hyj]a+)+$/, Exp, 'haha'] //hahah
  ],
  c: [[/.[^aeiou]ic$/, Adj]],
  d: [
  //==-ed==
  //double-consonant
  [/[aeiou](pp|ll|ss|ff|gg|tt|rr|bb|nn|mm)ed$/, Past, 'popped'],
  //double-vowel
  [/.[aeo]{2}[bdgmnprvz]ed$/, Past, 'rammed'],
  //-hed
  [/.[aeiou][sg]hed$/, Past, 'gushed'],
  //-rd
  [/.[aeiou]red$/, Past, 'hired'], [/.[aeiou]r?ried$/, Past, 'hurried'],
  // ard
  [/[^aeiou]ard$/, Sing, 'steward'],
  // id
  [/[aeiou][^aeiou]id$/, Adj, ''], [/.[vrl]id$/, Adj, 'livid'],
  // ===== -ed ======
  //-led
  [/..led$/, Past, 'hurled'],
  //-sed
  [/.[iao]sed$/, Past, ''], [/[aeiou]n?[cs]ed$/, Past, ''],
  //-med
  [/[aeiou][rl]?[mnf]ed$/, Past, ''],
  //-ked
  [/[aeiou][ns]?c?ked$/, Past, 'bunked'],
  //-gned
  [/[aeiou]gned$/, Past],
  //-ged
  [/[aeiou][nl]?ged$/, Past],
  //-ted
  [/.[tdbwxyz]ed$/, Past], [/[^aeiou][aeiou][tvx]ed$/, Past],
  //-ied
  [/.[cdflmnprstv]ied$/, Past, 'emptied']],
  e: [[/.[lnr]ize$/, Inf, 'antagonize'], [/.[^aeiou]ise$/, Inf, 'antagonise'], [/.[aeiou]te$/, Inf, 'bite'], [/.[^aeiou][ai]ble$/, Adj, 'fixable'], [/.[^aeiou]eable$/, Adj, 'maleable'], [/.[ts]ive$/, Adj, 'festive'], [/[a-z]-like$/, Adj, 'woman-like']],
  h: [[/.[^aeiouf]ish$/, Adj, 'cornish'], [/.v[iy]ch$/, Last, '..ovich'], [/^ug?h+$/, Exp, 'ughh'], [/^uh[ -]?oh$/, Exp, 'uhoh'], [/[a-z]-ish$/, Adj, 'cartoon-ish']],
  i: [[/.[oau][wvl]ski$/, Last, 'polish-male']],
  k: [[/^(k){2}$/, Exp, 'kkkk'] //kkkk
  ],
  l: [[/.[gl]ial$/, Adj, 'familial'], [/.[^aeiou]ful$/, Adj, 'fitful'], [/.[nrtumcd]al$/, Adj, 'natal'], [/.[^aeiou][ei]al$/, Adj, 'familial']],
  m: [[/.[^aeiou]ium$/, Sing, 'magnesium'], [/[^aeiou]ism$/, Sing, 'schism'], [/^[hu]m+$/, Exp, 'hmm'], [/^\d+ ?[ap]m$/, 'Date', '3am']],
  n: [[/.[lsrnpb]ian$/, Adj, 'republican'], [/[^aeiou]ician$/, Actor, 'musician'], [/[aeiou][ktrp]in'$/, 'Gerund', "cookin'"] // 'cookin', 'hootin'
  ],
  o: [[/^no+$/, Exp, 'noooo'], [/^(yo)+$/, Exp, 'yoo'], [/^wo{2,}[pt]?$/, Exp, 'woop'] //woo
  ],
  r: [[/.[bdfklmst]ler$/, 'Noun'], [/[aeiou][pns]er$/, Sing], [/[^i]fer$/, Inf], [/.[^aeiou][ao]pher$/, Actor], [/.[lk]er$/, 'Noun'], [/.ier$/, 'Comparative']],
  t: [[/.[di]est$/, 'Superlative'], [/.[icldtgrv]ent$/, Adj], [/[aeiou].*ist$/, Adj], [/^[a-z]et$/, Verb]],
  s: [[/.[^aeiou]ises$/, Pres], [/.[rln]ates$/, Pres], [/.[^z]ens$/, Verb], [/.[lstrn]us$/, Sing], [/.[aeiou]sks$/, Pres], [/.[aeiou]kes$/, Pres], [/[aeiou][^aeiou]is$/, Sing], [/[a-z]'s$/, Noun], [/^yes+$/, Exp] //yessss
  ],
  v: [[/.[^aeiou][ai][kln]ov$/, Last] //east-europe
  ],
  y: [[/.[cts]hy$/, Adj], [/.[st]ty$/, Adj], [/.[tnl]ary$/, Adj], [/.[oe]ry$/, Sing], [/[rdntkbhs]ly$/, Adverb], [/.(gg|bb|zz)ly$/, Adj], [/...lly$/, Adverb], [/.[gk]y$/, Adj], [/[bszmp]{2}y$/, Adj], [/.[ai]my$/, Adj], [/[ea]{2}zy$/, Adj], [/.[^aeiou]ity$/, Sing]]
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/patterns/neighbours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var vb = 'Verb';
var nn = 'Noun';
var _default = exports.default = {
  // looking at the previous word's tags:
  leftTags: [['Adjective', nn], ['Possessive', nn], ['Determiner', nn], ['Adverb', vb], ['Pronoun', vb], ['Value', nn], ['Ordinal', nn], ['Modal', vb], ['Superlative', nn], ['Demonym', nn], ['Honorific', 'Person'] //dr. Smith
  ],
  // looking at the previous word:
  leftWords: [['i', vb], ['first', nn], ['it', vb], ['there', vb], ['not', vb], ['because', nn], ['if', nn], ['but', nn], ['who', vb], ['this', nn], ['his', nn], ['when', nn], ['you', vb], ['very', 'Adjective'], ['old', nn], ['never', vb], ['before', nn], ['a', nn], ['the', nn], ['been', vb]],
  // looking at the next word's tags:
  rightTags: [['Copula', nn], ['PastTense', nn], ['Conjunction', nn], ['Modal', nn]],
  // looking at the next word:
  rightWords: [['there', vb], ['me', vb], ['man', 'Adjective'],
  // ['only', vb],
  ['him', vb], ['it', vb],
  //relaunch it
  ['were', nn], ['took', nn], ['himself', vb], ['went', nn], ['who', nn], ['jr', 'Person']]
};
},{}],"node_modules/compromise/src/2-two/preTagger/model/models/_data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// generated in ./lib/pairs
var _default = exports.default = {
  "Comparative": {
    "fwd": "3:ser,ier¦1er:h,t,f,l,n¦1r:e¦2er:ss,or,om",
    "both": "3er:ver,ear,alm¦3ner:hin¦3ter:lat¦2mer:im¦2er:ng,rm,mb¦2ber:ib¦2ger:ig¦1er:w,p,k,d¦ier:y",
    "rev": "1:tter,yer¦2:uer,ver,ffer,oner,eler,ller,iler,ster,cer,uler,sher,ener,gher,aner,adder,nter,eter,rter,hter,rner,fter¦3:oser,ooler,eafer,user,airer,bler,maler,tler,eater,uger,rger,ainer,urer,ealer,icher,pler,emner,icter,nser,iser¦4:arser,viner,ucher,rosser,somer,ndomer,moter,oother,uarer,hiter¦5:nuiner,esser,emier¦ar:urther",
    "ex": "worse:bad¦better:good¦4er:fair,gray,poor¦1urther:far¦3ter:fat,hot,wet¦3der:mad,sad¦3er:shy,fun¦4der:glad¦:¦4r:cute,dire,fake,fine,free,lame,late,pale,rare,ripe,rude,safe,sore,tame,wide¦5r:eerie,stale"
  },
  "Gerund": {
    "fwd": "1:nning,tting,rring,pping,eing,mming,gging,dding,bbing,kking¦2:eking,oling,eling,eming¦3:velling,siting,uiting,fiting,loting,geting,ialing,celling¦4:graming",
    "both": "1:aing,iing,fing,xing,ying,oing,hing,wing¦2:tzing,rping,izzing,bting,mning,sping,wling,rling,wding,rbing,uping,lming,wning,mping,oning,lting,mbing,lking,fting,hting,sking,gning,pting,cking,ening,nking,iling,eping,ering,rting,rming,cting,lping,ssing,nting,nding,lding,sting,rning,rding,rking¦3:belling,siping,toming,yaking,uaking,oaning,auling,ooping,aiding,naping,euring,tolling,uzzing,ganing,haning,ualing,halling,iasing,auding,ieting,ceting,ouling,voring,ralling,garing,joring,oaming,oaking,roring,nelling,ooring,uelling,eaming,ooding,eaping,eeting,ooting,ooming,xiting,keting,ooking,ulling,airing,oaring,biting,outing,oiting,earing,naling,oading,eeding,ouring,eaking,aiming,illing,oining,eaning,onging,ealing,aining,eading¦4:thoming,melling,aboring,ivoting,weating,dfilling,onoring,eriting,imiting,tialling,rgining,otoring,linging,winging,lleting,louding,spelling,mpelling,heating,feating,opelling,choring,welling,ymaking,ctoring,calling,peating,iloring,laiting,utoring,uditing,mmaking,loating,iciting,waiting,mbating,voiding,otalling,nsoring,nselling,ocusing,itoring,eloping¦5:rselling,umpeting,atrolling,treating,tselling,rpreting,pringing,ummeting,ossoming,elmaking,eselling,rediting,totyping,onmaking,rfeiting,ntrolling¦5e:chmaking,dkeeping,severing,erouting,ecreting,ephoning,uthoring,ravening,reathing,pediting,erfering,eotyping,fringing,entoring,ombining,ompeting¦4e:emaking,eething,twining,rruling,chuting,xciting,rseding,scoping,edoring,pinging,lunging,agining,craping,pleting,eleting,nciting,nfining,ncoding,tponing,ecoding,writing,esaling,nvening,gnoring,evoting,mpeding,rvening,dhering,mpiling,storing,nviting,ploring¦3e:tining,nuring,saking,miring,haling,ceding,xuding,rining,nuting,laring,caring,miling,riding,hoking,piring,lading,curing,uading,noting,taping,futing,paring,hading,loding,siring,guring,vading,voking,during,niting,laning,caping,luting,muting,ruding,ciding,juring,laming,caling,hining,uoting,liding,ciling,duling,tuting,puting,cuting,coring,uiding,tiring,turing,siding,rading,enging,haping,buting,lining,taking,anging,haring,uiring,coming,mining,moting,suring,viding,luding¦2e:tring,zling,uging,oging,gling,iging,vring,fling,lging,obing,psing,pling,ubing,cling,dling,wsing,iking,rsing,dging,kling,ysing,tling,rging,eging,nsing,uning,osing,uming,using,ibing,bling,aging,ising,asing,ating¦2ie:rlying¦1e:zing,uing,cing,ving",
    "rev": "ying:ie¦1ing:se,ke,te,we,ne,re,de,pe,me,le,c,he¦2ing:ll,ng,dd,ee,ye,oe,rg,us¦2ning:un¦2ging:og,ag,ug,ig,eg¦2ming:um¦2bing:ub,ab,eb,ob¦3ning:lan,can,hin,pin,win¦3ring:cur,lur,tir,tar,pur,car¦3ing:ait,del,eel,fin,eat,oat,eem,lel,ool,ein,uin¦3ping:rop,rap,top,uip,wap,hip,hop,lap,rip,cap¦3ming:tem,wim,rim,kim,lim¦3ting:mat,cut,pot,lit,lot,hat,set,pit,put¦3ding:hed,bed,bid¦3king:rek¦3ling:cil,pel¦3bing:rib¦4ning:egin¦4ing:isit,ruit,ilot,nsit,dget,rkel,ival,rcel¦4ring:efer,nfer¦4ting:rmit,mmit,ysit,dmit,emit,bmit,tfit,gret¦4ling:evel,xcel,ivel¦4ding:hred¦5ing:arget,posit,rofit¦5ring:nsfer¦5ting:nsmit,orget,cquit¦5ling:ancel,istil",
    "ex": "3:adding,eating,aiming,aiding,airing,outing,gassing,setting,getting,putting,cutting,winning,sitting,betting,mapping,tapping,letting,bidding,hitting,tanning,netting,popping,fitting,capping,lapping,barring,banning,vetting,topping,rotting,tipping,potting,wetting,pitting,dipping,budding,hemming,pinning,jetting,kidding,padding,podding,sipping,wedding,bedding,donning,warring,penning,gutting,cueing,wadding,petting,ripping,napping,matting,tinning,binning,dimming,hopping,mopping,nodding,panning,rapping,ridding,sinning¦4:selling,falling,calling,waiting,editing,telling,rolling,heating,boating,hanging,beating,coating,singing,tolling,felling,polling,discing,seating,voiding,gelling,yelling,baiting,reining,ruining,seeking,spanning,stepping,knitting,emitting,slipping,quitting,dialing,omitting,clipping,shutting,skinning,abutting,flipping,trotting,cramming,fretting,suiting¦5:bringing,treating,spelling,stalling,trolling,expelling,rivaling,wringing,deterring,singeing,befitting,refitting¦6:enrolling,distilling,scrolling,strolling,caucusing,travelling¦7:installing,redefining,stencilling,recharging,overeating,benefiting,unraveling,programing¦9:reprogramming¦is:being¦2e:using,aging,owing¦3e:making,taking,coming,noting,hiring,filing,coding,citing,doping,baking,coping,hoping,lading,caring,naming,voting,riding,mining,curing,lining,ruling,typing,boring,dining,firing,hiding,piling,taping,waning,baling,boning,faring,honing,wiping,luring,timing,wading,piping,fading,biting,zoning,daring,waking,gaming,raking,ceding,tiring,coking,wining,joking,paring,gaping,poking,pining,coring,liming,toting,roping,wiring,aching¦4e:writing,storing,eroding,framing,smoking,tasting,wasting,phoning,shaking,abiding,braking,flaking,pasting,priming,shoring,sloping,withing,hinging¦5e:defining,refining,renaming,swathing,fringing,reciting¦1ie:dying,tying,lying,vying¦7e:sunbathing"
  },
  "Participle": {
    "fwd": "1:mt¦2:llen¦3:iven,aken¦:ne¦y:in",
    "both": "1:wn¦2:me,aten¦3:seen,bidden,isen¦4:roven,asten¦3l:pilt¦3d:uilt¦2e:itten¦1im:wum¦1eak:poken¦1ine:hone¦1ose:osen¦1in:gun¦1ake:woken¦ear:orn¦eal:olen¦eeze:ozen¦et:otten¦ink:unk¦ing:ung",
    "rev": "2:un¦oken:eak¦ought:eek¦oven:eave¦1ne:o¦1own:ly¦1den:de¦1in:ay¦2t:am¦2n:ee¦3en:all¦4n:rive,sake,take¦5n:rgive",
    "ex": "2:been¦3:seen,run¦4:given,taken¦5:shaken¦2eak:broken¦1ive:dove¦2y:flown¦3e:hidden,ridden¦1eek:sought¦1ake:woken¦1eave:woven"
  },
  "PastTense": {
    "fwd": "1:tted,wed,gged,nned,een,rred,pped,yed,bbed,oed,dded,rd,wn,mmed¦2:eed,nded,et,hted,st,oled,ut,emed,eled,lded,ken,rt,nked,apt,ant,eped,eked¦3:eared,eat,eaded,nelled,ealt,eeded,ooted,eaked,eaned,eeted,mited,bid,uit,ead,uited,ealed,geted,velled,ialed,belled¦4:ebuted,hined,comed¦y:ied¦ome:ame¦ear:ore¦ind:ound¦ing:ung,ang¦ep:pt¦ink:ank,unk¦ig:ug¦all:ell¦ee:aw¦ive:ave¦eeze:oze¦old:eld¦ave:ft¦ake:ook¦ell:old¦ite:ote¦ide:ode¦ine:one¦in:un,on¦eal:ole¦im:am¦ie:ay¦and:ood¦1ise:rose¦1eak:roke¦1ing:rought¦1ive:rove¦1el:elt¦1id:bade¦1et:got¦1y:aid¦1it:sat¦3e:lid¦3d:pent",
    "both": "1:aed,fed,xed,hed¦2:sged,xted,wled,rped,lked,kied,lmed,lped,uped,bted,rbed,rked,wned,rled,mped,fted,mned,mbed,zzed,omed,ened,cked,gned,lted,sked,ued,zed,nted,ered,rted,rmed,ced,sted,rned,ssed,rded,pted,ved,cted¦3:cled,eined,siped,ooned,uked,ymed,jored,ouded,ioted,oaned,lged,asped,iged,mured,oided,eiled,yped,taled,moned,yled,lit,kled,oaked,gled,naled,fled,uined,oared,valled,koned,soned,aided,obed,ibed,meted,nicked,rored,micked,keted,vred,ooped,oaded,rited,aired,auled,filled,ouled,ooded,ceted,tolled,oited,bited,aped,tled,vored,dled,eamed,nsed,rsed,sited,owded,pled,sored,rged,osed,pelled,oured,psed,oated,loned,aimed,illed,eured,tred,ioned,celled,bled,wsed,ooked,oiled,itzed,iked,iased,onged,ased,ailed,uned,umed,ained,auded,nulled,ysed,eged,ised,aged,oined,ated,used,dged,doned¦4:ntied,efited,uaked,caded,fired,roped,halled,roked,himed,culed,tared,lared,tuted,uared,routed,pited,naked,miled,houted,helled,hared,cored,caled,tired,peated,futed,ciled,called,tined,moted,filed,sided,poned,iloted,honed,lleted,huted,ruled,cured,named,preted,vaded,sured,talled,haled,peded,gined,nited,uided,ramed,feited,laked,gured,ctored,unged,pired,cuted,voked,eloped,ralled,rined,coded,icited,vided,uaded,voted,mined,sired,noted,lined,nselled,luted,jured,fided,puted,piled,pared,olored,cided,hoked,enged,tured,geoned,cotted,lamed,uiled,waited,udited,anged,luded,mired,uired,raded¦5:modelled,izzled,eleted,umpeted,ailored,rseded,treated,eduled,ecited,rammed,eceded,atrolled,nitored,basted,twined,itialled,ncited,gnored,ploded,xcited,nrolled,namelled,plored,efeated,redited,ntrolled,nfined,pleted,llided,lcined,eathed,ibuted,lloted,dhered,cceded¦3ad:sled¦2aw:drew¦2ot:hot¦2ke:made¦2ow:hrew,grew¦2ose:hose¦2d:ilt¦2in:egan¦1un:ran¦1ink:hought¦1ick:tuck¦1ike:ruck¦1eak:poke,nuck¦1it:pat¦1o:did¦1ow:new¦1ake:woke¦go:went",
    "rev": "3:rst,hed,hut,cut,set¦4:tbid¦5:dcast,eread,pread,erbid¦ought:uy,eek¦1ied:ny,ly,dy,ry,fy,py,vy,by,ty,cy¦1ung:ling,ting,wing¦1pt:eep¦1ank:rink¦1ore:bear,wear¦1ave:give¦1oze:reeze¦1ound:rind,wind¦1ook:take,hake¦1aw:see¦1old:sell¦1ote:rite¦1ole:teal¦1unk:tink¦1am:wim¦1ay:lie¦1ood:tand¦1eld:hold¦2d:he,ge,re,le,leed,ne,reed,be,ye,lee,pe,we¦2ed:dd,oy,or,ey,gg,rr,us,ew,to¦2ame:ecome,rcome¦2ped:ap¦2ged:ag,og,ug,eg¦2bed:ub,ab,ib,ob¦2lt:neel¦2id:pay¦2ang:pring¦2ove:trive¦2med:um¦2ode:rride¦2at:ysit¦3ted:mit,hat,mat,lat,pot,rot,bat¦3ed:low,end,tow,und,ond,eem,lay,cho,dow,xit,eld,ald,uld,law,lel,eat,oll,ray,ank,fin,oam,out,how,iek,tay,haw,ait,vet,say,cay,bow¦3d:ste,ede,ode,ete,ree,ude,ame,oke,ote,ime,ute,ade¦3red:lur,cur,pur,car¦3ped:hop,rop,uip,rip,lip,tep,top¦3ded:bed,rod,kid¦3ade:orbid¦3led:uel¦3ned:lan,can,kin,pan,tun¦3med:rim,lim¦4ted:quit,llot¦4ed:pear,rrow,rand,lean,mand,anel,pand,reet,link,abel,evel,imit,ceed,ruit,mind,peal,veal,hool,head,pell,well,mell,uell,band,hear,weak¦4led:nnel,qual,ebel,ivel¦4red:nfer,efer,sfer¦4n:sake,trew¦4d:ntee¦4ded:hred¦4ned:rpin¦5ed:light,nceal,right,ndear,arget,hread,eight,rtial,eboot¦5d:edite,nvite¦5ted:egret¦5led:ravel",
    "ex": "2:been,upped¦3:added,aged,aided,aimed,aired,bid,died,dyed,egged,erred,eyed,fit,gassed,hit,lied,owed,pent,pied,tied,used,vied,oiled,outed,banned,barred,bet,canned,cut,dipped,donned,ended,feed,inked,jarred,let,manned,mowed,netted,padded,panned,pitted,popped,potted,put,set,sewn,sowed,tanned,tipped,topped,vowed,weed,bowed,jammed,binned,dimmed,hopped,mopped,nodded,pinned,rigged,sinned,towed,vetted¦4:ached,baked,baled,boned,bored,called,caned,cared,ceded,cited,coded,cored,cubed,cured,dared,dined,edited,exited,faked,fared,filed,fined,fired,fuelled,gamed,gelled,hired,hoped,joked,lined,mined,named,noted,piled,poked,polled,pored,pulled,reaped,roamed,rolled,ruled,seated,shed,sided,timed,tolled,toned,voted,waited,walled,waned,winged,wiped,wired,zoned,yelled,tamed,lubed,roped,faded,mired,caked,honed,banged,culled,heated,raked,welled,banded,beat,cast,cooled,cost,dealt,feared,folded,footed,handed,headed,heard,hurt,knitted,landed,leaked,leapt,linked,meant,minded,molded,neared,needed,peaked,plodded,plotted,pooled,quit,read,rooted,sealed,seeded,seeped,shipped,shunned,skimmed,slammed,sparred,stemmed,stirred,suited,thinned,twinned,swayed,winked,dialed,abutted,blotted,fretted,healed,heeded,peeled,reeled¦5:basted,cheated,equalled,eroded,exiled,focused,opined,pleated,primed,quoted,scouted,shored,sloped,smoked,sniped,spelled,spouted,routed,staked,stored,swelled,tasted,treated,wasted,smelled,dwelled,honored,prided,quelled,eloped,scared,coveted,sweated,breaded,cleared,debuted,deterred,freaked,modeled,pleaded,rebutted,speeded¦6:anchored,defined,endured,impaled,invited,refined,revered,strolled,cringed,recast,thrust,unfolded¦7:authored,combined,competed,conceded,convened,excreted,extruded,redefined,restored,secreted,rescinded,welcomed¦8:expedited,infringed¦9:interfered,intervened,persevered¦10:contravened¦eat:ate¦is:was¦go:went¦are:were¦3d:bent,lent,rent,sent¦3e:bit,fled,hid,lost¦3ed:bled,bred¦2ow:blew,grew¦1uy:bought¦2tch:caught¦1o:did¦1ive:dove,gave¦2aw:drew¦2ed:fed¦2y:flew,laid,paid,said¦1ight:fought¦1et:got¦2ve:had¦1ang:hung¦2ad:led¦2ght:lit¦2ke:made¦2et:met¦1un:ran¦1ise:rose¦1it:sat¦1eek:sought¦1each:taught¦1ake:woke,took¦1eave:wove¦2ise:arose¦1ear:bore,tore,wore¦1ind:bound,found,wound¦2eak:broke¦2ing:brought,wrung¦1ome:came¦2ive:drove¦1ig:dug¦1all:fell¦2el:felt¦4et:forgot¦1old:held¦2ave:left¦1ing:rang,sang¦1ide:rode¦1ink:sank¦1ee:saw¦2ine:shone¦4e:slid¦1ell:sold,told¦4d:spent¦2in:spun¦1in:won"
  },
  "PresentTense": {
    "fwd": "1:oes¦1ve:as",
    "both": "1:xes¦2:zzes,ches,shes,sses¦3:iases¦2y:llies,plies¦1y:cies,bies,ties,vies,nies,pies,dies,ries,fies¦:s",
    "rev": "1ies:ly¦2es:us,go,do¦3es:cho,eto",
    "ex": "2:does,goes¦3:gasses¦5:focuses¦is:are¦3y:relies¦2y:flies¦2ve:has"
  },
  "Superlative": {
    "fwd": "1st:e¦1est:l,m,f,s¦1iest:cey¦2est:or,ir¦3est:ver",
    "both": "4:east¦5:hwest¦5lest:erful¦4est:weet,lgar,tter,oung¦4most:uter¦3est:ger,der,rey,iet,ong,ear¦3test:lat¦3most:ner¦2est:pt,ft,nt,ct,rt,ht¦2test:it¦2gest:ig¦1est:b,k,n,p,h,d,w¦iest:y",
    "rev": "1:ttest,nnest,yest¦2:sest,stest,rmest,cest,vest,lmest,olest,ilest,ulest,ssest,imest,uest¦3:rgest,eatest,oorest,plest,allest,urest,iefest,uelest,blest,ugest,amest,yalest,ealest,illest,tlest,itest¦4:cerest,eriest,somest,rmalest,ndomest,motest,uarest,tiffest¦5:leverest,rangest¦ar:urthest¦3ey:riciest",
    "ex": "best:good¦worst:bad¦5est:great¦4est:fast,full,fair,dull¦3test:hot,wet,fat¦4nest:thin¦1urthest:far¦3est:gay,shy,ill¦4test:neat¦4st:late,wide,fine,safe,cute,fake,pale,rare,rude,sore,ripe,dire¦6st:severe"
  },
  "AdjToNoun": {
    "fwd": "1:tistic,eable,lful,sful,ting,tty¦2:onate,rtable,geous,ced,seful,ctful¦3:ortive,ented¦arity:ear¦y:etic¦fulness:begone¦1ity:re¦1y:tiful,gic¦2ity:ile,imous,ilous,ime¦2ion:ated¦2eness:iving¦2y:trious¦2ation:iring¦2tion:vant¦3ion:ect¦3ce:mant,mantic¦3tion:irable¦3y:est,estic¦3m:mistic,listic¦3ess:ning¦4n:utious¦4on:rative,native,vative,ective¦4ce:erant",
    "both": "1:king,wing¦2:alous,ltuous,oyful,rdous¦3:gorous,ectable,werful,amatic¦4:oised,usical,agical,raceful,ocused,lined,ightful¦5ness:stful,lding,itous,nuous,ulous,otous,nable,gious,ayful,rvous,ntous,lsive,peful,entle,ciful,osive,leful,isive,ncise,reful,mious¦5ty:ivacious¦5ties:ubtle¦5ce:ilient,adiant,atient¦5cy:icient¦5sm:gmatic¦5on:sessive,dictive¦5ity:pular,sonal,eative,entic¦5sity:uminous¦5ism:conic¦5nce:mperate¦5ility:mitable¦5ment:xcited¦5n:bitious¦4cy:brant,etent,curate¦4ility:erable,acable,icable,ptable¦4ty:nacious,aive,oyal,dacious¦4n:icious¦4ce:vient,erent,stent,ndent,dient,quent,ident¦4ness:adic,ound,hing,pant,sant,oing,oist,tute¦4icity:imple¦4ment:fined,mused¦4ism:otic¦4ry:dantic¦4ity:tund,eral¦4edness:hand¦4on:uitive¦4lity:pitable¦4sm:eroic,namic¦4sity:nerous¦3th:arm¦3ility:pable,bable,dable,iable¦3cy:hant,nant,icate¦3ness:red,hin,nse,ict,iet,ite,oud,ind,ied,rce¦3ion:lute¦3ity:ual,gal,volous,ial¦3ce:sent,fensive,lant,gant,gent,lent,dant¦3on:asive¦3m:fist,sistic,iastic¦3y:terious,xurious,ronic,tastic¦3ur:amorous¦3e:tunate¦3ation:mined¦3sy:rteous¦3ty:ain¦3ry:ave¦3ment:azed¦2ness:de,on,ue,rn,ur,ft,rp,pe,om,ge,rd,od,ay,ss,er,ll,oy,ap,ht,ld,ad,rt¦2inousness:umous¦2ity:neous,ene,id,ane¦2cy:bate,late¦2ation:ized¦2ility:oble,ible¦2y:odic¦2e:oving,aring¦2s:ost¦2itude:pt¦2dom:ee¦2ance:uring¦2tion:reet¦2ion:oted¦2sion:ending¦2liness:an¦2or:rdent¦1th:ung¦1e:uable¦1ness:w,h,k,f¦1ility:mble¦1or:vent¦1ement:ging¦1tiquity:ncient¦1ment:hed¦verty:or¦ength:ong¦eat:ot¦pth:ep¦iness:y",
    "rev": "",
    "ex": "5:forceful,humorous¦8:charismatic¦13:understanding¦5ity:active¦11ness:adventurous,inquisitive,resourceful¦8on:aggressive,automatic,perceptive¦7ness:amorous,fatuous,furtive,ominous,serious¦5ness:ample,sweet¦12ness:apprehensive,cantankerous,contemptuous,ostentatious¦13ness:argumentative,conscientious¦9ness:assertive,facetious,imperious,inventive,oblivious,rapacious,receptive,seditious,whimsical¦10ness:attractive,expressive,impressive,loquacious,salubrious,thoughtful¦3edom:boring¦4ness:calm,fast,keen,tame¦8ness:cheerful,gracious,specious,spurious,timorous,unctuous¦5sity:curious¦9ion:deliberate¦8ion:desperate¦6e:expensive¦7ce:fragrant¦3y:furious¦9ility:ineluctable¦6ism:mystical¦8ity:physical,proactive,sensitive,vertical¦5cy:pliant¦7ity:positive¦9ity:practical¦12ism:professional¦6ce:prudent¦3ness:red¦6cy:vagrant¦3dom:wise"
  }
};
},{}],"node_modules/suffix-thumb/src/convert/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// 01- full-word exceptions
const checkEx = function (str, ex = {}) {
  if (ex.hasOwnProperty(str)) {
    return ex[str];
  }
  return null;
};

// 02- suffixes that pass our word through
const checkSame = function (str, same = []) {
  for (let i = 0; i < same.length; i += 1) {
    if (str.endsWith(same[i])) {
      return str;
    }
  }
  return null;
};

// 03- check rules - longest first
const checkRules = function (str, fwd, both = {}) {
  fwd = fwd || {};
  let max = str.length - 1;
  // look for a matching suffix
  for (let i = max; i >= 1; i -= 1) {
    let size = str.length - i;
    let suff = str.substring(size, str.length);
    // check fwd rules, first
    if (fwd.hasOwnProperty(suff) === true) {
      return str.slice(0, size) + fwd[suff];
    }
    // check shared rules
    if (both.hasOwnProperty(suff) === true) {
      return str.slice(0, size) + both[suff];
    }
  }
  // try a fallback transform
  if (fwd.hasOwnProperty('')) {
    return str += fwd[''];
  }
  if (both.hasOwnProperty('')) {
    return str += both[''];
  }
  return null;
};

//sweep-through all suffixes
const convert = function (str = '', model = {}) {
  // 01- check exceptions
  let out = checkEx(str, model.ex);
  // 02 - check same
  out = out || checkSame(str, model.same);
  // check forward and both rules
  out = out || checkRules(str, model.fwd, model.both);
  //return unchanged
  out = out || str;
  return out;
};
var _default = exports.default = convert;
},{}],"node_modules/suffix-thumb/src/reverse/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const flipObj = function (obj) {
  return Object.entries(obj).reduce((h, a) => {
    h[a[1]] = a[0];
    return h;
  }, {});
};
const reverse = function (model = {}) {
  return {
    reversed: true,
    // keep these two
    both: flipObj(model.both),
    ex: flipObj(model.ex),
    // swap this one in
    fwd: model.rev || {}
  };
};
var _default = exports.default = reverse;
},{}],"node_modules/suffix-thumb/src/validate/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// make sure inputs are not impossible to square-up
const validate = function (pairs, opts = {}) {
  let left = new Set();
  let right = new Set();
  pairs = pairs.filter(a => {
    if (left.has(a[0])) {
      // console.log('dupe', a)
      return false;
    }
    if (right.has(a[1])) {
      // console.log('dupe', a)
      return false;
    }
    left.add(a[0]);
    right.add(a[1]);

    // ensure pairs are aligned by prefix
    // if (a[0].substring(0, 1) !== a[1].substring(0, 1)) {
    //   console.log('pair not aligned at prefix:', a)
    //   return false
    // }
    return true;
  });
  return pairs;
};
var _default = exports.default = validate;
},{}],"node_modules/suffix-thumb/src/learn/00-prep.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../validate/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const prep = function (pairs, ex) {
  // remove dupes
  pairs = (0, _index.default)(pairs);
  // ensure pairs are prefix aligned, in the first-place
  return pairs.filter(arr => {
    let [a, b] = arr;
    if (a.substring(0, 1) !== b.substring(0, 1)) {
      ex[a] = b;
      return false;
    }
    return true;
  });
};
var _default = exports.default = prep;
},{"../validate/index.js":"node_modules/suffix-thumb/src/validate/index.js"}],"node_modules/suffix-thumb/src/learn/find/00-generate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// get the suffix diff between a and b
const generateRule = function (pair, peekLen = 0) {
  let all = [];
  let [from, to] = pair;
  for (let i = 0; i < from.length; i += 1) {
    if (from[i] === to[i]) {
      all.push(from[i]);
    } else {
      break;
    }
  }
  let prefix = all.length - peekLen;
  // is our suffix just the whole word? (not allowed!)
  if (peekLen >= all.length) {
    return null;
  }
  return {
    from: from.substring(prefix),
    to: to.substring(prefix)
  };
};
var _default = exports.default = generateRule;
},{}],"node_modules/suffix-thumb/src/learn/find/_convert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// check a rule
const convert = function (str, rule) {
  if (rule.from.length >= str.length) {
    return null;
  }
  if (str.endsWith(rule.from)) {
    let len = str.length - rule.from.length;
    let pre = str.slice(0, len);
    // if (str === 'agenouiller') {
    //   console.log(str, rule, pre + rule.to)
    // }
    return pre + rule.to;
  }
  return null;
};
var _default = exports.default = convert; // console.log(convert('asdfoo', { from: 'foo', to: 'dog' }))
},{}],"node_modules/suffix-thumb/src/learn/find/01-consider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _convert = _interopRequireDefault(require("./_convert.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const getPercent = (part, total) => {
  if (total === 0) {
    return 100;
  }
  let num = part / total * 100;
  num = Math.round(num * 10) / 10;
  return num;
};

// decide whether this rule performs well or not
const considerRule = function (rule, pairs) {
  let total = 0;
  let clear = new Set();
  if (!rule) {
    return {
      total,
      percent: 0,
      rule,
      clear,
      count: 0
    };
  }
  if (pairs.length === 0) {
    return {
      total,
      percent: 100,
      rule,
      clear,
      count: 0
    };
  }
  pairs.forEach(pair => {
    let res = (0, _convert.default)(pair[0], rule);
    if (res !== null) {
      total += 1;
      if (res === pair[1]) {
        clear.add(pair[0]);
      }
    }
  });
  return {
    total,
    count: clear.size,
    percent: getPercent(clear.size, total),
    rule,
    clear
  };
};
var _default = exports.default = considerRule;
},{"./_convert.js":"node_modules/suffix-thumb/src/learn/find/_convert.js"}],"node_modules/suffix-thumb/src/learn/01-findRules.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _generate = _interopRequireDefault(require("./find/00-generate.js"));
var _consider = _interopRequireDefault(require("./find/01-consider.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const findRules = function (pairs, finished, opts) {
  let pending = pairs.slice(0);
  let rules = {};
  // small rules first
  for (let peek = 0; peek < 6; peek += 1) {
    for (let i = 0; i < pending.length; i += 1) {
      let rule = (0, _generate.default)(pending[i], peek);
      let result = (0, _consider.default)(rule, pending, opts);
      // did it do okay?
      if (result.rule && result.percent > opts.threshold && result.count > opts.min) {
        // ensure it does not interfere with existing pairs
        let res2 = (0, _consider.default)(rule, finished, opts);
        if (res2.percent < 100) {
          continue;
        }

        // add it to our rules
        rules[rule.from] = rule.to;
        // update pending/finished lists
        pending = pending.filter(p => {
          if (result.clear.has(p[0])) {
            finished.push(p);
            return false;
          }
          return true;
        });
      }
    }
  }
  return {
    rules,
    pending,
    finished
  };
};
var _default = exports.default = findRules;
},{"./find/00-generate.js":"node_modules/suffix-thumb/src/learn/find/00-generate.js","./find/01-consider.js":"node_modules/suffix-thumb/src/learn/find/01-consider.js"}],"node_modules/suffix-thumb/src/learn/02-share-back.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _consider = _interopRequireDefault(require("./find/01-consider.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// some rules are also good in reverse
const shareBackward = function (fwd, rev, opts) {
  let both = {};
  let pending = rev.slice(0);
  let finished = [];
  let rules = Object.entries(fwd).reverse();
  rules.forEach(a => {
    let rule = {
      from: a[1],
      to: a[0]
    };
    if (!rule.to) {
      return;
    }
    let result = (0, _consider.default)(rule, rev, opts);
    // did it do okay?
    if (result.percent > opts.threshold) {
      // move it to 'both' rules
      both[rule.to] = rule.from;
      delete fwd[rule.to];
      // update finished/pending lists
      pending = pending.filter(a => {
        if (result.clear.has(a[0])) {
          finished.push(a);
          return false;
        }
        return true;
      });
    }
  });
  return {
    fwd,
    both,
    revPairs: {
      pending,
      finished
    }
  };
};
var _default = exports.default = shareBackward;
},{"./find/01-consider.js":"node_modules/suffix-thumb/src/learn/find/01-consider.js"}],"node_modules/suffix-thumb/src/learn/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _prep = _interopRequireDefault(require("./00-prep.js"));
var _findRules = _interopRequireDefault(require("./01-findRules.js"));
var _shareBack = _interopRequireDefault(require("./02-share-back.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const defaults = {
  threshold: 80,
  min: 0
};
const swap = a => [a[1], a[0]];
const learn = function (pairs, opts = {}) {
  opts = Object.assign({}, defaults, opts);
  let ex = {};
  let rev = {};
  pairs = (0, _prep.default)(pairs, ex);
  // get forward-dir rules
  let {
    rules,
    pending,
    finished
  } = (0, _findRules.default)(pairs, [], opts);
  // move some to both
  let {
    fwd,
    both,
    revPairs
  } = (0, _shareBack.default)(rules, pairs.map(swap), opts);
  // generate remaining reverse-dir rules
  let pendingBkwd = [];
  if (opts.reverse !== false) {
    // console.log(revPairs.pending)
    let bkwd = (0, _findRules.default)(revPairs.pending, revPairs.finished, opts);
    pendingBkwd = bkwd.pending;
    rev = bkwd.rules;
  }
  // console.log(pending.length, 'pending fwd')
  // console.log(pendingBkwd.length, 'pending Bkwd')
  // add anything remaining as an exception
  if (opts.min <= 1) {
    pending.forEach(arr => {
      ex[arr[0]] = arr[1];
    });
    pendingBkwd.forEach(arr => {
      ex[arr[1]] = arr[0];
    });
  }
  return {
    fwd,
    both,
    rev,
    ex
  };
};
var _default = exports.default = learn;
},{"./00-prep.js":"node_modules/suffix-thumb/src/learn/00-prep.js","./01-findRules.js":"node_modules/suffix-thumb/src/learn/01-findRules.js","./02-share-back.js":"node_modules/suffix-thumb/src/learn/02-share-back.js"}],"node_modules/suffix-thumb/src/compress/key-val.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// longest common prefix
const findOverlap = (from, to) => {
  let all = [];
  for (let i = 0; i < from.length; i += 1) {
    if (from[i] === to[i]) {
      all.push(from[i]);
    } else {
      break;
    }
  }
  return all.join('');
};

// run-length encode any shared prefix
let compress = function (key, val) {
  let prefix = findOverlap(key, val);
  if (prefix.length < 1) {
    return val;
  }
  let out = prefix.length + val.substr(prefix.length);
  return out;
};
var _default = exports.default = compress; // console.log(compress('fixture', 'fixturing'))
},{}],"node_modules/suffix-thumb/src/compress/pack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _keyVal = _interopRequireDefault(require("./key-val.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const pack = function (obj) {
  let byVal = {};
  Object.keys(obj).forEach(k => {
    let val = obj[k];
    byVal[val] = byVal[val] || [];
    byVal[val].push(k);
  });
  let out = [];
  Object.keys(byVal).forEach(val => {
    out.push(`${val}:${byVal[val].join(',')}`);
  });
  return out.join('¦');
};
const packObj = function (obj = {}) {
  let tmp = {};
  Object.keys(obj).forEach(k => {
    let val = (0, _keyVal.default)(k, obj[k]); // compress any shared prefix
    tmp[k] = val;
  });
  return pack(tmp);
};
const compress = function (model) {
  let out = {
    fwd: packObj(model.fwd),
    both: packObj(model.both),
    rev: packObj(model.rev),
    ex: packObj(model.ex)
  };
  return out;
};
var _default = exports.default = compress; // let model = {
//   fwd: {
//     foo: 'food',
//     bar: 'bard',
//     cool: 'nice'
//   }
// }
// console.log(compress(model))
},{"./key-val.js":"node_modules/suffix-thumb/src/compress/key-val.js"}],"node_modules/suffix-thumb/src/compress/unpack.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const prefix = /^([0-9]+)/;
const toObject = function (txt) {
  let obj = {};
  txt.split('¦').forEach(str => {
    let [key, vals] = str.split(':');
    vals = (vals || '').split(',');
    vals.forEach(val => {
      obj[val] = key;
    });
  });
  return obj;
};
const growObject = function (key = '', val = '') {
  val = String(val);
  let m = val.match(prefix);
  if (m === null) {
    return val;
  }
  let num = Number(m[1]) || 0;
  let pre = key.substring(0, num);
  let full = pre + val.replace(prefix, '');
  return full;
};
const unpackOne = function (str) {
  let obj = toObject(str);
  return Object.keys(obj).reduce((h, k) => {
    h[k] = growObject(k, obj[k]);
    return h;
  }, {});
};
const uncompress = function (model = {}) {
  if (typeof model === 'string') {
    model = JSON.parse(model);
  }
  model.fwd = unpackOne(model.fwd || '');
  model.both = unpackOne(model.both || '');
  model.rev = unpackOne(model.rev || '');
  model.ex = unpackOne(model.ex || '');
  return model;
};
var _default = exports.default = uncompress;
},{}],"node_modules/suffix-thumb/src/test/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = require("../index.js");
const cyan = str => '\x1b[36m' + str + '\x1b[0m';
const blue = str => '\x1b[34m' + str + '\x1b[0m';
const percent = (part, total) => {
  let num = part / total * 100;
  num = Math.round(num * 10) / 10;
  return num + '%';
};
const swap = a => [a[1], a[0]];
const getNum = function (pairs, model) {
  let right = 0;
  let wrong = [];
  pairs.forEach(a => {
    let have = (0, _index.convert)(a[0], model);
    if (have === a[1]) {
      right += 1;
    } else {
      console.log('❌ ', a, '→ ' + have);
      wrong.push(a);
    }
  });
  return percent(right, pairs.length);
};
const test = function (pairs, model = {}) {
  pairs = (0, _index.validate)(pairs);
  let fwdScore = getNum(pairs, model);
  let bkwdScore = getNum(pairs.map(swap), (0, _index.reverse)(model));
  console.log(`${blue(fwdScore)}  -  🔄 ${cyan(bkwdScore)}`);
};
var _default = exports.default = test;
},{"../index.js":"node_modules/suffix-thumb/src/index.js"}],"node_modules/suffix-thumb/src/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "compress", {
  enumerable: true,
  get: function () {
    return _pack.default;
  }
});
Object.defineProperty(exports, "convert", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "learn", {
  enumerable: true,
  get: function () {
    return _index4.default;
  }
});
Object.defineProperty(exports, "reverse", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "test", {
  enumerable: true,
  get: function () {
    return _index5.default;
  }
});
Object.defineProperty(exports, "uncompress", {
  enumerable: true,
  get: function () {
    return _unpack.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
var _index = _interopRequireDefault(require("./convert/index.js"));
var _index2 = _interopRequireDefault(require("./reverse/index.js"));
var _index3 = _interopRequireDefault(require("./validate/index.js"));
var _index4 = _interopRequireDefault(require("./learn/index.js"));
var _pack = _interopRequireDefault(require("./compress/pack.js"));
var _unpack = _interopRequireDefault(require("./compress/unpack.js"));
var _index5 = _interopRequireDefault(require("./test/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
},{"./convert/index.js":"node_modules/suffix-thumb/src/convert/index.js","./reverse/index.js":"node_modules/suffix-thumb/src/reverse/index.js","./validate/index.js":"node_modules/suffix-thumb/src/validate/index.js","./learn/index.js":"node_modules/suffix-thumb/src/learn/index.js","./compress/pack.js":"node_modules/suffix-thumb/src/compress/pack.js","./compress/unpack.js":"node_modules/suffix-thumb/src/compress/unpack.js","./test/index.js":"node_modules/suffix-thumb/src/test/index.js"}],"node_modules/compromise/src/2-two/preTagger/model/models/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _data = _interopRequireDefault(require("./_data.js"));
var _suffixThumb = require("suffix-thumb");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// import { reverse, uncompress } from '/Users/spencer/mountain/suffix-thumb'
// const uncompress = function () { }
// const reverse = function () { }
var fromPast = (0, _suffixThumb.uncompress)(_data.default.PastTense);
var fromPresent = (0, _suffixThumb.uncompress)(_data.default.PresentTense);
var fromGerund = (0, _suffixThumb.uncompress)(_data.default.Gerund);
var fromParticiple = (0, _suffixThumb.uncompress)(_data.default.Participle);
var toPast = (0, _suffixThumb.reverse)(fromPast);
var toPresent = (0, _suffixThumb.reverse)(fromPresent);
var toGerund = (0, _suffixThumb.reverse)(fromGerund);
var toParticiple = (0, _suffixThumb.reverse)(fromParticiple);
var toComparative = (0, _suffixThumb.uncompress)(_data.default.Comparative);
var toSuperlative = (0, _suffixThumb.uncompress)(_data.default.Superlative);
var fromComparative = (0, _suffixThumb.reverse)(toComparative);
var fromSuperlative = (0, _suffixThumb.reverse)(toSuperlative);
var adjToNoun = (0, _suffixThumb.uncompress)(_data.default.AdjToNoun);
var _default = exports.default = {
  fromPast: fromPast,
  fromPresent: fromPresent,
  fromGerund: fromGerund,
  fromParticiple: fromParticiple,
  toPast: toPast,
  toPresent: toPresent,
  toGerund: toGerund,
  toParticiple: toParticiple,
  // adjectives
  toComparative: toComparative,
  toSuperlative: toSuperlative,
  fromComparative: fromComparative,
  fromSuperlative: fromSuperlative,
  adjToNoun: adjToNoun
}; // console.log(convert('collide', toPast))
},{"./_data.js":"node_modules/compromise/src/2-two/preTagger/model/models/_data.js","suffix-thumb":"node_modules/suffix-thumb/src/index.js"}],"node_modules/compromise/src/2-two/preTagger/model/regex/regex-normal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
//web tags
[/^[\w.]+@[\w.]+\.[a-z]{2,3}$/, 'Email'], [/^(https?:\/\/|www\.)+\w+\.[a-z]{2,3}/, 'Url', 'http..'], [/^[a-z0-9./].+\.(com|net|gov|org|ly|edu|info|biz|dev|ru|jp|de|in|uk|br|io|ai)/, 'Url', '.com'],
// timezones
[/^[PMCE]ST$/, 'Timezone', 'EST'],
//names
[/^ma?c'[a-z]{3}/, 'LastName', "mc'neil"], [/^o'[a-z]{3}/, 'LastName', "o'connor"], [/^ma?cd[aeiou][a-z]{3}/, 'LastName', 'mcdonald'],
//slang things
[/^(lol)+[sz]$/, 'Expression', 'lol'], [/^wo{2,}a*h?$/, 'Expression', 'wooah'], [/^(hee?){2,}h?$/, 'Expression', 'hehe'], [/^(un|de|re)\\-[a-z\u00C0-\u00FF]{2}/, 'Verb', 'un-vite'],
// m/h
[/^(m|k|cm|km)\/(s|h|hr)$/, 'Unit', '5 k/m'],
// μg/g
[/^(ug|ng|mg)\/(l|m3|ft3)$/, 'Unit', 'ug/L'],
// love/hate
[/(?:[\0-\.0-9;-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])\/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])/, 'SlashedTerm', 'love/hate']];
},{}],"node_modules/compromise/src/2-two/preTagger/model/regex/regex-text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// #coolguy
[/^#(?:[0-9_\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]|\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDD40-\uDD49\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDED0-\uDEE3\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59\uDFF0-\uDFF9]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDF50-\uDF59\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD818[\uDD30-\uDD39]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDD70-\uDD79\uDE80-\uDE96]|\uD833[\uDCF0-\uDCF9]|\uD834[\uDEC0-\uDED3\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD839[\uDCF0-\uDCF9\uDDF1-\uDDFA]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9])*(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF])/, 'HashTag'],
// can't be all numbers

// @spencermountain
[/^@\w{2,}$/, 'AtMention'],
// period-ones acronyms - f.b.i.
[/^([A-Z]\.){2}[A-Z]?/i, ['Acronym', 'Noun'], 'F.B.I'],
//ascii-only

// ending-apostrophes
[/.{3}[lkmnp]in['‘’‛‵′`´]$/, 'Gerund', "chillin'"], [/.{4}s['‘’‛‵′`´]$/, 'Possessive', "flanders'"],
//from https://www.regextester.com/106421
// [/^([\u00a9\u00ae\u2319-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff])/, 'Emoji', 'emoji-range']
// unicode character range
[/^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDFF\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFF]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])/, 'Emoji', 'emoji-class']];
},{}],"node_modules/compromise/src/2-two/preTagger/model/regex/regex-numbers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [[/^@1?[0-9](am|pm)$/i, 'Time', '3pm'], [/^@1?[0-9]:[0-9]{2}(am|pm)?$/i, 'Time', '3:30pm'], [/^'[0-9]{2}$/, 'Year'],
// times
[/^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])$/, 'Time', '3:12:31'], [/^[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)$/i, 'Time', '1:12pm'], [/^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?$/i, 'Time', '1:12:31pm'],
//can remove?

// iso-dates
[/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}/i, 'Date', 'iso-date'], [/^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}$/, 'Date', 'iso-dash'], [/^[0-9]{1,4}\/[0-9]{1,2}\/([0-9]{4}|[0-9]{2})$/, 'Date', 'iso-slash'], [/^[0-9]{1,4}\.[0-9]{1,2}\.[0-9]{1,4}$/, 'Date', 'iso-dot'], [/^[0-9]{1,4}-[a-z]{2,9}-[0-9]{1,4}$/i, 'Date', '12-dec-2019'],
// timezones
[/^utc ?[+-]?[0-9]+$/, 'Timezone', 'utc-9'], [/^(gmt|utc)[+-][0-9]{1,2}$/i, 'Timezone', 'gmt-3'],
//phone numbers
[/^[0-9]{3}-[0-9]{4}$/, 'PhoneNumber', '421-0029'], [/^(\+?[0-9][ -])?[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}$/, 'PhoneNumber', '1-800-'],
//money
//like $5.30
[/^[\+\x2D]?(?:[\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6]|\uD807[\uDFDD-\uDFE0]|\uD838\uDEFF|\uD83B\uDCB0)[\+\x2D]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?([bkm]|bn)?\+?$/, ['Money', 'Value'], '$5.30'],
//like 5.30$
[/^[\+\x2D]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?(?:[\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6]|\uD807[\uDFDD-\uDFE0]|\uD838\uDEFF|\uD83B\uDCB0)\+?$/, ['Money', 'Value'], '5.30£'],
//like
[/^[-+]?[$£]?[0-9]([0-9,.])+(usd|eur|jpy|gbp|cad|aud|chf|cny|hkd|nzd|kr|rub)$/i, ['Money', 'Value'], '$400usd'],
//numbers
// 50 | -50 | 3.23  | 5,999.0  | 10+
[/^[-+]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?\+?$/, ['Cardinal', 'NumericValue'], '5,999'], [/^[-+]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?(st|nd|rd|r?th)$/, ['Ordinal', 'NumericValue'], '53rd'],
// .73th
[/^\.[0-9]+\+?$/, ['Cardinal', 'NumericValue'], '.73th'],
//percent
[/^[-+]?[0-9]+(,[0-9]{3})*(\.[0-9]+)?%\+?$/, ['Percent', 'Cardinal', 'NumericValue'], '-4%'], [/^\.[0-9]+%$/, ['Percent', 'Cardinal', 'NumericValue'], '.3%'],
//fraction
[/^[0-9]{1,4}\/[0-9]{1,4}(st|nd|rd|th)?s?$/, ['Fraction', 'NumericValue'], '2/3rds'],
//range
[/^[0-9.]{1,3}[a-z]{0,2}[-–—][0-9]{1,3}[a-z]{0,2}$/, ['Value', 'NumberRange'], '3-4'],
//time-range
[/^[0-9]{1,2}(:[0-9][0-9])?(am|pm)? ?[-–—] ?[0-9]{1,2}(:[0-9][0-9])?(am|pm)$/, ['Time', 'NumberRange'], '3-4pm'],
//number with unit
[/^[0-9.]+([a-z°]{1,4})$/, 'NumericValue', '9km']];
},{}],"node_modules/compromise/src/2-two/preTagger/model/orgWords.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//nouns that also signal the title of an unknown organization
//todo remove/normalize plural forms
var _default = exports.default = ['academy', 'administration', 'agence', 'agences', 'agencies', 'agency', 'airlines', 'airways', 'army', 'assoc', 'associates', 'association', 'assurance', 'authority', 'autorite', 'aviation', 'bank', 'banque', 'board', 'boys', 'brands', 'brewery', 'brotherhood', 'brothers', 'bureau', 'cafe', 'co', 'caisse', 'capital', 'care', 'cathedral', 'center', 'centre', 'chemicals', 'choir', 'chronicle', 'church', 'circus', 'clinic', 'clinique', 'club', 'co', 'coalition', 'coffee', 'collective', 'college', 'commission', 'committee', 'communications', 'community', 'company', 'comprehensive', 'computers', 'confederation', 'conference', 'conseil', 'consulting', 'containers', 'corporation', 'corps', 'corp', 'council', 'crew', 'data', 'departement', 'department', 'departments', 'design', 'development', 'directorate', 'division', 'drilling', 'education', 'eglise', 'electric', 'electricity', 'energy', 'ensemble', 'enterprise', 'enterprises', 'entertainment', 'estate', 'etat', 'faculty', 'faction', 'federation', 'financial', 'fm', 'foundation', 'fund', 'gas', 'gazette', 'girls', 'government', 'group', 'guild', 'herald', 'holdings', 'hospital', 'hotel', 'hotels', 'inc', 'industries', 'institut', 'institute', 'institutes', 'insurance', 'international', 'interstate', 'investment', 'investments', 'investors', 'journal', 'laboratory', 'labs', 'llc', 'ltd', 'limited', 'machines', 'magazine', 'management', 'marine', 'marketing', 'markets', 'media', 'memorial', 'ministere', 'ministry', 'military', 'mobile', 'motor', 'motors', 'musee', 'museum', 'news', 'observatory', 'office', 'oil', 'optical', 'orchestra', 'organization', 'partners', 'partnership', 'petrol', 'petroleum', 'pharmacare', 'pharmaceutical', 'pharmaceuticals', 'pizza', 'plc', 'police', 'politburo', 'polytechnic', 'post', 'power', 'press', 'productions', 'quartet', 'radio', 'reserve', 'resources', 'restaurant', 'restaurants', 'savings', 'school', 'securities', 'service', 'services', 'societe', 'subsidiary', 'society', 'sons',
// 'standard',
'subcommittee', 'syndicat', 'systems', 'telecommunications', 'telegraph', 'television', 'times', 'tribunal', 'tv', 'union', 'university', 'utilities', 'workers'].reduce(function (h, str) {
  h[str] = true;
  return h;
}, {});
},{}],"node_modules/compromise/src/2-two/preTagger/model/placeWords.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// geology
'atoll', 'basin', 'bay', 'beach', 'bluff', 'bog', 'camp', 'canyon', 'canyons', 'cape', 'cave', 'caves',
// 'cliff',
'cliffs', 'coast', 'cove', 'coves', 'crater', 'crossing', 'creek', 'desert', 'dune', 'dunes', 'downs', 'estates', 'escarpment', 'estuary', 'falls', 'fjord', 'fjords', 'forest', 'forests', 'glacier', 'gorge', 'gorges', 'grove', 'gulf', 'gully', 'highland', 'heights', 'hollow', 'hill', 'hills', 'inlet', 'island', 'islands', 'isthmus', 'junction', 'knoll', 'lagoon', 'lake', 'lakeshore', 'marsh', 'marshes', 'mount', 'mountain', 'mountains', 'narrows', 'peninsula', 'plains', 'plateau', 'pond', 'rapids', 'ravine', 'reef', 'reefs', 'ridge',
// 'river delta',
'river', 'rivers', 'sandhill', 'shoal', 'shore', 'shoreline', 'shores', 'strait', 'straits', 'springs', 'stream', 'swamp', 'tombolo', 'trail', 'trails', 'trench', 'valley', 'vallies', 'village', 'volcano', 'waterfall', 'watershed', 'wetland', 'woods', 'acres',
// districts
'burough', 'county', 'district', 'municipality', 'prefecture', 'province', 'region', 'reservation', 'state', 'territory', 'borough', 'metropolis', 'downtown', 'uptown', 'midtown', 'city', 'town', 'township', 'hamlet', 'country', 'kingdom', 'enclave', 'neighbourhood', 'neighborhood', 'kingdom', 'ward', 'zone',
// 'range',

//building/ complex
'airport', 'amphitheater', 'arch', 'arena', 'auditorium', 'bar', 'barn', 'basilica', 'battlefield', 'bridge', 'building', 'castle', 'centre', 'coliseum', 'cineplex', 'complex', 'dam', 'farm', 'field', 'fort', 'garden', 'gardens',
// 'grounds',
'gymnasium', 'hall', 'house', 'levee', 'library', 'manor', 'memorial', 'monument', 'museum', 'gallery', 'palace', 'pillar', 'pits',
// 'pit',
// 'place',
// 'point',
// 'room',
'plantation', 'playhouse', 'quarry',
// 'ruins',
'sportsfield', 'sportsplex', 'stadium',
// 'statue',
'terrace', 'terraces', 'theater', 'tower', 'park', 'parks', 'site', 'ranch', 'raceway', 'sportsplex',
// 'sports centre',
// 'sports field',
// 'soccer complex',
// 'soccer centre',
// 'sports complex',
// 'civic centre',

// roads
'ave', 'st', 'street', 'rd', 'road', 'lane', 'landing', 'crescent', 'cr', 'way', 'tr', 'terrace', 'avenue'].reduce(function (h, str) {
  h[str] = true;
  return h;
}, {});
},{}],"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toSingular/_rules.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [[/([^v])ies$/i, '$1y'], [/(ise)s$/i, '$1'],
//promises
[/(kn|[^o]l|w)ives$/i, '$1ife'], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i, '$1f'], [/^(dwar|handkerchie|hoo|scar|whar)ves$/i, '$1f'], [/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a'], [/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us'], [/(buffal|tomat|tornad)(oes)$/i, '$1o'], [/(ause)s$/i, '$1'],
//causes
[/(ease)s$/i, '$1'],
//diseases
[/(ious)es$/i, '$1'],
//geniouses
[/(ouse)s$/i, '$1'],
//houses
[/(ose)s$/i, '$1'],
//roses

[/(..ase)s$/i, '$1'], [/(..[aeiu]s)es$/i, '$1'], [/(vert|ind|cort)(ices)$/i, '$1ex'], [/(matr|append)(ices)$/i, '$1ix'], [/([xo]|ch|ss|sh)es$/i, '$1'], [/men$/i, 'man'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/(cris|ax|test)es$/i, '$1is'], [/(alias|status)es$/i, '$1'], [/(ss)$/i, '$1'], [/(ic)s$/i, '$1'], [/s$/i, '']];
},{}],"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toSingular/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _rules = _interopRequireDefault(require("./_rules.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var invertObj = function invertObj(obj) {
  return Object.keys(obj).reduce(function (h, k) {
    h[obj[k]] = k;
    return h;
  }, {});
};
var toSingular = function toSingular(str, model) {
  var irregularPlurals = model.two.irregularPlurals;
  var invert = invertObj(irregularPlurals); //(not very efficient)
  // check irregulars list
  if (invert.hasOwnProperty(str)) {
    return invert[str];
  }
  // go through our regexes
  for (var i = 0; i < _rules.default.length; i++) {
    if (_rules.default[i][0].test(str) === true) {
      // console.log(rules[i])
      str = str.replace(_rules.default[i][0], _rules.default[i][1]);
      return str;
    }
  }
  return str;
};
var _default = exports.default = toSingular;
},{"./_rules.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toSingular/_rules.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./toPlural/index.js"));
var _index2 = _interopRequireDefault(require("./toSingular/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var all = function all(str, model) {
  var arr = [str];
  var p = (0, _index.default)(str, model);
  if (p !== str) {
    arr.push(p);
  }
  var s = (0, _index2.default)(str, model);
  if (s !== str) {
    arr.push(s);
  }
  return arr;
};
var _default = exports.default = {
  toPlural: _index.default,
  toSingular: _index2.default,
  all: all
};
},{"./toPlural/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/index.js","./toSingular/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toSingular/index.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/getTense/_guess.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var guessVerb = {
  Gerund: ['ing'],
  Actor: ['erer'],
  Infinitive: ['ate', 'ize', 'tion', 'rify', 'then', 'ress', 'ify', 'age', 'nce', 'ect', 'ise', 'ine', 'ish', 'ace', 'ash', 'ure', 'tch', 'end', 'ack', 'and', 'ute', 'ade', 'ock', 'ite', 'ase', 'ose', 'use', 'ive', 'int', 'nge', 'lay', 'est', 'ain', 'ant', 'ent', 'eed', 'er', 'le', 'unk', 'ung', 'upt', 'en'],
  PastTense: ['ept', 'ed', 'lt', 'nt', 'ew', 'ld'],
  PresentTense: ['rks', 'cks', 'nks', 'ngs', 'mps', 'tes', 'zes', 'ers', 'les', 'acks', 'ends', 'ands', 'ocks', 'lays', 'eads', 'lls', 'els', 'ils', 'ows', 'nds', 'ays', 'ams', 'ars', 'ops', 'ffs', 'als', 'urs', 'lds', 'ews', 'ips', 'es', 'ts', 'ns'],
  Participle: ['ken', 'wn']
};
//flip it into a lookup object
guessVerb = Object.keys(guessVerb).reduce(function (h, k) {
  guessVerb[k].forEach(function (a) {
    return h[a] = k;
  });
  return h;
}, {});
var _default = exports.default = guessVerb;
},{}],"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/getTense/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _guess = _interopRequireDefault(require("./_guess.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/** it helps to know what we're conjugating from */
var getTense = function getTense(str) {
  var three = str.substring(str.length - 3);
  if (_guess.default.hasOwnProperty(three) === true) {
    return _guess.default[three];
  }
  var two = str.substring(str.length - 2);
  if (_guess.default.hasOwnProperty(two) === true) {
    return _guess.default[two];
  }
  var one = str.substring(str.length - 1);
  if (one === 's') {
    return 'PresentTense';
  }
  return null;
};
var _default = exports.default = getTense;
},{"./_guess.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/getTense/_guess.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/toInfinitive/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _suffixThumb = require("suffix-thumb");
var _index = _interopRequireDefault(require("../getTense/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var toParts = function toParts(str, model) {
  var prefix = '';
  var prefixes = {};
  if (model.one && model.one.prefixes) {
    prefixes = model.one.prefixes;
  }
  // pull-apart phrasal verb 'fall over'
  var _str$split = str.split(/ /),
    _str$split2 = _slicedToArray(_str$split, 2),
    verb = _str$split2[0],
    particle = _str$split2[1];
  // support 'over cleaned'
  if (particle && prefixes[verb] === true) {
    prefix = verb;
    verb = particle;
    particle = '';
  }
  return {
    prefix: prefix,
    verb: verb,
    particle: particle
  };
};

// dunno about these..
var copulaMap = {
  are: 'be',
  were: 'be',
  been: 'be',
  is: 'be',
  am: 'be',
  was: 'be',
  be: 'be',
  being: 'be'
};
var toInfinitive = function toInfinitive(str, model, tense) {
  var _model$two$models = model.two.models,
    fromPast = _model$two$models.fromPast,
    fromPresent = _model$two$models.fromPresent,
    fromGerund = _model$two$models.fromGerund,
    fromParticiple = _model$two$models.fromParticiple;
  var _toParts = toParts(str, model),
    prefix = _toParts.prefix,
    verb = _toParts.verb,
    particle = _toParts.particle;
  var inf = '';
  if (!tense) {
    tense = (0, _index.default)(str);
  }
  if (copulaMap.hasOwnProperty(str)) {
    inf = copulaMap[str];
  } else if (tense === 'Participle') {
    inf = (0, _suffixThumb.convert)(verb, fromParticiple);
  } else if (tense === 'PastTense') {
    inf = (0, _suffixThumb.convert)(verb, fromPast);
  } else if (tense === 'PresentTense') {
    inf = (0, _suffixThumb.convert)(verb, fromPresent);
  } else if (tense === 'Gerund') {
    inf = (0, _suffixThumb.convert)(verb, fromGerund);
  } else {
    return str;
  }

  // stitch phrasal back on
  if (particle) {
    inf += ' ' + particle;
  }
  // stitch prefix back on
  if (prefix) {
    inf = prefix + ' ' + inf;
  }
  return inf;
};
var _default = exports.default = toInfinitive; // console.log(toInfinitive('snarled', { one: {} }))
// console.log(convert('snarled', fromPast))
},{"suffix-thumb":"node_modules/suffix-thumb/src/index.js","../getTense/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/getTense/index.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/conjugate/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _suffixThumb = require("suffix-thumb");
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; } // import { toPast, toPresent, toGerund, toParticiple } from '../../../../model/models/index.js'
// pull-apart phrasal verb 'fall over'
var parse = function parse(inf) {
  if (/ /.test(inf)) {
    return inf.split(/ /);
  }
  return [inf, ''];
};

//we run this on every verb in the lexicon, so please keep it fast
//we assume the input word is a proper infinitive
var conjugate = function conjugate(inf, model) {
  var _model$two$models = model.two.models,
    toPast = _model$two$models.toPast,
    toPresent = _model$two$models.toPresent,
    toGerund = _model$two$models.toGerund,
    toParticiple = _model$two$models.toParticiple;
  // ad-hoc Copula response
  if (inf === 'be') {
    return {
      Infinitive: inf,
      Gerund: 'being',
      PastTense: 'was',
      PresentTense: 'is'
    };
  }
  var _parse = parse(inf),
    _parse2 = _slicedToArray(_parse, 2),
    str = _parse2[0],
    particle = _parse2[1];
  var found = {
    Infinitive: str,
    PastTense: (0, _suffixThumb.convert)(str, toPast),
    PresentTense: (0, _suffixThumb.convert)(str, toPresent),
    Gerund: (0, _suffixThumb.convert)(str, toGerund),
    FutureTense: 'will ' + str
  };
  // add past-participle if it's interesting
  // drive -> driven (not drove)
  var pastPrt = (0, _suffixThumb.convert)(str, toParticiple);
  if (pastPrt !== inf && pastPrt !== found.PastTense) {
    // ensure it's a known participle
    var lex = model.one.lexicon || {};
    if (lex[pastPrt] === 'Participle' || lex[pastPrt] === 'Adjective') {
      // one exception
      if (inf === 'play') {
        pastPrt = 'played';
      }
      found.Participle = pastPrt;
    }
  }
  // put phrasal-verbs back together again
  if (particle) {
    Object.keys(found).forEach(function (k) {
      found[k] += ' ' + particle;
    });
  }
  return found;
};
var _default = exports.default = conjugate; // console.log(toPresent.rules.y)
// console.log(convert('buy', toPresent))
},{"suffix-thumb":"node_modules/suffix-thumb/src/index.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./toInfinitive/index.js"));
var _index2 = _interopRequireDefault(require("./conjugate/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var all = function all(str, model) {
  var res = (0, _index2.default)(str, model);
  delete res.FutureTense;
  return Object.values(res).filter(function (s) {
    return s;
  });
};
var _default = exports.default = {
  toInfinitive: _index.default,
  conjugate: _index2.default,
  all: all
};
},{"./toInfinitive/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/toInfinitive/index.js","./conjugate/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/conjugate/index.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/inflect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toSuperlative = exports.toNoun = exports.toComparative = exports.fromSuperlative = exports.fromComparative = void 0;
var _suffixThumb = require("suffix-thumb");
// import toAdverb from './adverbs/toAdverb.js'

var toSuperlative = exports.toSuperlative = function toSuperlative(adj, model) {
  var mod = model.two.models.toSuperlative;
  return (0, _suffixThumb.convert)(adj, mod);
};
var toComparative = exports.toComparative = function toComparative(adj, model) {
  var mod = model.two.models.toComparative;
  return (0, _suffixThumb.convert)(adj, mod);
};
var fromComparative = exports.fromComparative = function fromComparative(adj, model) {
  var mod = model.two.models.fromComparative;
  return (0, _suffixThumb.convert)(adj, mod);
};
var fromSuperlative = exports.fromSuperlative = function fromSuperlative(adj, model) {
  var mod = model.two.models.fromSuperlative;
  return (0, _suffixThumb.convert)(adj, mod);
};
var toNoun = exports.toNoun = function toNoun(adj, model) {
  var mod = model.two.models.adjToNoun;
  return (0, _suffixThumb.convert)(adj, mod);
};
},{"suffix-thumb":"node_modules/suffix-thumb/src/index.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//sweep-through all suffixes
var suffixLoop = function suffixLoop() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var suffixes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var len = str.length;
  var max = len <= 6 ? len - 1 : 6;
  for (var i = max; i >= 1; i -= 1) {
    var suffix = str.substring(len - i, str.length);
    if (suffixes[suffix.length].hasOwnProperty(suffix) === true) {
      var pre = str.slice(0, len - i);
      var post = suffixes[suffix.length][suffix];
      return pre + post;
    }
  }
  return null;
};
var _default = exports.default = suffixLoop;
},{}],"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/fromAdverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = _interopRequireDefault(require("./lib.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var s = 'ically';
var ical = new Set(['analyt' + s,
//analytical
'chem' + s,
// chemical
'class' + s,
//classical
'clin' + s,
// clinical
'crit' + s,
// critical
'ecolog' + s,
// ecological
'electr' + s,
// electrical
'empir' + s,
// empirical
'frant' + s,
// frantical
'grammat' + s,
// grammatical
'ident' + s,
// identical
'ideolog' + s,
// ideological
'log' + s,
// logical
'mag' + s,
//magical
'mathemat' + s,
// mathematical
'mechan' + s,
// mechanical
'med' + s,
// medical
'method' + s,
// methodical
'method' + s,
// methodical
'mus' + s,
// musical
'phys' + s,
// physical
'phys' + s,
// physical
'polit' + s,
// political
'pract' + s,
// practical
'rad' + s,
//radical
'satir' + s,
// satirical
'statist' + s,
// statistical
'techn' + s,
// technical
'technolog' + s,
// technological
'theoret' + s,
// theoretical
'typ' + s,
// typical
'vert' + s,
// vertical
'whims' + s // whimsical
]);
var suffixes = [null, {}, {
  'ly': ''
}, {
  'ily': 'y',
  'bly': 'ble',
  'ply': 'ple'
}, {
  'ally': 'al',
  'rply': 'rp'
}, {
  'ually': 'ual',
  'ially': 'ial',
  'cally': 'cal',
  'eally': 'eal',
  'rally': 'ral',
  'nally': 'nal',
  'mally': 'mal',
  'eeply': 'eep',
  'eaply': 'eap'
}, {
  ically: 'ic'
}];
var noAdj = new Set(['early', 'only', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'mostly', 'duly', 'unduly', 'especially', 'undoubtedly', 'conversely', 'namely', 'exceedingly', 'presumably', 'accordingly', 'overly', 'best', 'latter', 'little', 'long', 'low']);

// exceptions to rules
var exceptions = {
  wholly: 'whole',
  fully: 'full',
  truly: 'true',
  gently: 'gentle',
  singly: 'single',
  customarily: 'customary',
  idly: 'idle',
  publically: 'public',
  quickly: 'quick',
  superbly: 'superb',
  cynically: 'cynical',
  well: 'good' // -?
};
var toAdjective = function toAdjective(str) {
  if (!str.endsWith('ly')) {
    return null;
  }
  // 'electronic' vs 'electronical'
  if (ical.has(str)) {
    return str.replace(/ically/, 'ical');
  }
  if (noAdj.has(str)) {
    return null;
  }
  if (exceptions.hasOwnProperty(str)) {
    return exceptions[str];
  }
  return (0, _lib.default)(str, suffixes) || str;
};
var _default = exports.default = toAdjective; // console.log(toAdjective('emphatically'))
// console.log(toAdjective('usually'))
// console.log(toAdjective('mechanically'))
// console.log(toAdjective('vertically'))
},{"./lib.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/lib.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/toAdverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = _interopRequireDefault(require("./lib.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var suffixes = [null, {
  y: 'ily'
}, {
  ly: 'ly',
  //unchanged
  ic: 'ically'
}, {
  ial: 'ially',
  ual: 'ually',
  tle: 'tly',
  ble: 'bly',
  ple: 'ply',
  ary: 'arily'
}, {}, {}, {}];
var exceptions = {
  cool: 'cooly',
  whole: 'wholly',
  full: 'fully',
  good: 'well',
  idle: 'idly',
  public: 'publicly',
  single: 'singly',
  special: 'especially'
};

// a lot of adjectives *don't really* have a adverb
// 'roomy' -> 'roomily'
// but here, conjugate what it would be, if it made sense to
var toAdverb = function toAdverb(str) {
  if (exceptions.hasOwnProperty(str)) {
    return exceptions[str];
  }
  var adv = (0, _lib.default)(str, suffixes);
  if (!adv) {
    adv = str + 'ly';
  }
  // only return this if it exists in lexicon?
  // console.log(model.one.lexicon[adv])
  return adv;
};
var _default = exports.default = toAdverb; // console.log(toAdverb('unsightly'))
},{"./lib.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/lib.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _inflect = require("./inflect.js");
var _fromAdverb = _interopRequireDefault(require("./conjugate/fromAdverb.js"));
var _toAdverb = _interopRequireDefault(require("./conjugate/toAdverb.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// import toNoun from './conjugate/toNoun.js'

var all = function all(str, model) {
  var arr = [str];
  arr.push((0, _inflect.toSuperlative)(str, model));
  arr.push((0, _inflect.toComparative)(str, model));
  arr.push((0, _toAdverb.default)(str));
  arr = arr.filter(function (s) {
    return s;
  });
  arr = new Set(arr);
  return Array.from(arr);
};
var _default = exports.default = {
  toSuperlative: _inflect.toSuperlative,
  toComparative: _inflect.toComparative,
  toAdverb: _toAdverb.default,
  toNoun: _inflect.toNoun,
  fromAdverb: _fromAdverb.default,
  fromSuperlative: _inflect.fromSuperlative,
  fromComparative: _inflect.fromComparative,
  all: all
};
},{"./inflect.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/inflect.js","./conjugate/fromAdverb.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/fromAdverb.js","./conjugate/toAdverb.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/conjugate/toAdverb.js"}],"node_modules/compromise/src/2-two/preTagger/methods/transform/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./nouns/index.js"));
var _index2 = _interopRequireDefault(require("./verbs/index.js"));
var _index3 = _interopRequireDefault(require("./adjectives/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  noun: _index.default,
  verb: _index2.default,
  adjective: _index3.default
};
},{"./nouns/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/index.js","./verbs/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/index.js","./adjectives/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/index.js"}],"node_modules/compromise/src/2-two/preTagger/methods/expand/byTag.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// transformations to make on our lexicon
var _default = exports.default = {
  // add plural forms of singular nouns
  Singular: function Singular(word, lex, methods, model) {
    var already = model.one.lexicon;
    var plural = methods.two.transform.noun.toPlural(word, model);
    if (!already[plural]) {
      lex[plural] = lex[plural] || 'Plural';
    }
  },
  // 'lawyer', 'manager' plural forms
  Actor: function Actor(word, lex, methods, model) {
    var already = model.one.lexicon;
    var plural = methods.two.transform.noun.toPlural(word, model);
    if (!already[plural]) {
      lex[plural] = lex[plural] || ['Plural', 'Actor'];
    }
  },
  // superlative/ comparative forms for adjectives
  Comparable: function Comparable(word, lex, methods, model) {
    var already = model.one.lexicon;
    var _methods$two$transfor = methods.two.transform.adjective,
      toSuperlative = _methods$two$transfor.toSuperlative,
      toComparative = _methods$two$transfor.toComparative;
    // fast -> fastest
    var sup = toSuperlative(word, model);
    if (!already[sup]) {
      lex[sup] = lex[sup] || 'Superlative';
    }
    // fast -> faster
    var comp = toComparative(word, model);
    if (!already[comp]) {
      lex[comp] = lex[comp] || 'Comparative';
    }
    // overwrite
    lex[word] = 'Adjective';
  },
  // 'german' -> 'germans'
  Demonym: function Demonym(word, lex, methods, model) {
    var plural = methods.two.transform.noun.toPlural(word, model);
    lex[plural] = lex[plural] || ['Demonym', 'Plural'];
  },
  // conjugate all forms of these verbs
  Infinitive: function Infinitive(word, lex, methods, model) {
    var already = model.one.lexicon;
    var all = methods.two.transform.verb.conjugate(word, model);
    Object.entries(all).forEach(function (a) {
      if (!already[a[1]] && !lex[a[1]] && a[0] !== 'FutureTense') {
        lex[a[1]] = a[0];
      }
    });
  },
  // 'walk up' should conjugate, too
  PhrasalVerb: function PhrasalVerb(word, lex, methods, model) {
    var already = model.one.lexicon;
    lex[word] = ['PhrasalVerb', 'Infinitive'];
    var _multi = model.one._multiCache;
    var _word$split = word.split(' '),
      _word$split2 = _slicedToArray(_word$split, 2),
      inf = _word$split2[0],
      rest = _word$split2[1];
    // add root verb
    if (!already[inf]) {
      lex[inf] = lex[inf] || 'Infinitive';
    }
    // conjugate it
    var all = methods.two.transform.verb.conjugate(inf, model);
    delete all.FutureTense;
    Object.entries(all).forEach(function (a) {
      // not 'walker up', or 'had taken up'
      if (a[0] === 'Actor' || a[1] === '') {
        return;
      }
      // add the root verb, alone
      if (!lex[a[1]] && !already[a[1]]) {
        lex[a[1]] = a[0];
      }
      _multi[a[1]] = 2;
      var str = a[1] + ' ' + rest;
      lex[str] = lex[str] || [a[0], 'PhrasalVerb'];
    });
  },
  // expand 'million'
  Multiple: function Multiple(word, lex) {
    lex[word] = ['Multiple', 'Cardinal'];
    // 'millionth'
    lex[word + 'th'] = ['Multiple', 'Ordinal'];
    // 'millionths'
    lex[word + 'ths'] = ['Multiple', 'Fraction'];
  },
  // expand number-words
  Cardinal: function Cardinal(word, lex) {
    lex[word] = ['TextValue', 'Cardinal'];
  },
  // 'millionth'
  Ordinal: function Ordinal(word, lex) {
    lex[word] = ['TextValue', 'Ordinal'];
    lex[word + 's'] = ['TextValue', 'Fraction'];
  },
  // 'thames'
  Place: function Place(word, lex) {
    lex[word] = ['Place', 'ProperNoun'];
  },
  // 'ontario'
  Region: function Region(word, lex) {
    lex[word] = ['Region', 'ProperNoun'];
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/methods/expand/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _byTag = _interopRequireDefault(require("./byTag.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// derive clever things from our lexicon key-value pairs
// this method runs as the pre-tagger plugin gets loaded
var expand = function expand(words, world) {
  var methods = world.methods,
    model = world.model;
  var lex = {};
  // console.log('start:', Object.keys(lex).length)
  var _multi = {};
  // go through each word in this key-value obj:
  Object.keys(words).forEach(function (word) {
    var tag = words[word];
    // normalize lexicon a little bit
    word = word.toLowerCase().trim();
    word = word.replace(/'s\b/, '');
    // cache multi-word terms
    var split = word.split(/ /);
    if (split.length > 1) {
      // prefer longer ones
      if (_multi[split[0]] === undefined || split.length > _multi[split[0]]) {
        _multi[split[0]] = split.length;
      }
    }
    // do any clever-business, by it's tag
    if (_byTag.default.hasOwnProperty(tag) === true) {
      _byTag.default[tag](word, lex, methods, model);
    }
    lex[word] = lex[word] || tag;
  });
  // cleanup
  delete lex[''];
  delete lex[null];
  delete lex[' '];
  return {
    lex: lex,
    _multi: _multi
  };
};
var _default = exports.default = expand;
},{"./byTag.js":"node_modules/compromise/src/2-two/preTagger/methods/expand/byTag.js"}],"node_modules/compromise/src/2-two/preTagger/methods/quickSplit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// roughly, split a document by comma or semicolon

var splitOn = function splitOn(terms, i) {
  var isNum = /^[0-9]+$/;
  var term = terms[i];
  // early on, these may not be dates yet:
  if (!term) {
    return false;
  }
  var maybeDate = new Set(['may', 'april', 'august', 'jan']);
  // veggies, like figs
  if (term.normal === 'like' || maybeDate.has(term.normal)) {
    return false;
  }
  // toronto, canada  - tuesday, march
  if (term.tags.has('Place') || term.tags.has('Date')) {
    return false;
  }
  if (terms[i - 1]) {
    var lastTerm = terms[i - 1];
    // thursday, june
    if (lastTerm.tags.has('Date') || maybeDate.has(lastTerm.normal)) {
      return false;
    }
    // pretty, nice, and fun
    if (lastTerm.tags.has('Adjective') || term.tags.has('Adjective')) {
      return false;
    }
  }
  // don't split numbers, yet
  var str = term.normal;
  if (str.length === 1 || str.length === 2 || str.length === 4) {
    if (isNum.test(str)) {
      return false;
    }
  }
  return true;
};

// kind-of a dirty sentence chunker
var quickSplit = function quickSplit(document) {
  var splitHere = /[,:;]/;
  var arr = [];
  document.forEach(function (terms) {
    var start = 0;
    terms.forEach(function (term, i) {
      // does it have a comma/semicolon ?
      if (splitHere.test(term.post) && splitOn(terms, i + 1)) {
        arr.push(terms.slice(start, i + 1));
        start = i + 1;
      }
    });
    if (start < terms.length) {
      arr.push(terms.slice(start, terms.length));
    }
  });
  return arr;
};
var _default = exports.default = quickSplit;
},{}],"node_modules/compromise/src/2-two/preTagger/methods/looksPlural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//similar to plural/singularize rules, but not the same
var isPlural = {
  e: ['mice', 'louse', 'antennae', 'formulae', 'nebulae', 'vertebrae', 'vitae'],
  i: ['tia', 'octopi', 'viri', 'radii', 'nuclei', 'fungi', 'cacti', 'stimuli'],
  n: ['men'],
  t: ['feet']
};
// plural words as exceptions to suffix-rules
var exceptions = new Set([
// 'formulas',
// 'umbrellas',
// 'gorillas',
// 'koalas',
'israelis', 'menus', 'logos']);
var notPlural = ['bus', 'mas',
//christmas
'was',
// 'las',
'ias',
//alias
'xas', 'vas', 'cis',
//probocis
'lis', 'nis',
//tennis
'ois', 'ris', 'sis',
//thesis
'tis',
//mantis, testis
'xis', 'aus', 'cus', 'eus',
//nucleus
'fus',
//doofus
'gus',
//fungus
'ius',
//radius
'lus',
//stimulus
'nus', 'das', 'ous', 'pus',
//octopus
'rus',
//virus
'sus',
//census
'tus',
//status,cactus
'xus', 'aos',
//chaos
'igos', 'ados',
//barbados
'ogos', "'s", 'ss'];
var looksPlural = function looksPlural(str) {
  // not long enough to be plural
  if (!str || str.length <= 3) {
    return false;
  }
  // 'menus' etc
  if (exceptions.has(str)) {
    return true;
  }
  var end = str[str.length - 1];
  // look at 'firemen'
  if (isPlural.hasOwnProperty(end)) {
    return isPlural[end].find(function (suff) {
      return str.endsWith(suff);
    });
  }
  if (end !== 's') {
    return false;
  }
  // look for 'virus'
  if (notPlural.find(function (suff) {
    return str.endsWith(suff);
  })) {
    return false;
  }
  // ends with an s, seems plural i guess.
  return true;
};
var _default = exports.default = looksPlural;
},{}],"node_modules/compromise/src/2-two/preTagger/methods/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./transform/index.js"));
var _index2 = _interopRequireDefault(require("./expand/index.js"));
var _quickSplit = _interopRequireDefault(require("./quickSplit.js"));
var _looksPlural = _interopRequireDefault(require("./looksPlural.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  two: {
    quickSplit: _quickSplit.default,
    expandLexicon: _index2.default,
    transform: _index.default,
    looksPlural: _looksPlural.default
  }
};
},{"./transform/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/index.js","./expand/index.js":"node_modules/compromise/src/2-two/preTagger/methods/expand/index.js","./quickSplit.js":"node_modules/compromise/src/2-two/preTagger/methods/quickSplit.js","./looksPlural.js":"node_modules/compromise/src/2-two/preTagger/methods/looksPlural.js"}],"node_modules/compromise/src/2-two/preTagger/model/_expand/irregulars.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// import irregularVerbs from './conjugations.js'
// harvest list of irregulars for any juicy word-data
var expandIrregulars = function expandIrregulars(model) {
  var irregularPlurals = model.two.irregularPlurals;
  var lexicon = model.one.lexicon;
  Object.entries(irregularPlurals).forEach(function (a) {
    lexicon[a[0]] = lexicon[a[0]] || 'Singular';
    lexicon[a[1]] = lexicon[a[1]] || 'Plural';
  });
  return model;
};
var _default = exports.default = expandIrregulars;
},{}],"node_modules/compromise/src/2-two/preTagger/model/_expand/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../../methods/index.js"));
var _irregulars = _interopRequireDefault(require("./irregulars.js"));
var _index2 = _interopRequireDefault(require("../../methods/transform/nouns/toPlural/index.js"));
var _index3 = _interopRequireDefault(require("../../methods/transform/verbs/conjugate/index.js"));
var _inflect = require("../../methods/transform/adjectives/inflect.js");
var _index4 = _interopRequireDefault(require("../../methods/transform/verbs/toInfinitive/index.js"));
var _index5 = _interopRequireDefault(require("../models/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var tmpModel = {
  one: {
    lexicon: {}
  },
  two: {
    models: _index5.default
  }
};

// defaults for switches
var switchDefaults = {
  // 'pilot'
  'Actor|Verb': 'Actor',
  //
  // 'amusing'
  'Adj|Gerund': 'Adjective',
  //+conjugations
  // 'standard'
  'Adj|Noun': 'Adjective',
  // 'boiled'
  'Adj|Past': 'Adjective',
  //+conjugations
  // 'smooth'
  'Adj|Present': 'Adjective',
  //+conjugations
  // 'box'
  'Noun|Verb': 'Singular',
  //+conjugations (no-present)
  //'singing'
  'Noun|Gerund': 'Gerund',
  //+conjugations
  // 'hope'
  'Person|Noun': 'Noun',
  // 'April'
  'Person|Date': 'Month',
  // 'rob'
  'Person|Verb': 'FirstName',
  //+conjugations
  // 'victoria'
  'Person|Place': 'Person',
  // 'rusty'
  'Person|Adj': 'Comparative',
  // 'boxes'
  'Plural|Verb': 'Plural',
  //(these are already derivative)
  // 'miles'
  'Unit|Noun': 'Noun'
};
var expandLexicon = function expandLexicon(words, model) {
  // do clever tricks to grow the words
  var world = {
    model: model,
    methods: _index.default
  };
  var _methods$two$expandLe = _index.default.two.expandLexicon(words, world),
    lex = _methods$two$expandLe.lex,
    _multi = _methods$two$expandLe._multi;
  // store multiple-word terms in a cache
  Object.assign(model.one.lexicon, lex);
  Object.assign(model.one._multiCache, _multi);
  return model;
};

// these words have no singular/plural conjugation
var addUncountables = function addUncountables(words, model) {
  Object.keys(words).forEach(function (k) {
    if (words[k] === 'Uncountable') {
      model.two.uncountable[k] = true;
      words[k] = 'Uncountable';
    }
  });
  return model;
};
var expandVerb = function expandVerb(str, words, doPresent) {
  var obj = (0, _index3.default)(str, tmpModel);
  words[obj.PastTense] = words[obj.PastTense] || 'PastTense';
  words[obj.Gerund] = words[obj.Gerund] || 'Gerund';
  if (doPresent === true) {
    // is this plural noun, or present-tense?
    words[obj.PresentTense] = words[obj.PresentTense] || 'PresentTense';
  }
};
var expandAdjective = function expandAdjective(str, words, model) {
  var sup = (0, _inflect.toSuperlative)(str, model);
  words[sup] = words[sup] || 'Superlative';
  var comp = (0, _inflect.toComparative)(str, model);
  words[comp] = words[comp] || 'Comparative';
};
var expandNoun = function expandNoun(str, words, model) {
  var plur = (0, _index2.default)(str, model);
  words[plur] = words[plur] || 'Plural';
};

// harvest ambiguous words for any conjugations
var expandVariable = function expandVariable(switchWords, model) {
  var words = {};
  var lex = model.one.lexicon;
  //add first tag as an assumption for each variable word
  Object.keys(switchWords).forEach(function (w) {
    var name = switchWords[w];
    words[w] = switchDefaults[name];
    // conjugate some verbs
    if (name === 'Noun|Verb' || name === 'Person|Verb' || name === 'Actor|Verb') {
      expandVerb(w, lex, false);
    }
    if (name === 'Adj|Present') {
      expandVerb(w, lex, true);
      expandAdjective(w, lex, model);
    }
    if (name === 'Person|Adj') {
      expandAdjective(w, lex, model);
    }
    // add infinitives for gerunds
    if (name === 'Adj|Gerund' || name === 'Noun|Gerund') {
      var inf = (0, _index4.default)(w, tmpModel, 'Gerund');
      if (!lex[inf]) {
        words[inf] = 'Infinitive'; //expand it later
      }
    }
    // add plurals for nouns
    if (name === 'Noun|Gerund' || name === 'Adj|Noun' || name === 'Person|Noun') {
      expandNoun(w, lex, model);
    }
    if (name === 'Adj|Past') {
      var _inf = (0, _index4.default)(w, tmpModel, 'PastTense');
      if (!lex[_inf]) {
        words[_inf] = 'Infinitive'; //expand it later
      }
    }
  });
  // add conjugations
  model = expandLexicon(words, model);
  return model;
};
var expand = function expand(model) {
  model = expandLexicon(model.one.lexicon, model);
  model = addUncountables(model.one.lexicon, model);
  model = expandVariable(model.two.switches, model);
  model = (0, _irregulars.default)(model);
  return model;
};
var _default = exports.default = expand;
},{"../../methods/index.js":"node_modules/compromise/src/2-two/preTagger/methods/index.js","./irregulars.js":"node_modules/compromise/src/2-two/preTagger/model/_expand/irregulars.js","../../methods/transform/nouns/toPlural/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/nouns/toPlural/index.js","../../methods/transform/verbs/conjugate/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/conjugate/index.js","../../methods/transform/adjectives/inflect.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/adjectives/inflect.js","../../methods/transform/verbs/toInfinitive/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/toInfinitive/index.js","../models/index.js":"node_modules/compromise/src/2-two/preTagger/model/models/index.js"}],"node_modules/compromise/src/2-two/preTagger/model/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _plurals = _interopRequireDefault(require("./irregulars/plurals.js"));
var _index = require("./lexicon/index.js");
var _index2 = _interopRequireDefault(require("./clues/index.js"));
var _suffixes = _interopRequireDefault(require("./patterns/suffixes.js"));
var _prefixes = _interopRequireDefault(require("./patterns/prefixes.js"));
var _endsWith = _interopRequireDefault(require("./patterns/endsWith.js"));
var _neighbours = _interopRequireDefault(require("./patterns/neighbours.js"));
var _index3 = _interopRequireDefault(require("./models/index.js"));
var _regexNormal = _interopRequireDefault(require("./regex/regex-normal.js"));
var _regexText = _interopRequireDefault(require("./regex/regex-text.js"));
var _regexNumbers = _interopRequireDefault(require("./regex/regex-numbers.js"));
var _orgWords = _interopRequireDefault(require("./orgWords.js"));
var _placeWords = _interopRequireDefault(require("./placeWords.js"));
var _index4 = _interopRequireDefault(require("./_expand/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var model = {
  one: {
    _multiCache: {},
    lexicon: _index.lexicon,
    frozenLex: _index.frozenLex
  },
  two: {
    irregularPlurals: _plurals.default,
    models: _index3.default,
    suffixPatterns: _suffixes.default,
    prefixPatterns: _prefixes.default,
    endsWith: _endsWith.default,
    neighbours: _neighbours.default,
    regexNormal: _regexNormal.default,
    regexText: _regexText.default,
    regexNumbers: _regexNumbers.default,
    switches: _index.switches,
    clues: _index2.default,
    uncountable: {},
    orgWords: _orgWords.default,
    placeWords: _placeWords.default
  }
};
model = (0, _index4.default)(model);
var _default = exports.default = model; // console.log(model.one.lexicon.see)
},{"./irregulars/plurals.js":"node_modules/compromise/src/2-two/preTagger/model/irregulars/plurals.js","./lexicon/index.js":"node_modules/compromise/src/2-two/preTagger/model/lexicon/index.js","./clues/index.js":"node_modules/compromise/src/2-two/preTagger/model/clues/index.js","./patterns/suffixes.js":"node_modules/compromise/src/2-two/preTagger/model/patterns/suffixes.js","./patterns/prefixes.js":"node_modules/compromise/src/2-two/preTagger/model/patterns/prefixes.js","./patterns/endsWith.js":"node_modules/compromise/src/2-two/preTagger/model/patterns/endsWith.js","./patterns/neighbours.js":"node_modules/compromise/src/2-two/preTagger/model/patterns/neighbours.js","./models/index.js":"node_modules/compromise/src/2-two/preTagger/model/models/index.js","./regex/regex-normal.js":"node_modules/compromise/src/2-two/preTagger/model/regex/regex-normal.js","./regex/regex-text.js":"node_modules/compromise/src/2-two/preTagger/model/regex/regex-text.js","./regex/regex-numbers.js":"node_modules/compromise/src/2-two/preTagger/model/regex/regex-numbers.js","./orgWords.js":"node_modules/compromise/src/2-two/preTagger/model/orgWords.js","./placeWords.js":"node_modules/compromise/src/2-two/preTagger/model/placeWords.js","./_expand/index.js":"node_modules/compromise/src/2-two/preTagger/model/_expand/index.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/1st-pass/01-colons.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var byPunctuation = function byPunctuation(terms, i, model, world) {
  var setTag = world.methods.one.setTag;
  // colon following first word
  // edit: foo
  // breaking: foobar
  if (i === 0 && terms.length >= 3) {
    var hasColon = /:/;
    var post = terms[0].post;
    if (post.match(hasColon)) {
      // phone: 555-2938
      var nextTerm = terms[1];
      if (nextTerm.tags.has('Value') || nextTerm.tags.has('Email') || nextTerm.tags.has('PhoneNumber')) {
        return;
      }
      //
      setTag([terms[0]], 'Expression', world, null, "2-punct-colon''");
    }
  }
};
var _default = exports.default = byPunctuation;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/1st-pass/02-hyphens.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var byHyphen = function byHyphen(terms, i, model, world) {
  var setTag = world.methods.one.setTag;
  // two words w/ a dash
  if (terms[i].post === '-' && terms[i + 1]) {
    setTag([terms[i], terms[i + 1]], 'Hyphenated', world, null, "1-punct-hyphen''");

    // bone-headed, man-made, good-tempered, coursely-ground
    // if (terms[i + 1].tags.has('PastTense')) {
    //   let tags = terms[i].tags
    //   if (tags.has('Noun') || tags.has('Adverb')) {
    //     setTag([terms[i], terms[i + 1]], 'Adjective', world, null, `2-punct-dash''`)
    //   }

    // }
  }
};
var _default = exports.default = byHyphen;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/00-tagSwitch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var prefix = /^(under|over|mis|re|un|dis|semi)-?/;
var tagSwitch = function tagSwitch(terms, i, model) {
  var switches = model.two.switches;
  var term = terms[i];
  if (switches.hasOwnProperty(term.normal)) {
    term.switch = switches[term.normal];
    return;
  }
  // support 'restrike' -> 'strike'
  if (prefix.test(term.normal)) {
    var stem = term.normal.replace(prefix, '');
    if (stem.length > 3 && switches.hasOwnProperty(stem)) {
      term.switch = switches[stem];
    }
  }
};
var _default = exports.default = tagSwitch;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// verbose-mode tagger debuging
var log = function log(term, tag) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var yellow = function yellow(str) {
    return '\x1b[33m\x1b[3m' + str + '\x1b[0m';
  };
  var i = function i(str) {
    return '\x1b[3m' + str + '\x1b[0m';
  };
  var word = term.text || '[' + term.implicit + ']';
  if (typeof tag !== 'string' && tag.length > 2) {
    tag = tag.slice(0, 2).join(', #') + ' +'; //truncate the list of tags
  }
  tag = typeof tag !== 'string' ? tag.join(', #') : tag;
  console.log(" ".concat(yellow(word).padEnd(24), " \x1B[32m\u2192\x1B[0m #").concat(tag.padEnd(22), "  ").concat(i(reason))); // eslint-disable-line
};

// a faster version than the user-facing one in ./methods
var fastTag = function fastTag(term, tag, reason) {
  if (!tag || tag.length === 0) {
    return;
  }
  if (term.frozen === true) {
    return;
  }
  // some logging for debugging
  var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;
  if (env && env.DEBUG_TAGS) {
    log(term, tag, reason);
  }
  term.tags = term.tags || new Set();
  if (typeof tag === 'string') {
    term.tags.add(tag);
  } else {
    tag.forEach(function (tg) {
      return term.tags.add(tg);
    });
  }
};
var _default = exports.default = fastTag;
},{"process":"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_fillTags.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
var _looksPlural = _interopRequireDefault(require("../../../methods/looksPlural.js"));
var _index = _interopRequireDefault(require("../../../methods/transform/verbs/getTense/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// tags that are neither plural or singular
var uncountable = ['Acronym', 'Abbreviation', 'ProperNoun', 'Uncountable', 'Possessive', 'Pronoun', 'Activity', 'Honorific', 'Month'];
// try to guess if each noun is a plural/singular
var setPluralSingular = function setPluralSingular(term) {
  if (!term.tags.has('Noun') || term.tags.has('Plural') || term.tags.has('Singular')) {
    return;
  }
  if (uncountable.find(function (tag) {
    return term.tags.has(tag);
  })) {
    return;
  }
  if ((0, _looksPlural.default)(term.normal)) {
    (0, _fastTag.default)(term, 'Plural', '3-plural-guess');
  } else {
    (0, _fastTag.default)(term, 'Singular', '3-singular-guess');
  }
};

// try to guess the tense of a naked verb
var setTense = function setTense(term) {
  var tags = term.tags;
  if (tags.has('Verb') && tags.size === 1) {
    var guess = (0, _index.default)(term.normal);
    if (guess) {
      (0, _fastTag.default)(term, guess, '3-verb-tense-guess');
    }
  }
};

//add deduced parent tags to our terms
var fillTags = function fillTags(terms, i, model) {
  var term = terms[i];
  //there is probably just one tag, but we'll allow more
  var tags = Array.from(term.tags);
  for (var k = 0; k < tags.length; k += 1) {
    if (model.one.tagSet[tags[k]]) {
      var toAdd = model.one.tagSet[tags[k]].parents;
      (0, _fastTag.default)(term, toAdd, " -inferred by #".concat(tags[k]));
    }
  }
  // turn 'Noun' into Plural/Singular
  setPluralSingular(term);
  // turn 'Verb' into Present/PastTense
  setTense(term, model);
};
var _default = exports.default = fillTags;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js","../../../methods/looksPlural.js":"node_modules/compromise/src/2-two/preTagger/methods/looksPlural.js","../../../methods/transform/verbs/getTense/index.js":"node_modules/compromise/src/2-two/preTagger/methods/transform/verbs/getTense/index.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/01-case.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
var _fillTags = _interopRequireDefault(require("../3rd-pass/_fillTags.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var titleCase = /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])(?:['a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2019\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/;
var hasNumber = /[0-9]/;
var notProper = ['Date', 'Month', 'WeekDay', 'Unit', 'Expression'];

// roman numeral by regex
var hasIVX = /[IVX]/; // does it ~look like~ a roman numeral?
// quick-version
var romanNumeral = /^[IVXLCDM]{2,}$/;
// https://stackoverflow.com/a/267405/168877
var romanNumValid = /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/;
var nope = {
  li: true,
  dc: true,
  md: true,
  dm: true,
  ml: true
};

// if it's a unknown titlecase word, it's a propernoun
var checkCase = function checkCase(terms, i, model) {
  var term = terms[i];
  // assume terms are already indexed
  term.index = term.index || [0, 0];
  var index = term.index[1];
  var str = term.text || ''; //need case info
  // titlecase and not first word of sentence
  if (index !== 0 && titleCase.test(str) === true && hasNumber.test(str) === false) {
    // skip Dates and stuff
    if (notProper.find(function (tag) {
      return term.tags.has(tag);
    })) {
      return null;
    }
    // first word in a quotation?
    if (term.pre.match(/["']$/)) {
      return null;
    }
    if (term.normal === 'the') {
      return null;
    }
    (0, _fillTags.default)(terms, i, model);
    if (!term.tags.has('Noun') && !term.frozen) {
      term.tags.clear();
    }
    (0, _fastTag.default)(term, 'ProperNoun', '2-titlecase');
    return true;
  }
  //roman numberals - XVII
  if (str.length >= 2 && romanNumeral.test(str) && hasIVX.test(str) && romanNumValid.test(str) && !nope[term.normal]) {
    (0, _fastTag.default)(term, 'RomanNumeral', '2-xvii');
    return true;
  }
  return null;
};
var _default = exports.default = checkCase;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js","../3rd-pass/_fillTags.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_fillTags.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/02-suffix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
//sweep-through all suffixes
var suffixLoop = function suffixLoop() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var suffixes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var len = str.length;
  var max = 7;
  if (len <= max) {
    max = len - 1;
  }
  for (var i = max; i > 1; i -= 1) {
    var suffix = str.substring(len - i, len);
    if (suffixes[suffix.length].hasOwnProperty(suffix) === true) {
      // console.log(suffix)
      var tag = suffixes[suffix.length][suffix];
      return tag;
    }
  }
  return null;
};

// decide tag from the ending of the word
var tagBySuffix = function tagBySuffix(terms, i, model) {
  var term = terms[i];
  if (term.tags.size === 0) {
    var tag = suffixLoop(term.normal, model.two.suffixPatterns);
    if (tag !== null) {
      (0, _fastTag.default)(term, tag, '2-suffix');
      term.confidence = 0.7;
      return true;
    }
    // try implicit form of word, too
    if (term.implicit) {
      tag = suffixLoop(term.implicit, model.two.suffixPatterns);
      if (tag !== null) {
        (0, _fastTag.default)(term, tag, '2-implicit-suffix');
        term.confidence = 0.7;
        return true;
      }
    }
    // Infinitive suffix + 's' can be PresentTense
    // if (term.normal[term.normal.length - 1] === 's') {
    //   let str = term.normal.replace(/s$/, '')
    //   if (suffixLoop(str, model.two.suffixPatterns) === 'Infinitive') {
    //     console.log(str)
    //     fastTag(term, 'PresentTense', '2-implied-present')
    //     term.confidence = 0.5
    //     return true
    //   }
    // }
  }
  return null;
};
var _default = exports.default = tagBySuffix;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/03-regex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasApostrophe = /['‘’‛‵′`´]/;

// normal regexes
var doRegs = function doRegs(str, regs) {
  for (var i = 0; i < regs.length; i += 1) {
    if (regs[i][0].test(str) === true) {
      return regs[i];
    }
  }
  return null;
};
// suffix-regexes, indexed by last-character
var doEndsWith = function doEndsWith() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var byEnd = arguments.length > 1 ? arguments[1] : undefined;
  var char = str[str.length - 1];
  if (byEnd.hasOwnProperty(char) === true) {
    var regs = byEnd[char] || [];
    for (var r = 0; r < regs.length; r += 1) {
      if (regs[r][0].test(str) === true) {
        return regs[r];
      }
    }
  }
  return null;
};
var checkRegex = function checkRegex(terms, i, model, world) {
  var setTag = world.methods.one.setTag;
  var _model$two = model.two,
    regexText = _model$two.regexText,
    regexNormal = _model$two.regexNormal,
    regexNumbers = _model$two.regexNumbers,
    endsWith = _model$two.endsWith;
  var term = terms[i];
  var normal = term.machine || term.normal;
  var text = term.text;
  // keep dangling apostrophe?
  if (hasApostrophe.test(term.post) && !hasApostrophe.test(term.pre)) {
    text += term.post.trim();
  }
  var arr = doRegs(text, regexText) || doRegs(normal, regexNormal);
  // hide a bunch of number regexes behind this one
  if (!arr && /[0-9]/.test(normal)) {
    arr = doRegs(normal, regexNumbers);
  }
  // only run endsWith if we're desperate
  if (!arr && term.tags.size === 0) {
    arr = doEndsWith(normal, endsWith);
  }
  if (arr) {
    // console.log(arr)
    setTag([term], arr[1], world, null, "2-regex-'".concat(arr[2] || arr[0], "'"));
    term.confidence = 0.6;
    return true;
  }
  return null;
};
var _default = exports.default = checkRegex;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/04-prefix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// const prefixes = /^(anti|re|un|non|extra|inter|intra|over)([a-z-]{3})/

//sweep-through all prefixes
var prefixLoop = function prefixLoop() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var prefixes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var len = str.length;
  var max = 7;
  if (max > len - 3) {
    max = len - 3;
  }
  for (var i = max; i > 2; i -= 1) {
    var prefix = str.substring(0, i);
    if (prefixes[prefix.length].hasOwnProperty(prefix) === true) {
      var tag = prefixes[prefix.length][prefix];
      return tag;
    }
  }
  return null;
};

// give 'overwork' the same tag as 'work'
var checkPrefix = function checkPrefix(terms, i, model) {
  var term = terms[i];
  if (term.tags.size === 0) {
    var tag = prefixLoop(term.normal, model.two.prefixPatterns);
    if (tag !== null) {
      // console.log(term.normal, '->', tag)
      (0, _fastTag.default)(term, tag, '2-prefix');
      term.confidence = 0.5;
      return true;
    }
  }
  return null;
};
var _default = exports.default = checkPrefix;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/05-year.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var min = 1400;
var max = 2100;
var dateWords = new Set(['in', 'on', 'by', 'until', 'for', 'to', 'during', 'throughout', 'through', 'within', 'before', 'after', 'of', 'this', 'next', 'last', 'circa', 'around', 'post', 'pre', 'budget', 'classic', 'plan', 'may']);
var seemsGood = function seemsGood(term) {
  if (!term) {
    return false;
  }
  var str = term.normal || term.implicit;
  if (dateWords.has(str)) {
    return true;
  }
  if (term.tags.has('Date') || term.tags.has('Month') || term.tags.has('WeekDay') || term.tags.has('Year')) {
    return true;
  }
  // 1999 Film Festival
  if (term.tags.has('ProperNoun')) {
    return true;
  }
  return false;
};
var seemsOkay = function seemsOkay(term) {
  if (!term) {
    return false;
  }
  if (term.tags.has('Ordinal')) {
    return true;
  }
  // untagged 'june 13 2007'
  if (term.tags.has('Cardinal') && term.normal.length < 3) {
    return true;
  }
  // 2020 was ..
  if (term.normal === 'is' || term.normal === 'was') {
    return true;
  }
  return false;
};
var seemsFine = function seemsFine(term) {
  return term && (term.tags.has('Date') || term.tags.has('Month') || term.tags.has('WeekDay') || term.tags.has('Year'));
};

// recognize '1993' as a year
var tagYear = function tagYear(terms, i) {
  var term = terms[i];
  if (term.tags.has('NumericValue') && term.tags.has('Cardinal') && term.normal.length === 4) {
    var num = Number(term.normal);
    // number between 1400 and 2100
    if (num && !isNaN(num)) {
      if (num > min && num < max) {
        var lastTerm = terms[i - 1];
        var nextTerm = terms[i + 1];
        if (seemsGood(lastTerm) || seemsGood(nextTerm)) {
          return (0, _fastTag.default)(term, 'Year', '2-tagYear');
        }
        // or is it really-close to a year?
        if (num >= 1920 && num < 2025) {
          // look at neighbours
          if (seemsOkay(lastTerm) || seemsOkay(nextTerm)) {
            return (0, _fastTag.default)(term, 'Year', '2-tagYear-close');
          }
          // look at far-neighbours
          if (seemsFine(terms[i - 2]) || seemsFine(terms[i + 2])) {
            return (0, _fastTag.default)(term, 'Year', '2-tagYear-far');
          }
          // 'the 2002 hit', 'my 1950 convertable'
          if (lastTerm && (lastTerm.tags.has('Determiner') || lastTerm.tags.has('Possessive'))) {
            if (nextTerm && nextTerm.tags.has('Noun') && !nextTerm.tags.has('Plural')) {
              return (0, _fastTag.default)(term, 'Year', '2-tagYear-noun');
            }
          }
        }
      }
    }
  }
  return null;
};
var _default = exports.default = tagYear;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/07-verb-type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var verbType = function verbType(terms, i, model, world) {
  var setTag = world.methods.one.setTag;
  var term = terms[i];
  var types = ['PastTense', 'PresentTense', 'Auxiliary', 'Modal', 'Particle'];
  if (term.tags.has('Verb')) {
    var type = types.find(function (typ) {
      return term.tags.has(typ);
    });
    // is it a bare #Verb tag?
    if (!type) {
      setTag([term], 'Infinitive', world, null, "2-verb-type''");
    }
  }
};
var _default = exports.default = verbType;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/01-acronym.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var oneLetterAcronym = /^[A-Z]('s|,)?$/;
var isUpperCase = /^[A-Z-]+$/;
var upperThenS = /^[A-Z]+s$/;
var periodAcronym = /([A-Z]\.)+[A-Z]?,?$/;
var noPeriodAcronym = /[A-Z]{2,}('s|,)?$/;
var lowerCaseAcronym = /([a-z]\.)+[a-z]\.?$/;
var oneLetterWord = {
  I: true,
  A: true
};

// only assume these are places if they are uppercased
var places = {
  la: true,
  ny: true,
  us: true,
  dc: true,
  gb: true
};

// just uppercase acronyms, no periods - 'UNOCHA'
var isNoPeriodAcronym = function isNoPeriodAcronym(term, model) {
  var str = term.text;
  // ensure it's all upper-case
  if (isUpperCase.test(str) === false) {
    // allow lower-case plural - 'MMVAs'
    if (str.length > 3 && upperThenS.test(str) === true) {
      str = str.replace(/s$/, '');
    } else {
      return false;
    }
  }
  // long capitalized words are not usually either
  if (str.length > 5) {
    return false;
  }
  // 'I' is not a acronym
  if (oneLetterWord.hasOwnProperty(str)) {
    return false;
  }
  // known-words, like 'PIZZA' is not an acronym.
  if (model.one.lexicon.hasOwnProperty(term.normal)) {
    return false;
  }
  //like N.D.A
  if (periodAcronym.test(str) === true) {
    return true;
  }
  //like c.e.o
  if (lowerCaseAcronym.test(str) === true) {
    return true;
  }
  //like 'F.'
  if (oneLetterAcronym.test(str) === true) {
    return true;
  }
  //like NDA
  if (noPeriodAcronym.test(str) === true) {
    return true;
  }
  return false;
};
var isAcronym = function isAcronym(terms, i, model) {
  var term = terms[i];
  //these are not acronyms
  if (term.tags.has('RomanNumeral') || term.tags.has('Acronym') || term.frozen) {
    return null;
  }
  //non-period ones are harder
  if (isNoPeriodAcronym(term, model)) {
    term.tags.clear();
    (0, _fastTag.default)(term, ['Acronym', 'Noun'], '3-no-period-acronym');
    // ny, la
    if (places[term.normal] === true) {
      (0, _fastTag.default)(term, 'Place', '3-place-acronym');
    }
    // UFOs
    if (upperThenS.test(term.text) === true) {
      (0, _fastTag.default)(term, 'Plural', '3-plural-acronym');
    }
    // if(term.normal
    return true;
  }
  // one-letter acronyms
  if (!oneLetterWord.hasOwnProperty(term.text) && oneLetterAcronym.test(term.text)) {
    term.tags.clear();
    (0, _fastTag.default)(term, ['Acronym', 'Noun'], '3-one-letter-acronym');
    return true;
  }
  //if it's a very-short organization?
  if (term.tags.has('Organization') && term.text.length <= 3) {
    (0, _fastTag.default)(term, 'Acronym', '3-org-acronym');
    return true;
  }
  // upper-case org, like UNESCO
  if (term.tags.has('Organization') && isUpperCase.test(term.text) && term.text.length <= 6) {
    (0, _fastTag.default)(term, 'Acronym', '3-titlecase-acronym');
    return true;
  }
  return null;
};
var _default = exports.default = isAcronym;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/02-neighbours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
var _fillTags = _interopRequireDefault(require("./_fillTags.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var lookAtWord = function lookAtWord(term, words) {
  if (!term) {
    return null;
  }
  // look at prev word <-
  var found = words.find(function (a) {
    return term.normal === a[0];
  });
  if (found) {
    return found[1];
  }
  return null;
};
var lookAtTag = function lookAtTag(term, tags) {
  if (!term) {
    return null;
  }
  var found = tags.find(function (a) {
    return term.tags.has(a[0]);
  });
  if (found) {
    return found[1];
  }
  return null;
};

// look at neighbours for hints on unknown words
var neighbours = function neighbours(terms, i, model) {
  var _model$two$neighbours = model.two.neighbours,
    leftTags = _model$two$neighbours.leftTags,
    leftWords = _model$two$neighbours.leftWords,
    rightWords = _model$two$neighbours.rightWords,
    rightTags = _model$two$neighbours.rightTags;
  var term = terms[i];
  if (term.tags.size === 0) {
    var tag = null;
    // look left <-
    tag = tag || lookAtWord(terms[i - 1], leftWords);
    // look right ->
    tag = tag || lookAtWord(terms[i + 1], rightWords);
    // look left <-
    tag = tag || lookAtTag(terms[i - 1], leftTags);
    // look right ->
    tag = tag || lookAtTag(terms[i + 1], rightTags);
    if (tag) {
      (0, _fastTag.default)(term, tag, '3-[neighbour]');
      (0, _fillTags.default)(terms, i, model);
      terms[i].confidence = 0.2;
      return true;
    }
  }
  return null;
};
var _default = exports.default = neighbours;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js","./_fillTags.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_fillTags.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/03-orgWords.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isTitleCase = function isTitleCase(str) {
  return /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])(?:['a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2019\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/.test(str);
};
var isOrg = function isOrg(term, i, yelling) {
  if (!term) {
    return false;
  }
  if (term.tags.has('FirstName') || term.tags.has('Place')) {
    return false;
  }
  if (term.tags.has('ProperNoun') || term.tags.has('Organization') || term.tags.has('Acronym')) {
    return true;
  }
  // allow anything titlecased to be an org
  if (!yelling && isTitleCase(term.text)) {
    // only tag a titlecased first-word, if it checks-out
    if (i === 0) {
      return term.tags.has('Singular');
    }
    return true;
  }
  return false;
};
var tagOrgs = function tagOrgs(terms, i, world, yelling) {
  var orgWords = world.model.two.orgWords;
  var setTag = world.methods.one.setTag;
  var term = terms[i];
  var str = term.machine || term.normal;
  if (orgWords[str] === true && isOrg(terms[i - 1], i - 1, yelling)) {
    setTag([terms[i]], 'Organization', world, null, '3-[org-word]');
    // loop backwards, tag organization-like things
    for (var t = i; t >= 0; t -= 1) {
      if (isOrg(terms[t], t, yelling)) {
        setTag([terms[t]], 'Organization', world, null, '3-[org-word]');
      } else {
        break;
      }
    }
  }
  return null;
};
var _default = exports.default = tagOrgs;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/04-placeWords.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isTitleCase = function isTitleCase(str) {
  return /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])(?:['a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2019\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/.test(str);
};
var isPossessive = /'s$/;

// words that can fit inside a place
var placeCont = new Set(['athletic', 'city', 'community', 'eastern', 'federal', 'financial', 'great', 'historic', 'historical', 'local', 'memorial', 'municipal', 'national', 'northern', 'provincial', 'southern', 'state', 'western', 'spring', 'pine', 'sunset', 'view', 'oak', 'maple', 'spruce', 'cedar', 'willow']);
// center of...
var noBefore = new Set(['center', 'centre', 'way', 'range', 'bar', 'bridge', 'field', 'pit']);
var isPlace = function isPlace(term, i, yelling) {
  if (!term) {
    return false;
  }
  var tags = term.tags;
  if (tags.has('Organization') || tags.has('Possessive') || isPossessive.test(term.normal)) {
    return false;
  }
  if (tags.has('ProperNoun') || tags.has('Place')) {
    return true;
  }
  // allow anything titlecased to be an org
  if (!yelling && isTitleCase(term.text)) {
    // only tag a titlecased first-word, if it checks-out
    if (i === 0) {
      return tags.has('Singular');
    }
    return true;
  }
  return false;
};
var tagOrgs = function tagOrgs(terms, i, world, yelling) {
  var placeWords = world.model.two.placeWords;
  var setTag = world.methods.one.setTag;
  var term = terms[i];
  var str = term.machine || term.normal;

  // 'river', delta, street, etc
  if (placeWords[str] === true) {
    //loop backward - 'Foo River ...'
    for (var n = i - 1; n >= 0; n -= 1) {
      // 'municipal ...'
      if (placeCont.has(terms[n].normal)) {
        continue;
      }
      if (isPlace(terms[n], n, yelling)) {
        setTag(terms.slice(n, i + 1), 'Place', world, null, '3-[place-of-foo]');
        continue;
      }
      break;
    }
    //loop forward - 'River of Foo...'
    // 'center of x'
    if (noBefore.has(str)) {
      return false;
    }
    for (var _n = i + 1; _n < terms.length; _n += 1) {
      if (isPlace(terms[_n], _n, yelling)) {
        setTag(terms.slice(i, _n + 1), 'Place', world, null, '3-[foo-place]');
        return true;
      }
      // 'municipal ...'
      if (terms[_n].normal === 'of' || placeCont.has(terms[_n].normal)) {
        continue;
      }
      break;
    }
  }
  return null;
};
var _default = exports.default = tagOrgs;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/05-fallback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastTag = _interopRequireDefault(require("../_fastTag.js"));
var _fillTags = _interopRequireDefault(require("./_fillTags.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var nounFallback = function nounFallback(terms, i, model) {
  var isEmpty = false;
  var tags = terms[i].tags;
  if (tags.size === 0) {
    isEmpty = true;
  } else if (tags.size === 1) {
    // weaker tags to ignore
    if (tags.has('Hyphenated') || tags.has('HashTag') || tags.has('Prefix') || tags.has('SlashedTerm')) {
      isEmpty = true;
    }
  }
  if (isEmpty) {
    (0, _fastTag.default)(terms[i], 'Noun', '3-[fallback]');
    // try to give it singluar/plural tags, too
    (0, _fillTags.default)(terms, i, model);
    terms[i].confidence = 0.1;
  }
};
var _default = exports.default = nounFallback;
},{"../_fastTag.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/_fastTag.js","./_fillTags.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_fillTags.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_adhoc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var isTitleCase = /^[A-Z][a-z]/;
var isCapital = function isCapital(terms, i) {
  if (terms[i].tags.has('ProperNoun') && isTitleCase.test(terms[i].text)) {
    // 'Comfort Inn'
    return 'Noun';
  }
  return null;
};
var isAlone = function isAlone(terms, i, tag) {
  if (i === 0 && !terms[1]) {
    // 'Help'
    return tag;
  }
  return null;
};

// 'a rental'
var isEndNoun = function isEndNoun(terms, i) {
  if (!terms[i + 1] && terms[i - 1] && terms[i - 1].tags.has('Determiner')) {
    return 'Noun';
  }
  return null;
};

// the first word in the sentence
var isStart = function isStart(terms, i, tag) {
  if (i === 0 && terms.length > 3) {
    return tag;
  }
  return null;
};
var adhoc = {
  'Adj|Gerund': function AdjGerund(terms, i) {
    return isCapital(terms, i);
  },
  'Adj|Noun': function AdjNoun(terms, i) {
    return isCapital(terms, i) || isEndNoun(terms, i);
  },
  'Actor|Verb': function ActorVerb(terms, i) {
    return isCapital(terms, i);
  },
  'Adj|Past': function AdjPast(terms, i) {
    return isCapital(terms, i);
  },
  'Adj|Present': function AdjPresent(terms, i) {
    return isCapital(terms, i);
  },
  'Noun|Gerund': function NounGerund(terms, i) {
    return isCapital(terms, i);
  },
  'Noun|Verb': function NounVerb(terms, i) {
    return i > 0 && isCapital(terms, i) || isAlone(terms, i, 'Infinitive');
  },
  'Plural|Verb': function PluralVerb(terms, i) {
    return isCapital(terms, i) || isAlone(terms, i, 'PresentTense') || isStart(terms, i, 'Plural');
  },
  'Person|Noun': function PersonNoun(terms, i) {
    return isCapital(terms, i);
  },
  'Person|Verb': function PersonVerb(terms, i) {
    if (i !== 0) {
      return isCapital(terms, i);
    }
    return null;
  },
  'Person|Adj': function PersonAdj(terms, i) {
    if (i === 0 && terms.length > 1) {
      return 'Person';
    }
    return isCapital(terms, i) ? 'Person' : null;
  }
};
var _default = exports.default = adhoc;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/06-switches.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fillTags = _interopRequireDefault(require("./_fillTags.js"));
var _adhoc = _interopRequireDefault(require("./_adhoc.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* eslint-disable no-console */

var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;
var prefix = /^(under|over|mis|re|un|dis|semi)-?/;
var checkWord = function checkWord(term, obj) {
  if (!term || !obj) {
    return null;
  }
  var str = term.normal || term.implicit;
  var found = null;
  if (obj.hasOwnProperty(str)) {
    found = obj[str];
  }
  if (found && env.DEBUG_TAGS) {
    console.log("\n  \x1B[2m\x1B[3m     \u2193 - '".concat(str, "' \x1B[0m"));
  }
  return found;
};
var checkTag = function checkTag(term) {
  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var tagSet = arguments.length > 2 ? arguments[2] : undefined;
  if (!term || !obj) {
    return null;
  }
  // rough sort, so 'Noun' is after ProperNoun, etc
  var tags = Array.from(term.tags).sort(function (a, b) {
    var numA = tagSet[a] ? tagSet[a].parents.length : 0;
    var numB = tagSet[b] ? tagSet[b].parents.length : 0;
    return numA > numB ? -1 : 1;
  });
  var found = tags.find(function (tag) {
    return obj[tag];
  });
  if (found && env.DEBUG_TAGS) {
    console.log("  \x1B[2m\x1B[3m      \u2193 - '".concat(term.normal || term.implicit, "' (#").concat(found, ")  \x1B[0m"));
  }
  found = obj[found];
  return found;
};
var pickTag = function pickTag(terms, i, clues, model) {
  if (!clues) {
    return null;
  }
  var beforeIndex = terms[i - 1]?.text !== 'also' ? i - 1 : Math.max(0, i - 2);
  var tagSet = model.one.tagSet;
  // look -> right word, first
  var tag = checkWord(terms[i + 1], clues.afterWords);
  // look <- left word, second
  tag = tag || checkWord(terms[beforeIndex], clues.beforeWords);
  // look <- left tag
  tag = tag || checkTag(terms[beforeIndex], clues.beforeTags, tagSet);
  // look -> right tag
  tag = tag || checkTag(terms[i + 1], clues.afterTags, tagSet);
  // console.log(clues)
  return tag;
};

// words like 'bob' that can change between two tags
var doSwitches = function doSwitches(terms, i, world) {
  var model = world.model;
  var setTag = world.methods.one.setTag;
  var _model$two = model.two,
    switches = _model$two.switches,
    clues = _model$two.clues;
  var term = terms[i];
  var str = term.normal || term.implicit || '';
  // support prefixes for switching words
  if (prefix.test(str) && !switches[str]) {
    str = str.replace(prefix, ''); // could use some guards, here
  }
  if (term.switch) {
    var form = term.switch;
    // skip propernouns, acronyms, etc
    if (term.tags.has('Acronym') || term.tags.has('PhrasalVerb')) {
      return;
    }
    var tag = pickTag(terms, i, clues[form], model);
    // lean-harder on some variable forms
    if (_adhoc.default[form]) {
      tag = _adhoc.default[form](terms, i) || tag;
    }
    // did we find anything?
    if (tag) {
      // tag it
      setTag([term], tag, world, null, "3-[switch] (".concat(form, ")"));
      // add plural/singular etc.
      (0, _fillTags.default)(terms, i, model);
    } else if (env.DEBUG_TAGS) {
      console.log("\n -> X  - '".concat(str, "'  : (").concat(form, ")  "));
    }
  }
};
var _default = exports.default = doSwitches;
},{"./_fillTags.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_fillTags.js","./_adhoc.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_adhoc.js","process":"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/08-imperative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var beside = {
  there: true,
  //go there
  this: true,
  //try this
  it: true,
  //do it
  him: true,
  her: true,
  us: true //tell us
};

// '[place] tea bags in hot water'
var imperative = function imperative(terms, world) {
  var setTag = world.methods.one.setTag;
  var multiWords = world.model.one._multiCache || {};
  var t = terms[0];
  var isRight = t.switch === 'Noun|Verb' || t.tags.has('Infinitive');
  if (isRight && terms.length >= 2) {
    // ensure rest of sentence is ok
    if (terms.length < 4 && !beside[terms[1].normal]) {
      return;
    }
    // avoid multi-noun words like '[board] room'
    if (!t.tags.has('PhrasalVerb') && multiWords.hasOwnProperty(t.normal)) {
      return;
    }
    // is the next word a noun? - 'compile information ..'
    var nextNoun = terms[1].tags.has('Noun') || terms[1].tags.has('Determiner');
    if (nextNoun) {
      // ensure no soon-verb -  'waste materials are ..'
      var soonVerb = terms.slice(1, 3).some(function (term) {
        return term.tags.has('Verb');
      });
      if (!soonVerb || t.tags.has('#PhrasalVerb')) {
        setTag([t], 'Imperative', world, null, '3-[imperative]');
      }
    }
  }
};
var _default = exports.default = imperative;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/tagger/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _colons = _interopRequireDefault(require("./1st-pass/01-colons.js"));
var _hyphens = _interopRequireDefault(require("./1st-pass/02-hyphens.js"));
var _tagSwitch = _interopRequireDefault(require("./2nd-pass/00-tagSwitch.js"));
var _case = _interopRequireDefault(require("./2nd-pass/01-case.js"));
var _suffix = _interopRequireDefault(require("./2nd-pass/02-suffix.js"));
var _regex = _interopRequireDefault(require("./2nd-pass/03-regex.js"));
var _prefix = _interopRequireDefault(require("./2nd-pass/04-prefix.js"));
var _year = _interopRequireDefault(require("./2nd-pass/05-year.js"));
var _verbType = _interopRequireDefault(require("./3rd-pass/07-verb-type.js"));
var _fillTags = _interopRequireDefault(require("./3rd-pass/_fillTags.js"));
var _acronym = _interopRequireDefault(require("./3rd-pass/01-acronym.js"));
var _neighbours = _interopRequireDefault(require("./3rd-pass/02-neighbours.js"));
var _orgWords = _interopRequireDefault(require("./3rd-pass/03-orgWords.js"));
var _placeWords = _interopRequireDefault(require("./3rd-pass/04-placeWords.js"));
var _fallback = _interopRequireDefault(require("./3rd-pass/05-fallback.js"));
var _switches = _interopRequireDefault(require("./3rd-pass/06-switches.js"));
var _imperative = _interopRequireDefault(require("./3rd-pass/08-imperative.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// is it all yelling-case?
var ignoreCase = function ignoreCase(terms) {
  // allow 'John F Kennedy'
  if (terms.filter(function (t) {
    return !t.tags.has('ProperNoun');
  }).length <= 3) {
    return false;
  }
  var lowerCase = /^[a-z]/;
  return terms.every(function (t) {
    return !lowerCase.test(t.text);
  });
};

// taggers with no clause-splitting
var firstPass = function firstPass(docs, model, world) {
  docs.forEach(function (terms) {
    // check whitespace/punctuation
    (0, _colons.default)(terms, 0, model, world);
  });
};

// these methods don't care about word-neighbours
var secondPass = function secondPass(terms, model, world, isYelling) {
  for (var i = 0; i < terms.length; i += 1) {
    // skip frozen terms, for now
    if (terms[i].frozen === true) {
      continue;
    }
    // mark Noun|Verb on term metadata
    (0, _tagSwitch.default)(terms, i, model);
    //  is it titlecased?
    if (isYelling === false) {
      (0, _case.default)(terms, i, model);
    }
    // look at word ending
    (0, _suffix.default)(terms, i, model);
    // try look-like rules
    (0, _regex.default)(terms, i, model, world);
    // check for recognized prefix, like 'micro-'
    (0, _prefix.default)(terms, i, model);
    // turn '1993' into a year
    (0, _year.default)(terms, i, model);
  }
};

// neighbour-based tagging
var thirdPass = function thirdPass(terms, model, world, isYelling) {
  for (var i = 0; i < terms.length; i += 1) {
    // let these tags get layered
    var found = (0, _acronym.default)(terms, i, model);
    // deduce parent tags
    (0, _fillTags.default)(terms, i, model);
    // look left+right for hints
    found = found || (0, _neighbours.default)(terms, i, model);
    //  ¯\_(ツ)_/¯ - found nothing
    found = found || (0, _fallback.default)(terms, i, model);
  }
  for (var _i = 0; _i < terms.length; _i += 1) {
    // skip these
    if (terms[_i].frozen === true) {
      continue;
    }
    // Johnson LLC
    (0, _orgWords.default)(terms, _i, world, isYelling);
    // Wawel Castle
    (0, _placeWords.default)(terms, _i, world, isYelling);
    // verb-noun disambiguation, etc
    (0, _switches.default)(terms, _i, world);
    // give bare verbs more tags
    (0, _verbType.default)(terms, _i, model, world);
    // hard-nosed
    (0, _hyphens.default)(terms, _i, model, world);
  }
  // place tea bags
  (0, _imperative.default)(terms, world);
};
var preTagger = function preTagger(view) {
  var methods = view.methods,
    model = view.model,
    world = view.world;
  var docs = view.docs;
  // try some early stuff
  firstPass(docs, model, world);
  // roughly split sentences up by clause
  var document = methods.two.quickSplit(docs);
  // start with all terms
  for (var n = 0; n < document.length; n += 1) {
    var terms = document[n];
    // is it all upper-case?
    var isYelling = ignoreCase(terms);
    // guess by the letters
    secondPass(terms, model, world, isYelling);
    // guess by the neighbours
    thirdPass(terms, model, world, isYelling);
  }
  return document;
};
var _default = exports.default = preTagger;
},{"./1st-pass/01-colons.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/1st-pass/01-colons.js","./1st-pass/02-hyphens.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/1st-pass/02-hyphens.js","./2nd-pass/00-tagSwitch.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/00-tagSwitch.js","./2nd-pass/01-case.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/01-case.js","./2nd-pass/02-suffix.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/02-suffix.js","./2nd-pass/03-regex.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/03-regex.js","./2nd-pass/04-prefix.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/04-prefix.js","./2nd-pass/05-year.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/2nd-pass/05-year.js","./3rd-pass/07-verb-type.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/07-verb-type.js","./3rd-pass/_fillTags.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/_fillTags.js","./3rd-pass/01-acronym.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/01-acronym.js","./3rd-pass/02-neighbours.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/02-neighbours.js","./3rd-pass/03-orgWords.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/03-orgWords.js","./3rd-pass/04-placeWords.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/04-placeWords.js","./3rd-pass/05-fallback.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/05-fallback.js","./3rd-pass/06-switches.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/06-switches.js","./3rd-pass/08-imperative.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/3rd-pass/08-imperative.js"}],"node_modules/compromise/src/2-two/preTagger/compute/root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var toRoot = {
  // 'spencer's' -> 'spencer'
  'Possessive': function Possessive(term) {
    var str = term.machine || term.normal || term.text;
    str = str.replace(/'s$/, '');
    return str;
  },
  // 'drinks' -> 'drink'
  'Plural': function Plural(term, world) {
    var str = term.machine || term.normal || term.text;
    return world.methods.two.transform.noun.toSingular(str, world.model);
  },
  // ''
  'Copula': function Copula() {
    return 'is';
  },
  // 'walked' -> 'walk'
  'PastTense': function PastTense(term, world) {
    var str = term.machine || term.normal || term.text;
    return world.methods.two.transform.verb.toInfinitive(str, world.model, 'PastTense');
  },
  // 'walking' -> 'walk'
  'Gerund': function Gerund(term, world) {
    var str = term.machine || term.normal || term.text;
    return world.methods.two.transform.verb.toInfinitive(str, world.model, 'Gerund');
  },
  // 'walks' -> 'walk'
  'PresentTense': function PresentTense(term, world) {
    var str = term.machine || term.normal || term.text;
    if (term.tags.has('Infinitive')) {
      return str;
    }
    return world.methods.two.transform.verb.toInfinitive(str, world.model, 'PresentTense');
  },
  // 'quieter' -> 'quiet'
  'Comparative': function Comparative(term, world) {
    var str = term.machine || term.normal || term.text;
    return world.methods.two.transform.adjective.fromComparative(str, world.model);
  },
  // 'quietest' -> 'quiet'
  'Superlative': function Superlative(term, world) {
    var str = term.machine || term.normal || term.text;
    return world.methods.two.transform.adjective.fromSuperlative(str, world.model);
  },
  // 'suddenly' -> 'sudden'
  'Adverb': function Adverb(term, world) {
    var fromAdverb = world.methods.two.transform.adjective.fromAdverb;
    var str = term.machine || term.normal || term.text;
    return fromAdverb(str);
  }
};
var getRoot = function getRoot(view) {
  var world = view.world;
  var keys = Object.keys(toRoot);
  view.docs.forEach(function (terms) {
    for (var i = 0; i < terms.length; i += 1) {
      var term = terms[i];
      for (var k = 0; k < keys.length; k += 1) {
        if (term.tags.has(keys[k])) {
          var fn = toRoot[keys[k]];
          var root = fn(term, world);
          if (term.normal !== root) {
            term.root = root;
          }
          break;
        }
      }
    }
  });
};
var _default = exports.default = getRoot;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/penn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// rough connection between compromise tagset and Penn Treebank
// https://www.ling.upenn.edu/courses/Fall_2003/ling001/penn_treebank_pos.html

var mapping = {
  // adverbs
  // 'Comparative': 'RBR',
  // 'Superlative': 'RBS',
  Adverb: 'RB',
  // adjectives
  Comparative: 'JJR',
  Superlative: 'JJS',
  Adjective: 'JJ',
  TO: 'Conjunction',
  // verbs
  Modal: 'MD',
  Auxiliary: 'MD',
  Gerund: 'VBG',
  //throwing
  PastTense: 'VBD',
  //threw
  Participle: 'VBN',
  //thrown
  PresentTense: 'VBZ',
  //throws
  Infinitive: 'VB',
  //throw
  Particle: 'RP',
  //phrasal particle
  Verb: 'VB',
  // throw

  // pronouns
  Pronoun: 'PRP',
  // misc
  Cardinal: 'CD',
  Conjunction: 'CC',
  Determiner: 'DT',
  Preposition: 'IN',
  // 'Determiner': 'WDT',
  // 'Expression': 'FW',
  QuestionWord: 'WP',
  Expression: 'UH',
  //nouns
  Possessive: 'POS',
  ProperNoun: 'NNP',
  Person: 'NNP',
  Place: 'NNP',
  Organization: 'NNP',
  Singular: 'NN',
  Plural: 'NNS',
  Noun: 'NN',
  There: 'EX' //'there'
  // 'Adverb':'WRB',
  // 'Noun':'PDT', //predeterminer
  // 'Noun':'SYM', //symbol
  // 'Noun':'NFP', //

  //  WDT 	Wh-determiner
  // 	WP 	Wh-pronoun
  // 	WP$ 	Possessive wh-pronoun
  // 	WRB 	Wh-adverb
};
var toPenn = function toPenn(term) {
  // try some ad-hoc ones
  if (term.tags.has('ProperNoun') && term.tags.has('Plural')) {
    return 'NNPS';
  }
  if (term.tags.has('Possessive') && term.tags.has('Pronoun')) {
    return 'PRP$';
  }
  if (term.normal === 'there') {
    return 'EX';
  }
  if (term.normal === 'to') {
    return 'TO';
  }
  // run through an ordered list of tags
  var arr = term.tagRank || [];
  for (var i = 0; i < arr.length; i += 1) {
    if (mapping.hasOwnProperty(arr[i])) {
      return mapping[arr[i]];
    }
  }
  return null;
};
var pennTag = function pennTag(view) {
  view.compute('tagRank');
  view.docs.forEach(function (terms) {
    terms.forEach(function (term) {
      term.penn = toPenn(term);
    });
  });
};
var _default = exports.default = pennTag;
},{}],"node_modules/compromise/src/2-two/preTagger/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./tagger/index.js"));
var _root = _interopRequireDefault(require("./root.js"));
var _penn = _interopRequireDefault(require("./penn.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  preTagger: _index.default,
  root: _root.default,
  penn: _penn.default
};
},{"./tagger/index.js":"node_modules/compromise/src/2-two/preTagger/compute/tagger/index.js","./root.js":"node_modules/compromise/src/2-two/preTagger/compute/root.js","./penn.js":"node_modules/compromise/src/2-two/preTagger/compute/penn.js"}],"node_modules/compromise/src/2-two/preTagger/tagSet/nouns.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var entity = ['Person', 'Place', 'Organization'];
var _default = exports.default = {
  Noun: {
    not: ['Verb', 'Adjective', 'Adverb', 'Value', 'Determiner']
  },
  Singular: {
    is: 'Noun',
    not: ['Plural', 'Uncountable']
  },
  // 'Canada'
  ProperNoun: {
    is: 'Noun'
  },
  Person: {
    is: 'Singular',
    also: ['ProperNoun'],
    not: ['Place', 'Organization', 'Date']
  },
  FirstName: {
    is: 'Person'
  },
  MaleName: {
    is: 'FirstName',
    not: ['FemaleName', 'LastName']
  },
  FemaleName: {
    is: 'FirstName',
    not: ['MaleName', 'LastName']
  },
  LastName: {
    is: 'Person',
    not: ['FirstName']
  },
  // 'dr.'
  Honorific: {
    is: 'Person',
    not: ['FirstName', 'LastName', 'Value']
  },
  Place: {
    is: 'Singular',
    not: ['Person', 'Organization']
  },
  Country: {
    is: 'Place',
    also: ['ProperNoun'],
    not: ['City']
  },
  City: {
    is: 'Place',
    also: ['ProperNoun'],
    not: ['Country']
  },
  // 'california'
  Region: {
    is: 'Place',
    also: ['ProperNoun']
  },
  Address: {
    // is: 'Place',
  },
  Organization: {
    is: 'ProperNoun',
    not: ['Person', 'Place']
  },
  SportsTeam: {
    is: 'Organization'
  },
  School: {
    is: 'Organization'
  },
  Company: {
    is: 'Organization'
  },
  Plural: {
    is: 'Noun',
    not: ['Singular', 'Uncountable']
  },
  // 'gravity'
  Uncountable: {
    is: 'Noun'
  },
  // 'it'
  Pronoun: {
    is: 'Noun',
    not: entity
  },
  // 'swimmer'
  Actor: {
    is: 'Noun',
    not: ['Place', 'Organization']
  },
  // walking
  Activity: {
    is: 'Noun',
    not: ['Person', 'Place']
  },
  // kilometres
  Unit: {
    is: 'Noun',
    not: entity
  },
  // canadian
  Demonym: {
    is: 'Noun',
    also: ['ProperNoun'],
    not: entity
  },
  // [spencer's] hat
  Possessive: {
    is: 'Noun'
  },
  // 'yourself'
  Reflexive: {
    is: 'Pronoun'
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/tagSet/verbs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  Verb: {
    not: ['Noun', 'Adjective', 'Adverb', 'Value', 'Expression']
  },
  // 'he [walks]'
  PresentTense: {
    is: 'Verb',
    not: ['PastTense', 'FutureTense']
  },
  // 'will [walk]'
  Infinitive: {
    is: 'PresentTense',
    not: ['Gerund']
  },
  // '[walk] now!'
  Imperative: {
    is: 'Verb',
    not: ['PastTense', 'Gerund', 'Copula']
  },
  // walking
  Gerund: {
    is: 'PresentTense',
    not: ['Copula']
  },
  // walked
  PastTense: {
    is: 'Verb',
    not: ['PresentTense', 'Gerund', 'FutureTense']
  },
  // will walk
  FutureTense: {
    is: 'Verb',
    not: ['PresentTense', 'PastTense']
  },
  // is/was
  Copula: {
    is: 'Verb'
  },
  // '[could] walk'
  Modal: {
    is: 'Verb',
    not: ['Infinitive']
  },
  // 'awaken'
  Participle: {
    is: 'PastTense'
  },
  // '[will have had] walked'
  Auxiliary: {
    is: 'Verb',
    not: ['PastTense', 'PresentTense', 'Gerund', 'Conjunction']
  },
  // 'walk out'
  PhrasalVerb: {
    is: 'Verb'
  },
  // 'walk [out]'
  Particle: {
    is: 'PhrasalVerb',
    not: ['PastTense', 'PresentTense', 'Copula', 'Gerund']
  },
  // 'walked by'
  Passive: {
    is: 'Verb'
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/tagSet/values.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  Value: {
    not: ['Verb', 'Adjective', 'Adverb']
  },
  Ordinal: {
    is: 'Value',
    not: ['Cardinal']
  },
  Cardinal: {
    is: 'Value',
    not: ['Ordinal']
  },
  Fraction: {
    is: 'Value',
    not: ['Noun']
  },
  Multiple: {
    is: 'TextValue'
  },
  RomanNumeral: {
    is: 'Cardinal',
    not: ['TextValue']
  },
  TextValue: {
    is: 'Value',
    not: ['NumericValue']
  },
  NumericValue: {
    is: 'Value',
    not: ['TextValue']
  },
  Money: {
    is: 'Cardinal'
  },
  Percent: {
    is: 'Value'
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/tagSet/dates.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  Date: {
    not: ['Verb', 'Adverb', 'Adjective']
  },
  Month: {
    is: 'Date',
    also: ['Noun'],
    not: ['Year', 'WeekDay', 'Time']
  },
  WeekDay: {
    is: 'Date',
    also: ['Noun']
  },
  Year: {
    is: 'Date',
    not: ['RomanNumeral']
  },
  FinancialQuarter: {
    is: 'Date',
    not: 'Fraction'
  },
  // 'easter'
  Holiday: {
    is: 'Date',
    also: ['Noun']
  },
  // 'summer'
  Season: {
    is: 'Date'
  },
  Timezone: {
    is: 'Date',
    also: ['Noun'],
    not: ['ProperNoun']
  },
  Time: {
    is: 'Date',
    not: ['AtMention']
  },
  // 'months'
  Duration: {
    is: 'Date',
    also: ['Noun']
  }
};
},{}],"node_modules/compromise/src/2-two/preTagger/tagSet/misc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var anything = ['Noun', 'Verb', 'Adjective', 'Adverb', 'Value', 'QuestionWord'];
var _default = exports.default = {
  Adjective: {
    not: ['Noun', 'Verb', 'Adverb', 'Value']
  },
  Comparable: {
    is: 'Adjective'
  },
  Comparative: {
    is: 'Adjective'
  },
  Superlative: {
    is: 'Adjective',
    not: ['Comparative']
  },
  NumberRange: {},
  Adverb: {
    not: ['Noun', 'Verb', 'Adjective', 'Value']
  },
  Determiner: {
    not: ['Noun', 'Verb', 'Adjective', 'Adverb', 'QuestionWord', 'Conjunction'] //allow 'a' to be a Determiner/Value
  },
  Conjunction: {
    not: anything
  },
  Preposition: {
    not: ['Noun', 'Verb', 'Adjective', 'Adverb', 'QuestionWord', 'Determiner']
  },
  QuestionWord: {
    not: ['Determiner']
  },
  Currency: {
    is: 'Noun'
  },
  Expression: {
    not: ['Noun', 'Adjective', 'Verb', 'Adverb']
  },
  Abbreviation: {},
  Url: {
    not: ['HashTag', 'PhoneNumber', 'Verb', 'Adjective', 'Value', 'AtMention', 'Email', 'SlashedTerm']
  },
  PhoneNumber: {
    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention', 'Email']
  },
  HashTag: {},
  AtMention: {
    is: 'Noun',
    not: ['HashTag', 'Email']
  },
  Emoji: {
    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention']
  },
  Emoticon: {
    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention', 'SlashedTerm']
  },
  SlashedTerm: {
    not: ['Emoticon', 'Url', 'Value']
  },
  Email: {
    not: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention']
  },
  Acronym: {
    not: ['Plural', 'RomanNumeral', 'Pronoun', 'Date']
  },
  Negative: {
    not: ['Noun', 'Adjective', 'Value', 'Expression']
  },
  Condition: {
    not: ['Verb', 'Adjective', 'Noun', 'Value']
  },
  // existential 'there'
  There: {
    not: ['Verb', 'Adjective', 'Noun', 'Value', 'Conjunction', 'Preposition']
  },
  // 'co-wrote'
  Prefix: {
    not: ['Abbreviation', 'Acronym', 'ProperNoun']
  },
  // hard-nosed, bone-headed
  Hyphenated: {}
};
},{}],"node_modules/compromise/src/2-two/preTagger/tagSet/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _nouns = _interopRequireDefault(require("./nouns.js"));
var _verbs = _interopRequireDefault(require("./verbs.js"));
var _values = _interopRequireDefault(require("./values.js"));
var _dates = _interopRequireDefault(require("./dates.js"));
var _misc = _interopRequireDefault(require("./misc.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var allTags = Object.assign({}, _nouns.default, _verbs.default, _values.default, _dates.default, _misc.default);
// const tagSet = compute(allTags)
var _default = exports.default = allTags;
},{"./nouns.js":"node_modules/compromise/src/2-two/preTagger/tagSet/nouns.js","./verbs.js":"node_modules/compromise/src/2-two/preTagger/tagSet/verbs.js","./values.js":"node_modules/compromise/src/2-two/preTagger/tagSet/values.js","./dates.js":"node_modules/compromise/src/2-two/preTagger/tagSet/dates.js","./misc.js":"node_modules/compromise/src/2-two/preTagger/tagSet/misc.js"}],"node_modules/compromise/src/2-two/preTagger/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./model/index.js"));
var _index2 = _interopRequireDefault(require("./methods/index.js"));
var _index3 = _interopRequireDefault(require("./compute/index.js"));
var _index4 = _interopRequireDefault(require("./tagSet/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  compute: _index3.default,
  methods: _index2.default,
  model: _index.default,
  tags: _index4.default,
  hooks: ['preTagger']
};
},{"./model/index.js":"node_modules/compromise/src/2-two/preTagger/model/index.js","./methods/index.js":"node_modules/compromise/src/2-two/preTagger/methods/index.js","./compute/index.js":"node_modules/compromise/src/2-two/preTagger/compute/index.js","./tagSet/index.js":"node_modules/compromise/src/2-two/preTagger/tagSet/index.js"}],"node_modules/compromise/src/2-two/contraction-two/api/contract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var postPunct = /[,)"';:\-–—.…]/;
var setContraction = function setContraction(m, suffix) {
  if (!m.found) {
    return;
  }
  var terms = m.termList();
  //avoid any problematic punctuation
  for (var i = 0; i < terms.length - 1; i++) {
    var t = terms[i];
    if (postPunct.test(t.post)) {
      return;
    }
  }
  // set first word as full text
  terms[0].implicit = terms[0].normal;
  terms[0].text += suffix;
  terms[0].normal += suffix;
  // clean-up the others
  terms.slice(1).forEach(function (t) {
    t.implicit = t.normal;
    t.text = '';
    t.normal = '';
  });
  for (var _i = 0; _i < terms.length - 1; _i++) {
    terms[_i].post = terms[_i].post.replace(/ /, '');
  }
};

/** turn 'i am' into i'm */
var contract = function contract() {
  var doc = this.not('@hasContraction');
  // we are -> we're
  var m = doc.match('(we|they|you) are');
  setContraction(m, "'re");
  // they will -> they'll
  m = doc.match('(he|she|they|it|we|you) will');
  setContraction(m, "'ll");
  // she is -> she's
  m = doc.match('(he|she|they|it|we) is');
  setContraction(m, "'s");
  // spencer is -> spencer's
  m = doc.match('#Person is');
  setContraction(m, "'s");
  // spencer would -> spencer'd
  m = doc.match('#Person would');
  setContraction(m, "'d");
  // would not -> wouldn't
  m = doc.match('(is|was|had|would|should|could|do|does|have|has|can) not');
  setContraction(m, "n't");
  // i have -> i've
  m = doc.match('(i|we|they) have');
  setContraction(m, "'ve");
  // would have -> would've
  m = doc.match('(would|should|could) have');
  setContraction(m, "'ve");
  // i am -> i'm
  m = doc.match('i am');
  setContraction(m, "'m");
  // going to -> gonna
  m = doc.match('going to');
  return this;
};
var _default = exports.default = contract;
},{}],"node_modules/compromise/src/2-two/contraction-two/api/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _contract = _interopRequireDefault(require("./contract.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var titleCase = /^(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C89\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7CB\uA7CC\uA7D0\uA7D6\uA7D8\uA7DA\uA7DC\uA7F5\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2\uDD50-\uDD65]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21])(?:['a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1C8A\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2019\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7CD\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7DB\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2\uDD70-\uDD85]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E\uDF25-\uDF2A]|\uD83A[\uDD22-\uDD43])/; //upercase, then lowercase

var toTitleCase = function toTitleCase() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  str = str.replace(/^ *[a-z\u00C0-\u00FF]/, function (x) {
    return x.toUpperCase();
  }); //TODO: support unicode
  return str;
};
var api = function api(View) {
  /** */
  var Contractions = /*#__PURE__*/function (_View) {
    function Contractions(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Contractions);
      _this = _callSuper(this, Contractions, [document, pointer, groups]);
      _this.viewType = 'Contraction';
      return _this;
    }
    /** i've -> 'i have' */
    _inherits(Contractions, _View);
    return _createClass(Contractions, [{
      key: "expand",
      value: function expand() {
        this.docs.forEach(function (terms) {
          var isTitleCase = titleCase.test(terms[0].text);
          terms.forEach(function (t, i) {
            t.text = t.implicit || '';
            delete t.implicit;
            //add whitespace
            if (i < terms.length - 1 && t.post === '') {
              t.post += ' ';
            }
            // flag it as dirty
            t.dirty = true;
          });
          // make the first word title-case?
          if (isTitleCase) {
            terms[0].text = toTitleCase(terms[0].text);
          }
        });
        this.compute('normal'); //re-set normalized text
        return this;
      }
    }]);
  }(View); // add fn to View
  View.prototype.contractions = function () {
    var m = this.match('@hasContraction+');
    return new Contractions(this.document, m.pointer);
  };
  View.prototype.contract = _contract.default;
};
var _default = exports.default = api;
},{"./contract.js":"node_modules/compromise/src/2-two/contraction-two/api/contract.js"}],"node_modules/compromise/src/2-two/contraction-two/compute/_splice.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// put n new words where 1 word was
var insertContraction = function insertContraction(document, point, words) {
  var _document$n;
  var _point = _slicedToArray(point, 2),
    n = _point[0],
    w = _point[1];
  if (!words || words.length === 0) {
    return;
  }
  words = words.map(function (word, i) {
    word.implicit = word.text;
    word.machine = word.text;
    word.pre = '';
    word.post = '';
    word.text = '';
    word.normal = '';
    word.index = [n, w + i];
    return word;
  });
  if (words[0]) {
    // move whitespace over
    words[0].pre = document[n][w].pre;
    words[words.length - 1].post = document[n][w].post;
    // add the text/normal to the first term
    words[0].text = document[n][w].text;
    words[0].normal = document[n][w].normal; // move tags too?
  }
  // do the splice
  (_document$n = document[n]).splice.apply(_document$n, [w, 1].concat(_toConsumableArray(words)));
};
var _default = exports.default = insertContraction;
},{}],"node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-s.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasContraction = /'/;
var hasWords = new Set(['been',
//the meeting's been ..
'become' //my son's become
]);
var isWords = new Set(['what',
//it's what
'how',
//it's how
'when', 'if',
//it's if
'too']);
var adjLike = new Set(['too', 'also', 'enough']);

// the big clue is the tense of the following verb
var isOrHas = function isOrHas(terms, i) {
  // scan ahead for the next verb or adjective
  for (var o = i + 1; o < terms.length; o += 1) {
    var t = terms[o];
    if (hasWords.has(t.normal)) {
      return 'has';
    }
    if (isWords.has(t.normal)) {
      return 'is';
    }
    // the cat's sleeping
    if (t.tags.has('Gerund')) {
      return 'is';
    }
    // she's the one
    if (t.tags.has('Determiner')) {
      return 'is';
    }
    // the food's ready
    if (t.tags.has('Adjective')) {
      return 'is';
    }
    // the car's parked
    if (t.switch === 'Adj|Past') {
      if (terms[o + 1]) {
        // car's parked too ..
        if (adjLike.has(terms[o + 1].normal)) {
          return 'is';
        }
        // car's parked on ..
        if (terms[o + 1].tags.has('Preposition')) {
          return 'is';
        }
      }
      // return 'is'
    }
    // The meeting's scheduled vs The plane's landed
    if (t.tags.has('PastTense')) {
      // meeting's scheduled for
      if (terms[o + 1] && terms[o + 1].normal === 'for') {
        return 'is';
      }
      return 'has';
    }
  }
  return 'is';
};

// 's -> [possessive, 'has', 'is', 'are', 'us']
var apostropheS = function apostropheS(terms, i) {
  // possessive, is/has
  var before = terms[i].normal.split(hasContraction)[0];
  // let's - >[let, us]
  if (before === 'let') {
    return [before, 'us'];
  }
  // allow slang "there's cookies" -> there are
  if (before === 'there') {
    var t = terms[i + 1];
    if (t && t.tags.has('Plural')) {
      return [before, 'are'];
    }
  }
  // spencer's got -> spencer has got
  if (isOrHas(terms, i) === 'has') {
    return [before, 'has'];
  }
  return [before, 'is'];
};
var _default = exports.default = apostropheS;
},{}],"node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasContraction = /'/;
var hadWords = new Set(['better',
//had better
'done',
//had done
'before',
// he'd _ before
'it',
// he'd _ it
'had' //she'd had -> she would have..
]);
var wouldWords = new Set(['have',
// 'i'd have' -> i would have..
'be' //' she'd be'
]);

//look for a past-tense verb
// You'd mentioned -> you had mentioned
// You'd mention -> you would mention
var hadOrWould = function hadOrWould(terms, i) {
  // scan ahead
  for (var o = i + 1; o < terms.length; o += 1) {
    var t = terms[o];
    // you'd better go
    if (hadWords.has(t.normal)) {
      return 'had';
    }
    // we'd have
    if (wouldWords.has(t.normal)) {
      return 'would';
    }
    // You'd mentioned -> you had mentioned
    if (t.tags.has('PastTense') || t.switch === 'Adj|Past') {
      return 'had';
    }
    // You'd mention -> you would mention
    if (t.tags.has('PresentTense') || t.tags.has('Infinitive')) {
      return 'would';
    }
    // i'd an issue
    if (t.tags.has('#Determiner')) {
      return 'had';
    }
    if (t.tags.has('Adjective')) {
      return 'would';
    }
  }
  return false;
};

// he'd walked -> had
// how'd -> did
// he'd go -> would
var _apostropheD = function _apostropheD(terms, i) {
  var before = terms[i].normal.split(hasContraction)[0];
  // what'd, how'd
  if (before === 'how' || before === 'what') {
    return [before, 'did'];
  }
  if (hadOrWould(terms, i) === 'had') {
    return [before, 'had'];
  }
  // had/would/did
  return [before, 'would'];
};
var _default = exports.default = _apostropheD;
},{}],"node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-t.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var lastNoun = function lastNoun(terms, i) {
  for (var n = i - 1; n >= 0; n -= 1) {
    if (terms[n].tags.has('Noun') || terms[n].tags.has('Pronoun') || terms[n].tags.has('Plural') || terms[n].tags.has('Singular')) {
      return terms[n];
    }
  }
  return null;
};

//ain't -> are/is not
var apostropheT = function apostropheT(terms, i) {
  if (terms[i].normal === "ain't" || terms[i].normal === 'aint') {
    // "ain't never" -> have never (?)
    if (terms[i + 1] && terms[i + 1].normal === 'never') {
      return ['have'];
    }
    // we aint -> are not,   she aint -> is not
    var noun = lastNoun(terms, i);
    if (noun) {
      // plural/singular pronouns
      if (noun.normal === 'we' || noun.normal === 'they') {
        return ['are', 'not'];
      }
      if (noun.normal === 'i') {
        return ['am', 'not'];
      }
      // plural/singular tags
      if (noun.tags && noun.tags.has('Plural')) {
        return ['are', 'not'];
      }
    }
    return ['is', 'not'];
  }
  var before = terms[i].normal.replace(/n't/, '');
  return [before, 'not'];
};
var _default = exports.default = apostropheT;
},{}],"node_modules/compromise/src/2-two/contraction-two/compute/isPossessive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var banList = {
  that: true,
  there: true,
  let: true,
  here: true,
  everywhere: true
};
var beforePossessive = {
  in: true,
  //in sunday's
  by: true,
  //by sunday's
  for: true //for sunday's
};
var adjLike = new Set(['too', 'also', 'enough', 'about']);
var nounLike = new Set(['is', 'are', 'did', 'were', 'could', 'should', 'must', 'had', 'have']);
var isPossessive = function isPossessive(terms, i) {
  var term = terms[i];
  // these can't be possessive
  if (banList.hasOwnProperty(term.machine || term.normal)) {
    return false;
  }
  // if we already know it
  if (term.tags.has('Possessive')) {
    return true;
  }
  // who's
  if (term.tags.has('QuestionWord')) {
    return false;
  }
  // some pronouns are never possessive
  if (term.normal === "he's" || term.normal === "she's") {
    return false;
  }
  //if end of sentence, it is possessive - "was spencer's"
  var nextTerm = terms[i + 1];
  if (!nextTerm) {
    return true;
  }
  // "it's a life" vs "run it's business"
  if (term.normal === "it's") {
    if (nextTerm.tags.has('#Noun')) {
      return true;
    }
    return false;
  }
  // the sun's setting vs the artist's painting
  // gerund = is,  noun = possessive
  // (we are doing some dupe-work of the switch classifier here)
  if (nextTerm.switch == 'Noun|Gerund') {
    var next2 = terms[i + 2];
    // the artist's painting.
    if (!next2) {
      if (term.tags.has('Actor') || term.tags.has('ProperNoun')) {
        return true;
      }
      return false;
    }
    // the artist's painting is..
    if (next2.tags.has('Copula')) {
      return true;
    }
    // the cat's sleeping on ..
    if (next2.normal === 'on' || next2.normal === 'in') {
      return false;
    }
    return false;
  }
  //a gerund suggests 'is walking'
  if (nextTerm.tags.has('Verb')) {
    //fix 'jamie's bite'
    if (nextTerm.tags.has('Infinitive')) {
      return true;
    }
    //'jamaica's growing'
    if (nextTerm.tags.has('Gerund')) {
      return false;
    }
    //fix 'spencer's runs'
    if (nextTerm.tags.has('PresentTense')) {
      return true;
    }
    return false;
  }

  // john's nuts
  if (nextTerm.switch === 'Adj|Noun') {
    var twoTerm = terms[i + 2];
    if (!twoTerm) {
      return false; //adj
    }
    // john's nuts were..
    if (nounLike.has(twoTerm.normal)) {
      return true;
    }
    // john's nuts about..
    if (adjLike.has(twoTerm.normal)) {
      return false; //adj
    }
  }
  //spencer's house
  if (nextTerm.tags.has('Noun')) {
    var nextStr = nextTerm.machine || nextTerm.normal;
    // 'spencer's here'
    if (nextStr === 'here' || nextStr === 'there' || nextStr === 'everywhere') {
      return false;
    }
    // the chair's his
    if (nextTerm.tags.has('Possessive')) {
      return false;
    }
    // the captain's John
    if (nextTerm.tags.has('ProperNoun') && !term.tags.has('ProperNoun')) {
      return false;
    }
    return true;
  }

  // by sunday's final
  if (terms[i - 1] && beforePossessive[terms[i - 1].normal] === true) {
    return true;
  }

  // spencer's tired
  if (nextTerm.tags.has('Adjective')) {
    var _twoTerm = terms[i + 2];
    //the rocket's red
    if (!_twoTerm) {
      return false;
    }
    // rocket's red nozzle
    if (_twoTerm.tags.has('Noun') && !_twoTerm.tags.has('Pronoun')) {
      //project's behind schedule
      var str = nextTerm.normal;
      if (str === 'above' || str === 'below' || str === 'behind') {
        return false;
      }
      return true;
    }
    // rocket's red glare
    if (_twoTerm.switch === 'Noun|Verb') {
      return true;
    }
    //othwerwise, an adjective suggests 'is good'
    return false;
  }
  // baby's first steps
  if (nextTerm.tags.has('Value')) {
    return true;
  }
  // otherwise not possessive
  return false;
};
var _default = exports.default = isPossessive;
},{}],"node_modules/compromise/src/2-two/contraction-two/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _splice = _interopRequireDefault(require("./_splice.js"));
var _apostropheS = _interopRequireDefault(require("./apostrophe-s.js"));
var _apostropheD = _interopRequireDefault(require("./apostrophe-d.js"));
var _apostropheT = _interopRequireDefault(require("./apostrophe-t.js"));
var _isPossessive = _interopRequireDefault(require("./isPossessive.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var byApostrophe = /'/;

// poor-mans reindexing of this sentence only
var reIndex = function reIndex(terms) {
  terms.forEach(function (t, i) {
    if (t.index) {
      t.index[1] = i;
    }
  });
};

// run tagger on our new implicit terms
var reTag = function reTag(terms, view, start, len) {
  var tmp = view.update();
  tmp.document = [terms];
  // offer to re-tag neighbours, too
  var end = start + len;
  if (start > 0) {
    start -= 1;
  }
  if (terms[end]) {
    end += 1;
  }
  tmp.ptrs = [[0, start, end]];
  tmp.compute(['freeze', 'lexicon', 'preTagger', 'unfreeze']);
  // don't for a reindex of the whole document
  reIndex(terms);
};
var byEnd = {
  // how'd
  d: function d(terms, i) {
    return (0, _apostropheD.default)(terms, i);
  },
  // we ain't
  t: function t(terms, i) {
    return (0, _apostropheT.default)(terms, i);
  },
  // bob's
  s: function s(terms, i, world) {
    // [bob's house] vs [bob's cool]
    if ((0, _isPossessive.default)(terms, i)) {
      return world.methods.one.setTag([terms[i]], 'Possessive', world, null, '2-contraction');
    }
    return (0, _apostropheS.default)(terms, i);
  }
};
var toDocs = function toDocs(words, view) {
  var doc = view.fromText(words.join(' '));
  doc.compute('id');
  return doc.docs[0];
};

//really easy ones
var contractionTwo = function contractionTwo(view) {
  var world = view.world,
    document = view.document;
  // each sentence
  document.forEach(function (terms, n) {
    // loop through terms backwards
    for (var i = terms.length - 1; i >= 0; i -= 1) {
      // is it already a contraction
      if (terms[i].implicit) {
        continue;
      }
      var after = null;
      if (byApostrophe.test(terms[i].normal) === true) {
        after = terms[i].normal.split(byApostrophe)[1];
      }
      var words = null;
      // any known-ones, like 'dunno'?
      if (byEnd.hasOwnProperty(after)) {
        words = byEnd[after](terms, i, world);
      }
      // actually insert the new terms
      if (words) {
        words = toDocs(words, view);
        (0, _splice.default)(document, [n, i], words);
        reTag(document[n], view, i, words.length);
        continue;
      }
    }
  });
};
var _default = exports.default = {
  contractionTwo: contractionTwo
};
},{"./_splice.js":"node_modules/compromise/src/2-two/contraction-two/compute/_splice.js","./apostrophe-s.js":"node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-s.js","./apostrophe-d.js":"node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-d.js","./apostrophe-t.js":"node_modules/compromise/src/2-two/contraction-two/compute/apostrophe-t.js","./isPossessive.js":"node_modules/compromise/src/2-two/contraction-two/compute/isPossessive.js"}],"node_modules/compromise/src/2-two/contraction-two/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./api/index.js"));
var _index2 = _interopRequireDefault(require("./compute/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  compute: _index2.default,
  api: _index.default,
  hooks: ['contractionTwo']
};
},{"./api/index.js":"node_modules/compromise/src/2-two/contraction-two/api/index.js","./compute/index.js":"node_modules/compromise/src/2-two/contraction-two/compute/index.js"}],"node_modules/compromise/src/2-two/postTagger/model/adjective/adjective.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// all fell apart
{
  match: '[(all|both)] #Determiner #Noun',
  group: 0,
  tag: 'Noun',
  reason: 'all-noun'
},
//sometimes not-adverbs
{
  match: '#Copula [(just|alone)]$',
  group: 0,
  tag: 'Adjective',
  reason: 'not-adverb'
},
//jack is guarded
{
  match: '#Singular is #Adverb? [#PastTense$]',
  group: 0,
  tag: 'Adjective',
  reason: 'is-filled'
},
// smoked poutine is
{
  match: '[#PastTense] #Singular is',
  group: 0,
  tag: 'Adjective',
  reason: 'smoked-poutine'
},
// baked onions are
{
  match: '[#PastTense] #Plural are',
  group: 0,
  tag: 'Adjective',
  reason: 'baked-onions'
},
// well made
{
  match: 'well [#PastTense]',
  group: 0,
  tag: 'Adjective',
  reason: 'well-made'
},
// is f*ed up
{
  match: '#Copula [fucked up?]',
  group: 0,
  tag: 'Adjective',
  reason: 'swears-adjective'
},
//jack seems guarded
{
  match: '#Singular (seems|appears) #Adverb? [#PastTense$]',
  group: 0,
  tag: 'Adjective',
  reason: 'seems-filled'
},
// jury is out - preposition ➔ adjective
{
  match: '#Copula #Adjective? [(out|in|through)]$',
  group: 0,
  tag: 'Adjective',
  reason: 'still-out'
},
// shut the door
{
  match: '^[#Adjective] (the|your) #Noun',
  group: 0,
  notIf: '(all|even)',
  tag: 'Infinitive',
  reason: 'shut-the'
},
// the said card
{
  match: 'the [said] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'the-said-card'
},
// faith-based, much-appreciated, soft-boiled
{
  match: '[#Hyphenated (#Hyphenated && #PastTense)] (#Noun|#Conjunction)',
  group: 0,
  tag: 'Adjective',
  notIf: '#Adverb',
  reason: 'faith-based'
},
//self-driving
{
  match: '[#Hyphenated (#Hyphenated && #Gerund)] (#Noun|#Conjunction)',
  group: 0,
  tag: 'Adjective',
  notIf: '#Adverb',
  reason: 'self-driving'
},
//dammed-up
{
  match: '[#PastTense (#Hyphenated && #PhrasalVerb)] (#Noun|#Conjunction)',
  group: 0,
  tag: 'Adjective',
  reason: 'dammed-up'
},
//two-fold
{
  match: '(#Hyphenated && #Value) fold',
  tag: 'Adjective',
  reason: 'two-fold'
},
//must-win
{
  match: 'must (#Hyphenated && #Infinitive)',
  tag: 'Adjective',
  reason: 'must-win'
},
// vacuum-sealed
{
  match: "(#Hyphenated && #Infinitive) #Hyphenated",
  tag: 'Adjective',
  notIf: '#PhrasalVerb',
  reason: 'vacuum-sealed'
}, {
  match: 'too much',
  tag: 'Adverb Adjective',
  reason: 'bit-4'
}, {
  match: 'a bit much',
  tag: 'Determiner Adverb Adjective',
  reason: 'bit-3'
},
// adjective-prefixes - 'un skilled'
{
  match: '[(un|contra|extra|inter|intra|macro|micro|mid|mis|mono|multi|pre|sub|tri|ex)] #Adjective',
  group: 0,
  tag: ['Adjective', 'Prefix'],
  reason: 'un-skilled'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-adverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var adverbAdj = "(dark|bright|flat|light|soft|pale|dead|dim|faux|little|wee|sheer|most|near|good|extra|all)";
var noLy = '(hard|fast|late|early|high|right|deep|close|direct)';
var _default = exports.default = [
// kinda sparkly
{
  match: "#Adverb [#Adverb] (and|or|then)",
  group: 0,
  tag: 'Adjective',
  reason: 'kinda-sparkly-and'
},
// dark green
{
  match: "[".concat(adverbAdj, "] #Adjective"),
  group: 0,
  tag: 'Adverb',
  reason: 'dark-green'
},
// far too
{
  match: "#Copula [far too] #Adjective",
  group: 0,
  tag: 'Adverb',
  reason: 'far-too'
},
// was still in
{
  match: "#Copula [still] (in|#Gerund|#Adjective)",
  group: 0,
  tag: 'Adverb',
  reason: 'was-still-walking'
},
// studies hard
{
  match: "#Plural ".concat(noLy),
  tag: '#PresentTense #Adverb',
  reason: 'studies-hard'
},
// shops direct
{
  match: "#Verb [".concat(noLy, "] !#Noun?"),
  group: 0,
  notIf: '(#Copula|get|got|getting|become|became|becoming|feel|feels|feeling|#Determiner|#Preposition)',
  tag: 'Adverb',
  reason: 'shops-direct'
},
// studies a lot
{
  match: "[#Plural] a lot",
  tag: 'PresentTense',
  reason: 'studies-a-lot'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-gerund.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Gerund-Adjectives - 'amusing, annoying'
var _default = exports.default = [
//a staggering cost
// { match: '(a|an) [#Gerund]', group: 0, tag: 'Adjective', reason: 'a|an' },
//as amusing as
{
  match: 'as [#Gerund] as',
  group: 0,
  tag: 'Adjective',
  reason: 'as-gerund-as'
},
// more amusing than
{
  match: 'more [#Gerund] than',
  group: 0,
  tag: 'Adjective',
  reason: 'more-gerund-than'
},
// very amusing
{
  match: '(so|very|extremely) [#Gerund]',
  group: 0,
  tag: 'Adjective',
  reason: 'so-gerund'
},
// found it amusing
{
  match: '(found|found) it #Adverb? [#Gerund]',
  group: 0,
  tag: 'Adjective',
  reason: 'found-it-gerund'
},
// a bit amusing
{
  match: 'a (little|bit|wee) bit? [#Gerund]',
  group: 0,
  tag: 'Adjective',
  reason: 'a-bit-gerund'
},
// looking annoying
{
  match: '#Gerund [#Gerund]',
  group: 0,
  tag: 'Adjective',
  notIf: '(impersonating|practicing|considering|assuming)',
  reason: 'looking-annoying'
},
// looked amazing
{
  match: '(looked|look|looks) #Adverb? [%Adj|Gerund%]',
  group: 0,
  tag: 'Adjective',
  notIf: '(impersonating|practicing|considering|assuming)',
  reason: 'looked-amazing'
},
// were really amazing
// { match: '(looked|look|looks) #Adverb [%Adj|Gerund%]', group: 0, tag: 'Adjective', notIf: '(impersonating|practicing|considering|assuming)', reason: 'looked-amazing' },
// developing a
{
  match: '[%Adj|Gerund%] #Determiner',
  group: 0,
  tag: 'Gerund',
  reason: 'developing-a'
},
// world's leading manufacturer
{
  match: '#Possessive [%Adj|Gerund%] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'leading-manufacturer'
},
// meaning alluring
{
  match: '%Noun|Gerund% %Adj|Gerund%',
  tag: 'Gerund #Adjective',
  reason: 'meaning-alluring'
},
// face shocking revelations
{
  match: '(face|embrace|reveal|stop|start|resume) %Adj|Gerund%',
  tag: '#PresentTense #Adjective',
  reason: 'face-shocking'
},
// are enduring symbols
{
  match: '(are|were) [%Adj|Gerund%] #Plural',
  group: 0,
  tag: 'Adjective',
  reason: 'are-enduring-symbols'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-noun.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
//the above is clear
{
  match: '#Determiner [#Adjective] #Copula',
  group: 0,
  tag: 'Noun',
  reason: 'the-adj-is'
},
//real evil is
{
  match: '#Adjective [#Adjective] #Copula',
  group: 0,
  tag: 'Noun',
  reason: 'adj-adj-is'
},
//his fine
{
  match: '(his|its) [%Adj|Noun%]',
  group: 0,
  tag: 'Noun',
  notIf: '#Hyphenated',
  reason: 'his-fine'
},
//is all
{
  match: '#Copula #Adverb? [all]',
  group: 0,
  tag: 'Noun',
  reason: 'is-all'
},
// have fun
{
  match: "(have|had) [#Adjective] #Preposition .",
  group: 0,
  tag: 'Noun',
  reason: 'have-fun'
},
// brewing giant
{
  match: "#Gerund (giant|capital|center|zone|application)",
  tag: 'Noun',
  reason: 'brewing-giant'
},
// in an instant
{
  match: "#Preposition (a|an) [#Adjective]$",
  group: 0,
  tag: 'Noun',
  reason: 'an-instant'
},
// no golden would
{
  match: "no [#Adjective] #Modal",
  group: 0,
  tag: 'Noun',
  reason: 'no-golden'
},
// brand new
{
  match: "[brand #Gerund?] new",
  group: 0,
  tag: 'Adverb',
  reason: 'brand-new'
},
// some kind
{
  match: "(#Determiner|#Comparative|new|different) [kind]",
  group: 0,
  tag: 'Noun',
  reason: 'some-kind'
},
// her favourite sport
{
  match: "#Possessive [%Adj|Noun%] #Noun",
  group: 0,
  tag: 'Adjective',
  reason: 'her-favourite'
},
// must-win
{
  match: "must && #Hyphenated .",
  tag: 'Adjective',
  reason: 'must-win'
},
// the present
{
  match: "#Determiner [#Adjective]$",
  tag: 'Noun',
  notIf: '(this|that|#Comparative|#Superlative)',
  reason: 'the-south'
},
//are that crazy.
// company-wide
{
  match: "(#Noun && #Hyphenated) (#Adjective && #Hyphenated)",
  tag: 'Adjective',
  notIf: '(this|that|#Comparative|#Superlative)',
  reason: 'company-wide'
},
// the poor were
{
  match: "#Determiner [#Adjective] (#Copula|#Determiner)",
  notIf: '(#Comparative|#Superlative)',
  group: 0,
  tag: 'Noun',
  reason: 'the-poor'
},
// professional bodybuilder
{
  match: "[%Adj|Noun%] #Noun",
  notIf: '(#Pronoun|#ProperNoun)',
  group: 0,
  tag: 'Adjective',
  reason: 'stable-foundations'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-verb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// amusing his aunt
// { match: '[#Adjective] #Possessive #Noun', group: 0, tag: 'Verb', reason: 'gerund-his-noun' },
// loving you
// { match: '[#Adjective] (us|you)', group: 0, tag: 'Gerund', reason: 'loving-you' },
// slowly stunning
{
  match: '(slowly|quickly) [#Adjective]',
  group: 0,
  tag: 'Verb',
  reason: 'slowly-adj'
},
// does mean
{
  match: 'does (#Adverb|not)? [#Adjective]',
  group: 0,
  tag: 'PresentTense',
  reason: 'does-mean'
},
// okay by me
{
  match: '[(fine|okay|cool|ok)] by me',
  group: 0,
  tag: 'Adjective',
  reason: 'okay-by-me'
},
// i mean
{
  match: 'i (#Adverb|do)? not? [mean]',
  group: 0,
  tag: 'PresentTense',
  reason: 'i-mean'
},
//will secure our
{
  match: 'will #Adjective',
  tag: 'Auxiliary Infinitive',
  reason: 'will-adj'
},
//he disguised the thing
{
  match: '#Pronoun [#Adjective] #Determiner #Adjective? #Noun',
  group: 0,
  tag: 'Verb',
  reason: 'he-adj-the'
},
//is eager to go
{
  match: '#Copula [%Adj|Present%] to #Verb',
  group: 0,
  tag: 'Verb',
  reason: 'adj-to'
},
//is done well
{
  match: '#Copula [#Adjective] (well|badly|quickly|slowly)',
  group: 0,
  tag: 'Verb',
  reason: 'done-well'
},
// rude and insulting
{
  match: '#Adjective and [#Gerund] !#Preposition?',
  group: 0,
  tag: 'Adjective',
  reason: 'rude-and-x'
},
// were over cooked
{
  match: '#Copula #Adverb? (over|under) [#PastTense]',
  group: 0,
  tag: 'Adjective',
  reason: 'over-cooked'
},
// was bland and overcooked
{
  match: '#Copula #Adjective+ (and|or) [#PastTense]$',
  group: 0,
  tag: 'Adjective',
  reason: 'bland-and-overcooked'
},
// got tired of
{
  match: 'got #Adverb? [#PastTense] of',
  group: 0,
  tag: 'Adjective',
  reason: 'got-tired-of'
},
//felt loved
{
  match: '(seem|seems|seemed|appear|appeared|appears|feel|feels|felt|sound|sounds|sounded) (#Adverb|#Adjective)? [#PastTense]',
  group: 0,
  tag: 'Adjective',
  reason: 'felt-loved'
},
// seem confused
{
  match: '(seem|feel|seemed|felt) [#PastTense #Particle?]',
  group: 0,
  tag: 'Adjective',
  reason: 'seem-confused'
},
// a bit confused
{
  match: 'a (bit|little|tad) [#PastTense #Particle?]',
  group: 0,
  tag: 'Adjective',
  reason: 'a-bit-confused'
},
// do not be embarrassed
{
  match: 'not be [%Adj|Past% #Particle?]',
  group: 0,
  tag: 'Adjective',
  reason: 'do-not-be-confused'
},
// is just right
{
  match: '#Copula just [%Adj|Past% #Particle?]',
  group: 0,
  tag: 'Adjective',
  reason: 'is-just-right'
},
// as pale as
{
  match: 'as [#Infinitive] as',
  group: 0,
  tag: 'Adjective',
  reason: 'as-pale-as'
},
//failed and oppressive
{
  match: '[%Adj|Past%] and #Adjective',
  group: 0,
  tag: 'Adjective',
  reason: 'faled-and-oppressive'
},
// or heightened emotion
{
  match: 'or [#PastTense] #Noun',
  group: 0,
  tag: 'Adjective',
  notIf: '(#Copula|#Pronoun)',
  reason: 'or-heightened-emotion'
},
// became involved
{
  match: '(become|became|becoming|becomes) [#Verb]',
  group: 0,
  tag: 'Adjective',
  reason: 'become-verb'
},
// their declared intentions
{
  match: '#Possessive [#PastTense] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'declared-intentions'
},
// is he cool
{
  match: '#Copula #Pronoun [%Adj|Present%]',
  group: 0,
  tag: 'Adjective',
  reason: 'is-he-cool'
},
// is crowded with
{
  match: '#Copula [%Adj|Past%] with',
  group: 0,
  tag: 'Adjective',
  notIf: '(associated|worn|baked|aged|armed|bound|fried|loaded|mixed|packed|pumped|filled|sealed)',
  reason: 'is-crowded-with'
},
// is empty$
{
  match: '#Copula #Adverb? [%Adj|Present%]$',
  group: 0,
  tag: 'Adjective',
  reason: 'was-empty$'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/adverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// const adverbAdj = '(dark|bright|flat|light|soft|pale|dead|dim|faux|little|wee|sheer|most|near|good|extra|all)'
var _default = exports.default = [
//still good
{
  match: '[still] #Adjective',
  group: 0,
  tag: 'Adverb',
  reason: 'still-advb'
},
//still make
{
  match: '[still] #Verb',
  group: 0,
  tag: 'Adverb',
  reason: 'still-verb'
},
// so hot
{
  match: '[so] #Adjective',
  group: 0,
  tag: 'Adverb',
  reason: 'so-adv'
},
// way hotter
{
  match: '[way] #Comparative',
  group: 0,
  tag: 'Adverb',
  reason: 'way-adj'
},
// way too hot
{
  match: '[way] #Adverb #Adjective',
  group: 0,
  tag: 'Adverb',
  reason: 'way-too-adj'
},
// all singing
{
  match: '[all] #Verb',
  group: 0,
  tag: 'Adverb',
  reason: 'all-verb'
},
// sing like an angel
{
  match: '#Verb  [like]',
  group: 0,
  notIf: '(#Modal|#PhrasalVerb)',
  tag: 'Adverb',
  reason: 'verb-like'
},
//barely even walk
{
  match: '(barely|hardly) even',
  tag: 'Adverb',
  reason: 'barely-even'
},
//even held
{
  match: '[even] #Verb',
  group: 0,
  tag: 'Adverb',
  reason: 'even-walk'
},
//even worse
{
  match: '[even] #Comparative',
  group: 0,
  tag: 'Adverb',
  reason: 'even-worse'
},
// even the greatest
{
  match: '[even] (#Determiner|#Possessive)',
  group: 0,
  tag: '#Adverb',
  reason: 'even-the'
},
// even left
{
  match: 'even left',
  tag: '#Adverb #Verb',
  reason: 'even-left'
},
// way over
{
  match: '[way] #Adjective',
  group: 0,
  tag: '#Adverb',
  reason: 'way-over'
},
//cheering hard - dropped -ly's
{
  match: '#PresentTense [(hard|quick|bright|slow|fast|backwards|forwards)]',
  notIf: '#Copula',
  group: 0,
  tag: 'Adverb',
  reason: 'lazy-ly'
},
// much appreciated
{
  match: '[much] #Adjective',
  group: 0,
  tag: 'Adverb',
  reason: 'bit-1'
},
// is well
{
  match: '#Copula [#Adverb]$',
  group: 0,
  tag: 'Adjective',
  reason: 'is-well'
},
// a bit cold
{
  match: 'a [(little|bit|wee) bit?] #Adjective',
  group: 0,
  tag: 'Adverb',
  reason: 'a-bit-cold'
},
// super strong
{
  match: "[(super|pretty)] #Adjective",
  group: 0,
  tag: 'Adverb',
  reason: 'super-strong'
},
// become overly weakened
{
  match: '(become|fall|grow) #Adverb? [#PastTense]',
  group: 0,
  tag: 'Adjective',
  reason: 'overly-weakened'
},
// a completely beaten man
{
  match: '(a|an) #Adverb [#Participle] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'completely-beaten'
},
//a close
{
  match: '#Determiner #Adverb? [close]',
  group: 0,
  tag: 'Adjective',
  reason: 'a-close'
},
//walking close
{
  match: '#Gerund #Adverb? [close]',
  group: 0,
  tag: 'Adverb',
  notIf: '(getting|becoming|feeling)',
  reason: 'being-close'
},
// a blown motor
{
  match: '(the|those|these|a|an) [#Participle] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'blown-motor'
},
// charged back
{
  match: '(#PresentTense|#PastTense) [back]',
  group: 0,
  tag: 'Adverb',
  notIf: '(#PhrasalVerb|#Copula)',
  reason: 'charge-back'
},
// send around
{
  match: '#Verb [around]',
  group: 0,
  tag: 'Adverb',
  notIf: '#PhrasalVerb',
  reason: 'send-around'
},
// later say
{
  match: '[later] #PresentTense',
  group: 0,
  tag: 'Adverb',
  reason: 'later-say'
},
// the well
{
  match: '#Determiner [well] !#PastTense?',
  group: 0,
  tag: 'Noun',
  reason: 'the-well'
},
// high enough
{
  match: '#Adjective [enough]',
  group: 0,
  tag: 'Adverb',
  reason: 'high-enough'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/dates/date-phrase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// ==== Holiday ====
{
  match: '#Holiday (day|eve)',
  tag: 'Holiday',
  reason: 'holiday-day'
},
//5th of March
{
  match: '#Value of #Month',
  tag: 'Date',
  reason: 'value-of-month'
},
//5 March
{
  match: '#Cardinal #Month',
  tag: 'Date',
  reason: 'cardinal-month'
},
//march 5 to 7
{
  match: '#Month #Value to #Value',
  tag: 'Date',
  reason: 'value-to-value'
},
//march the 12th
{
  match: '#Month the #Value',
  tag: 'Date',
  reason: 'month-the-value'
},
//june 7
{
  match: '(#WeekDay|#Month) #Value',
  tag: 'Date',
  reason: 'date-value'
},
//7 june
{
  match: '#Value (#WeekDay|#Month)',
  tag: 'Date',
  reason: 'value-date'
},
//may twenty five
{
  match: '(#TextValue && #Date) #TextValue',
  tag: 'Date',
  reason: 'textvalue-date'
},
// 'aug 20-21'
{
  match: "#Month #NumberRange",
  tag: 'Date',
  reason: 'aug 20-21'
},
// wed march 5th
{
  match: "#WeekDay #Month #Ordinal",
  tag: 'Date',
  reason: 'week mm-dd'
},
// aug 5th 2021
{
  match: "#Month #Ordinal #Cardinal",
  tag: 'Date',
  reason: 'mm-dd-yyy'
},
// === timezones ===
// china standard time
{
  match: "(#Place|#Demonmym|#Time) (standard|daylight|central|mountain)? time",
  tag: 'Timezone',
  reason: 'std-time'
},
// eastern time
{
  match: "(eastern|mountain|pacific|central|atlantic) (standard|daylight|summer)? time",
  tag: 'Timezone',
  reason: 'eastern-time'
},
// 5pm central
{
  match: "#Time [(eastern|mountain|pacific|central|est|pst|gmt)]",
  group: 0,
  tag: 'Timezone',
  reason: '5pm-central'
},
// central european time
{
  match: "(central|western|eastern) european time",
  tag: 'Timezone',
  reason: 'cet'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/dates/date.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// ==== WeekDay ====
// sun the 5th
{
  match: '[sun] the #Ordinal',
  tag: 'WeekDay',
  reason: 'sun-the-5th'
},
//sun feb 2
{
  match: '[sun] #Date',
  group: 0,
  tag: 'WeekDay',
  reason: 'sun-feb'
},
//1pm next sun
{
  match: '#Date (on|this|next|last|during)? [sun]',
  group: 0,
  tag: 'WeekDay',
  reason: '1pm-sun'
},
//this sat
{
  match: "(in|by|before|during|on|until|after|of|within|all) [sat]",
  group: 0,
  tag: 'WeekDay',
  reason: 'sat'
}, {
  match: "(in|by|before|during|on|until|after|of|within|all) [wed]",
  group: 0,
  tag: 'WeekDay',
  reason: 'wed'
}, {
  match: "(in|by|before|during|on|until|after|of|within|all) [march]",
  group: 0,
  tag: 'Month',
  reason: 'march'
},
//sat november
{
  match: '[sat] #Date',
  group: 0,
  tag: 'WeekDay',
  reason: 'sat-feb'
},
// ==== Month ====
//all march
{
  match: "#Preposition [(march|may)]",
  group: 0,
  tag: 'Month',
  reason: 'in-month'
},
//this march
{
  match: "(this|next|last) (march|may) !#Infinitive?",
  tag: '#Date #Month',
  reason: 'this-month'
},
// march 5th
{
  match: "(march|may) the? #Value",
  tag: '#Month #Date #Date',
  reason: 'march-5th'
},
// 5th of march
{
  match: "#Value of? (march|may)",
  tag: '#Date #Date #Month',
  reason: '5th-of-march'
},
// march and feb
{
  match: "[(march|may)] .? #Date",
  group: 0,
  tag: 'Month',
  reason: 'march-and-feb'
},
// feb to march
{
  match: "#Date .? [(march|may)]",
  group: 0,
  tag: 'Month',
  reason: 'feb-and-march'
},
//quickly march
{
  match: "#Adverb [(march|may)]",
  group: 0,
  tag: 'Verb',
  reason: 'quickly-march'
},
//march quickly
{
  match: "[(march|may)] #Adverb",
  group: 0,
  tag: 'Verb',
  reason: 'march-quickly'
},
//12 am
{
  match: "#Value (am|pm)",
  tag: 'Time',
  reason: '2-am'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/nouns/nouns.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var infNouns = '(feel|sense|process|rush|side|bomb|bully|challenge|cover|crush|dump|exchange|flow|function|issue|lecture|limit|march|process)';
var _default = exports.default = [
//'more' is not always an adverb
// any more
{
  match: '(the|any) [more]',
  group: 0,
  tag: 'Singular',
  reason: 'more-noun'
},
// more players
{
  match: '[more] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'more-noun'
},
// rights of man
{
  match: '(right|rights) of .',
  tag: 'Noun',
  reason: 'right-of'
},
// a bit
{
  match: 'a [bit]',
  group: 0,
  tag: 'Singular',
  reason: 'bit-2'
},
// a must
{
  match: 'a [must]',
  group: 0,
  tag: 'Singular',
  reason: 'must-2'
},
// we all
{
  match: '(we|us) [all]',
  group: 0,
  tag: 'Noun',
  reason: 'we all'
},
// due to weather
{
  match: 'due to [#Verb]',
  group: 0,
  tag: 'Noun',
  reason: 'due-to'
},
//some pressing issues
{
  match: 'some [#Verb] #Plural',
  group: 0,
  tag: 'Noun',
  reason: 'determiner6'
},
// my first thought
{
  match: '#Possessive #Ordinal [#PastTense]',
  group: 0,
  tag: 'Noun',
  reason: 'first-thought'
},
//the nice swim
{
  match: '(the|this|those|these) #Adjective [%Verb|Noun%]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'the-adj-verb'
},
// the truly nice swim
{
  match: '(the|this|those|these) #Adverb #Adjective [#Verb]',
  group: 0,
  tag: 'Noun',
  reason: 'determiner4'
},
//the wait to vote
{
  match: 'the [#Verb] #Preposition .',
  group: 0,
  tag: 'Noun',
  reason: 'determiner1'
},
//a sense of
{
  match: '(a|an|the) [#Verb] of',
  group: 0,
  tag: 'Noun',
  reason: 'the-verb-of'
},
//the threat of force
{
  match: '#Determiner #Noun of [#Verb]',
  group: 0,
  tag: 'Noun',
  notIf: '#Gerund',
  reason: 'noun-of-noun'
},
// ended in ruins
{
  match: '#PastTense #Preposition [#PresentTense]',
  group: 0,
  notIf: '#Gerund',
  tag: 'Noun',
  reason: 'ended-in-ruins'
},
//'u' as pronoun
{
  match: '#Conjunction [u]',
  group: 0,
  tag: 'Pronoun',
  reason: 'u-pronoun-2'
}, {
  match: '[u] #Verb',
  group: 0,
  tag: 'Pronoun',
  reason: 'u-pronoun-1'
},
//the western line
{
  match: '#Determiner [(western|eastern|northern|southern|central)] #Noun',
  group: 0,
  tag: 'Noun',
  reason: 'western-line'
},
//air-flow
{
  match: '(#Singular && @hasHyphen) #PresentTense',
  tag: 'Noun',
  reason: 'hyphen-verb'
},
//is no walk
{
  match: 'is no [#Verb]',
  group: 0,
  tag: 'Noun',
  reason: 'is-no-verb'
},
//do so
{
  match: 'do [so]',
  group: 0,
  tag: 'Noun',
  reason: 'so-noun'
},
// what the hell
{
  match: '#Determiner [(shit|damn|hell)]',
  group: 0,
  tag: 'Noun',
  reason: 'swears-noun'
},
// go to shit
{
  match: 'to [(shit|hell)]',
  group: 0,
  tag: 'Noun',
  reason: 'to-swears'
},
// the staff were
{
  match: '(the|these) [#Singular] (were|are)',
  group: 0,
  tag: 'Plural',
  reason: 'singular-were'
},
// a comdominium, or simply condo
{
  match: "a #Noun+ or #Adverb+? [#Verb]",
  group: 0,
  tag: 'Noun',
  reason: 'noun-or-noun'
},
// walk the walk
{
  match: '(the|those|these|a|an) #Adjective? [#PresentTense #Particle?]',
  group: 0,
  tag: 'Noun',
  notIf: '(seem|appear|include|#Gerund|#Copula)',
  reason: 'det-inf'
},
// { match: '(the|those|these|a|an) #Adjective? [#PresentTense #Particle?]', group: 0, tag: 'Noun', notIf: '(#Gerund|#Copula)', reason: 'det-pres' },

// ==== Actor ====
//Aircraft designer
{
  match: '#Noun #Actor',
  tag: 'Actor',
  notIf: '(#Person|#Pronoun)',
  reason: 'thing-doer'
},
//lighting designer
{
  match: '#Gerund #Actor',
  tag: 'Actor',
  reason: 'gerund-doer'
},
// captain sanders
// { match: '[#Actor+] #ProperNoun', group: 0, tag: 'Honorific', reason: 'sgt-kelly' },
// co-founder
{
  match: "co #Singular",
  tag: 'Actor',
  reason: 'co-noun'
},
// co-founder
{
  match: "[#Noun+] #Actor",
  group: 0,
  tag: 'Actor',
  notIf: '(#Honorific|#Pronoun|#Possessive)',
  reason: 'air-traffic-controller'
},
// fine-artist
{
  match: "(urban|cardiac|cardiovascular|respiratory|medical|clinical|visual|graphic|creative|dental|exotic|fine|certified|registered|technical|virtual|professional|amateur|junior|senior|special|pharmaceutical|theoretical)+ #Noun? #Actor",
  tag: 'Actor',
  reason: 'fine-artist'
},
// dance coach
{
  match: "#Noun+ (coach|chef|king|engineer|fellow|personality|boy|girl|man|woman|master)",
  tag: 'Actor',
  reason: 'dance-coach'
},
// chief design officer
{
  match: "chief . officer",
  tag: 'Actor',
  reason: 'chief-x-officer'
},
// chief of police
{
  match: "chief of #Noun+",
  tag: 'Actor',
  reason: 'chief-of-police'
},
// president of marketing
{
  match: "senior? vice? president of #Noun+",
  tag: 'Actor',
  reason: 'president-of'
},
// ==== Singular ====
//the sun
{
  match: '#Determiner [sun]',
  group: 0,
  tag: 'Singular',
  reason: 'the-sun'
},
//did a 900, paid a 20
{
  match: '#Verb (a|an) [#Value]$',
  group: 0,
  tag: 'Singular',
  reason: 'did-a-value'
},
//'the can'
{
  match: 'the [(can|will|may)]',
  group: 0,
  tag: 'Singular',
  reason: 'the can'
},
// ==== Possessive ====
//spencer kelly's
{
  match: '#FirstName #Acronym? (#Possessive && #LastName)',
  tag: 'Possessive',
  reason: 'name-poss'
},
//Super Corp's fundraiser
{
  match: '#Organization+ #Possessive',
  tag: 'Possessive',
  reason: 'org-possessive'
},
//Los Angeles's fundraiser
{
  match: '#Place+ #Possessive',
  tag: 'Possessive',
  reason: 'place-possessive'
},
// Ptolemy's experiments
{
  match: '#Possessive #PresentTense #Particle?',
  notIf: '(#Gerund|her)',
  tag: 'Noun',
  reason: 'possessive-verb'
},
// anna's eating vs anna's eating lunch
// my presidents house
{
  match: '(my|our|their|her|his|its) [(#Plural && #Actor)] #Noun',
  tag: 'Possessive',
  reason: 'my-dads'
},
// 10th of a second
{
  match: '#Value of a [second]',
  group: 0,
  unTag: 'Value',
  tag: 'Singular',
  reason: '10th-of-a-second'
},
// 10 seconds
{
  match: '#Value [seconds]',
  group: 0,
  unTag: 'Value',
  tag: 'Plural',
  reason: '10-seconds'
},
// in time
{
  match: 'in [#Infinitive]',
  group: 0,
  tag: 'Singular',
  reason: 'in-age'
},
// a minor in
{
  match: 'a [#Adjective] #Preposition',
  group: 0,
  tag: 'Noun',
  reason: 'a-minor-in'
},
//the repairer said
{
  match: '#Determiner [#Singular] said',
  group: 0,
  tag: 'Actor',
  reason: 'the-actor-said'
},
//the euro sense
{
  match: "#Determiner #Noun [".concat(infNouns, "] !(#Preposition|to|#Adverb)?"),
  group: 0,
  tag: 'Noun',
  reason: 'the-noun-sense'
},
// photographs of a computer are
{
  match: '[#PresentTense] (of|by|for) (a|an|the) #Noun #Copula',
  group: 0,
  tag: 'Plural',
  reason: 'photographs-of'
},
// fight and win
{
  match: '#Infinitive and [%Noun|Verb%]',
  group: 0,
  tag: 'Infinitive',
  reason: 'fight and win'
},
// peace and flowers and love
{
  match: '#Noun and [#Verb] and #Noun',
  group: 0,
  tag: 'Noun',
  reason: 'peace-and-flowers'
},
// the 1992 classic
{
  match: 'the #Cardinal [%Adj|Noun%]',
  group: 0,
  tag: 'Noun',
  reason: 'the-1992-classic'
},
// the premier university
{
  match: '#Copula the [%Adj|Noun%] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'the-premier-university'
},
// scottish - i ate me sandwich
{
  match: 'i #Verb [me] #Noun',
  group: 0,
  tag: 'Possessive',
  reason: 'scottish-me'
},
// dance music
{
  match: '[#PresentTense] (music|class|lesson|night|party|festival|league|ceremony)',
  group: 0,
  tag: 'Noun',
  reason: 'dance-music'
},
// wit it
{
  match: '[wit] (me|it)',
  group: 0,
  tag: 'Presposition',
  reason: 'wit-me'
},
//left-her-boots, shoved her hand
{
  match: '#PastTense #Possessive [#Verb]',
  group: 0,
  tag: 'Noun',
  notIf: '(saw|made)',
  reason: 'left-her-boots'
},
//35 signs
{
  match: '#Value [%Plural|Verb%]',
  group: 0,
  tag: 'Plural',
  notIf: '(one|1|a|an)',
  reason: '35-signs'
},
//had time
{
  match: 'had [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '(#Gerund|come|become)',
  reason: 'had-time'
},
//instant access
{
  match: '%Adj|Noun% %Noun|Verb%',
  tag: '#Adjective #Noun',
  notIf: '#ProperNoun #Noun',
  reason: 'instant-access'
},
// a representative to
{
  match: '#Determiner [%Adj|Noun%] #Conjunction',
  group: 0,
  tag: 'Noun',
  reason: 'a-rep-to'
},
// near death experiences, ambitious sales targets
{
  match: '#Adjective #Noun [%Plural|Verb%]$',
  group: 0,
  tag: 'Plural',
  notIf: '#Pronoun',
  reason: 'near-death-experiences'
},
// your guild colors
{
  match: '#Possessive #Noun [%Plural|Verb%]$',
  group: 0,
  tag: 'Plural',
  reason: 'your-guild-colors'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/noun-gerund.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// the planning processes
{
  match: '(this|that|the|a|an) [#Gerund #Infinitive]',
  group: 0,
  tag: 'Singular',
  reason: 'the-planning-process'
},
// the paving stones
{
  match: '(that|the) [#Gerund #PresentTense]',
  group: 0,
  ifNo: '#Copula',
  tag: 'Plural',
  reason: 'the-paving-stones'
},
// this swimming
// { match: '(this|that|the) [#Gerund]', group: 0, tag: 'Noun', reason: 'this-gerund' },
// the remaining claims
{
  match: '#Determiner [#Gerund] #Noun',
  group: 0,
  tag: 'Adjective',
  reason: 'the-gerund-noun'
},
// i think tipping sucks
{
  match: "#Pronoun #Infinitive [#Gerund] #PresentTense",
  group: 0,
  tag: 'Noun',
  reason: 'tipping-sucks'
},
// early warning
{
  match: '#Adjective [#Gerund]',
  group: 0,
  tag: 'Noun',
  notIf: '(still|even|just)',
  reason: 'early-warning'
},
//walking is cool
{
  match: '[#Gerund] #Adverb? not? #Copula',
  group: 0,
  tag: 'Activity',
  reason: 'gerund-copula'
},
//are doing is
{
  match: '#Copula [(#Gerund|#Activity)] #Copula',
  group: 0,
  tag: 'Gerund',
  reason: 'are-doing-is'
},
//walking should be fun
{
  match: '[#Gerund] #Modal',
  group: 0,
  tag: 'Activity',
  reason: 'gerund-modal'
},
// finish listening
// { match: '#Infinitive [#Gerund]', group: 0, tag: 'Activity', reason: 'finish-listening' },
// the ruling party

// responsibility for setting
{
  match: '#Singular for [%Noun|Gerund%]',
  group: 0,
  tag: 'Gerund',
  reason: 'noun-for-gerund'
},
// better for training
{
  match: '#Comparative (for|at) [%Noun|Gerund%]',
  group: 0,
  tag: 'Gerund',
  reason: 'better-for-gerund'
},
// keep the touching
{
  match: '#PresentTense the [#Gerund]',
  group: 0,
  tag: 'Noun',
  reason: 'keep-the-touching'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/verb-noun.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// do the dance
{
  match: '#Infinitive (this|that|the) [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'do-this-dance'
},
//running-a-show
{
  match: '#Gerund #Determiner [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'running-a-show'
},
//the-only-reason
{
  match: '#Determiner (only|further|just|more|backward) [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'the-only-reason'
},
// a stream runs
{
  match: '(the|this|a|an) [#Infinitive] #Adverb? #Verb',
  group: 0,
  tag: 'Noun',
  reason: 'determiner5'
},
//a nice deal
{
  match: '#Determiner #Adjective #Adjective? [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'a-nice-inf'
},
// the mexican train
{
  match: '#Determiner #Demonym [#PresentTense]',
  group: 0,
  tag: 'Noun',
  reason: 'mexican-train'
},
//next career move
{
  match: '#Adjective #Noun+ [#Infinitive] #Copula',
  group: 0,
  tag: 'Noun',
  reason: 'career-move'
},
// at some point
{
  match: 'at some [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'at-some-inf'
},
// goes to sleep
{
  match: '(go|goes|went) to [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'goes-to-verb'
},
//a close watch on
{
  match: '(a|an) #Adjective? #Noun [#Infinitive] (#Preposition|#Noun)',
  group: 0,
  notIf: 'from',
  tag: 'Noun',
  reason: 'a-noun-inf'
},
//a tv show
{
  match: '(a|an) #Noun [#Infinitive]$',
  group: 0,
  tag: 'Noun',
  reason: 'a-noun-inf2'
},
//is mark hughes
// { match: '#Copula [#Infinitive] #Noun', group: 0, tag: 'Noun', reason: 'is-pres-noun' },
// good wait staff
// { match: '#Adjective [#Infinitive] #Noun', group: 0, tag: 'Noun', reason: 'good-wait-staff' },
// running for congress
{
  match: '#Gerund #Adjective? for [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'running-for'
},
// running to work
// { match: '#Gerund #Adjective to [#Infinitive]', group: 0, tag: 'Noun', reason: 'running-to' },
// about love
{
  match: 'about [#Infinitive]',
  group: 0,
  tag: 'Singular',
  reason: 'about-love'
},
// singers on stage
{
  match: '#Plural on [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'on-stage'
},
// any charge
{
  match: 'any [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'any-charge'
},
// no doubt
{
  match: 'no [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'no-doubt'
},
// number of seats
{
  match: 'number of [#PresentTense]',
  group: 0,
  tag: 'Noun',
  reason: 'number-of-x'
},
// teaches/taught
{
  match: '(taught|teaches|learns|learned) [#PresentTense]',
  group: 0,
  tag: 'Noun',
  reason: 'teaches-x'
},
// use reverse
{
  match: '(try|use|attempt|build|make) [#Verb #Particle?]',
  notIf: '(#Copula|#Noun|sure|fun|up)',
  group: 0,
  tag: 'Noun',
  reason: 'do-verb'
},
//make sure of
// checkmate is
{
  match: '^[#Infinitive] (is|was)',
  group: 0,
  tag: 'Noun',
  reason: 'checkmate-is'
},
// get much sleep
{
  match: '#Infinitive much [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'get-much'
},
// cause i gotta
{
  match: '[cause] #Pronoun #Verb',
  group: 0,
  tag: 'Conjunction',
  reason: 'cause-cuz'
},
// the cardio dance party
{
  match: 'the #Singular [#Infinitive] #Noun',
  group: 0,
  tag: 'Noun',
  notIf: '#Pronoun',
  reason: 'cardio-dance'
},
// that should smoke
{
  match: '#Determiner #Modal [#Noun]',
  group: 0,
  tag: 'PresentTense',
  reason: 'should-smoke'
},
//this rocks
{
  match: 'this [#Plural]',
  group: 0,
  tag: 'PresentTense',
  notIf: '(#Preposition|#Date)',
  reason: 'this-verbs'
},
//voice that rocks
{
  match: '#Noun that [#Plural]',
  group: 0,
  tag: 'PresentTense',
  notIf: '(#Preposition|#Pronoun|way)',
  reason: 'voice-that-rocks'
},
//that leads to
{
  match: 'that [#Plural] to',
  group: 0,
  tag: 'PresentTense',
  notIf: '#Preposition',
  reason: 'that-leads-to'
},
//let him glue
{
  match: '(let|make|made) (him|her|it|#Person|#Place|#Organization)+ [#Singular] (a|an|the|it)',
  group: 0,
  tag: 'Infinitive',
  reason: 'let-him-glue'
},
// assign all tasks
{
  match: '#Verb (all|every|each|most|some|no) [#PresentTense]',
  notIf: '#Modal',
  group: 0,
  tag: 'Noun',
  reason: 'all-presentTense'
},
// PresentTense/Noun ambiguities
// big dreams, critical thinking
// have big dreams
{
  match: '(had|have|#PastTense) #Adjective [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: 'better',
  reason: 'adj-presentTense'
},
// excellent answer spencer
// { match: '^#Adjective [#PresentTense]', group: 0, tag: 'Noun', reason: 'start adj-presentTense' },
// one big reason
{
  match: '#Value #Adjective [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'one-big-reason'
},
// won widespread support
{
  match: '#PastTense #Adjective+ [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '(#Copula|better)',
  reason: 'won-wide-support'
},
// many poses
{
  match: '(many|few|several|couple) [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'many-poses'
},
// very big dreams
{
  match: '#Determiner #Adverb #Adjective [%Noun|Verb%]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'very-big-dream'
},
// from start to finish
{
  match: 'from #Noun to [%Noun|Verb%]',
  group: 0,
  tag: 'Noun',
  reason: 'start-to-finish'
},
// for comparison or contrast
{
  match: '(for|with|of) #Noun (and|or|not) [%Noun|Verb%]',
  group: 0,
  tag: 'Noun',
  notIf: '#Pronoun',
  reason: 'for-food-and-gas'
},
// adorable little store
{
  match: '#Adjective #Adjective [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'adorable-little-store'
},
// of basic training
// { match: '#Preposition #Adjective [#PresentTense]', group: 0, tag: 'Noun', reason: 'of-basic-training' },
// justifiying higher costs
{
  match: '#Gerund #Adverb? #Comparative [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'higher-costs'
}, {
  match: '(#Noun && @hasComma) #Noun (and|or) [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'noun-list'
},
// any questions for
{
  match: '(many|any|some|several) [#PresentTense] for',
  group: 0,
  tag: 'Noun',
  reason: 'any-verbs-for'
},
// to facilitate gas exchange with
{
  match: "to #PresentTense #Noun [#PresentTense] #Preposition",
  group: 0,
  tag: 'Noun',
  reason: 'gas-exchange'
},
// waited until release
{
  match: "#PastTense (until|as|through|without) [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'waited-until-release'
},
// selling like hot cakes
{
  match: "#Gerund like #Adjective? [#PresentTense]",
  group: 0,
  tag: 'Plural',
  reason: 'like-hot-cakes'
},
// some valid reason
{
  match: "some #Adjective [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'some-reason'
},
// for some reason
{
  match: "for some [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'for-some-reason'
},
// same kind of shouts
{
  match: "(same|some|the|that|a) kind of [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'some-kind-of'
},
// a type of shout
{
  match: "(same|some|the|that|a) type of [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'some-type-of'
},
// doing better for fights
{
  match: "#Gerund #Adjective #Preposition [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'doing-better-for-x'
},
// get better aim
{
  match: "(get|got|have) #Comparative [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'got-better-aim'
},
// whose name was
{
  match: 'whose [#PresentTense] #Copula',
  group: 0,
  tag: 'Noun',
  reason: 'whos-name-was'
},
// give up on reason
{
  match: "#PhrasalVerb #Particle #Preposition [#PresentTense]",
  group: 0,
  tag: 'Noun',
  reason: 'given-up-on-x'
},
//there are reasons
{
  match: 'there (are|were) #Adjective? [#PresentTense]',
  group: 0,
  tag: 'Plural',
  reason: 'there-are'
},
// 30 trains
{
  match: '#Value [#PresentTense] of',
  group: 0,
  notIf: '(one|1|#Copula|#Infinitive)',
  tag: 'Plural',
  reason: '2-trains'
},
// compromises are possible
{
  match: '[#PresentTense] (are|were) #Adjective',
  group: 0,
  tag: 'Plural',
  reason: 'compromises-are-possible'
},
// hope i helped
{
  match: '^[(hope|guess|thought|think)] #Pronoun #Verb',
  group: 0,
  tag: 'Infinitive',
  reason: 'suppose-i'
},
//pursue its dreams
// { match: '#PresentTense #Possessive [#PresentTense]', notIf: '#Gerund', group: 0, tag: 'Plural', reason: 'pursue-its-dreams' },
// our unyielding support
{
  match: '#Possessive #Adjective [#Verb]',
  group: 0,
  tag: 'Noun',
  notIf: '#Copula',
  reason: 'our-full-support'
},
// tastes good
{
  match: '[(tastes|smells)] #Adverb? #Adjective',
  group: 0,
  tag: 'PresentTense',
  reason: 'tastes-good'
},
// are you playing golf
// { match: '^are #Pronoun [#Noun]', group: 0, notIf: '(here|there)', tag: 'Verb', reason: 'are-you-x' },
// ignoring commute
{
  match: '#Copula #Gerund [#PresentTense] !by?',
  group: 0,
  tag: 'Noun',
  notIf: 'going',
  reason: 'ignoring-commute'
},
// noun-pastTense variables
{
  match: '#Determiner #Adjective? [(shed|thought|rose|bid|saw|spelt)]',
  group: 0,
  tag: 'Noun',
  reason: 'noun-past'
},
// 'verb-to'
// how to watch
{
  match: 'how to [%Noun|Verb%]',
  group: 0,
  tag: 'Infinitive',
  reason: 'how-to-noun'
},
// which boost it
{
  match: 'which [%Noun|Verb%] #Noun',
  group: 0,
  tag: 'Infinitive',
  reason: 'which-boost-it'
},
// asking questions
{
  match: '#Gerund [%Plural|Verb%]',
  group: 0,
  tag: 'Plural',
  reason: 'asking-questions'
},
// ready to stream
{
  match: '(ready|available|difficult|hard|easy|made|attempt|try) to [%Noun|Verb%]',
  group: 0,
  tag: 'Infinitive',
  reason: 'ready-to-noun'
},
// bring to market
{
  match: '(bring|went|go|drive|run|bike) to [%Noun|Verb%]',
  group: 0,
  tag: 'Noun',
  reason: 'bring-to-noun'
},
// can i sleep, would you look
{
  match: '#Modal #Noun [%Noun|Verb%]',
  group: 0,
  tag: 'Infinitive',
  reason: 'would-you-look'
},
// is just spam
{
  match: '#Copula just [#Infinitive]',
  group: 0,
  tag: 'Noun',
  reason: 'is-just-spam'
},
// request copies
{
  match: '^%Noun|Verb% %Plural|Verb%',
  tag: 'Imperative #Plural',
  reason: 'request-copies'
},
// homemade pickles and drinks
{
  match: '#Adjective #Plural and [%Plural|Verb%]',
  group: 0,
  tag: '#Plural',
  reason: 'pickles-and-drinks'
},
// the 1968 film
{
  match: '#Determiner #Year [#Verb]',
  group: 0,
  tag: 'Noun',
  reason: 'the-1968-film'
},
// the break up
{
  match: '#Determiner [#PhrasalVerb #Particle]',
  group: 0,
  tag: 'Noun',
  reason: 'the-break-up'
},
// the individual goals
{
  match: '#Determiner [%Adj|Noun%] #Noun',
  group: 0,
  tag: 'Adjective',
  notIf: '(#Pronoun|#Possessive|#ProperNoun)',
  reason: 'the-individual-goals'
},
// work or prepare
{
  match: '[%Noun|Verb%] or #Infinitive',
  group: 0,
  tag: 'Infinitive',
  reason: 'work-or-prepare'
},
// to give thanks
{
  match: 'to #Infinitive [#PresentTense]',
  group: 0,
  tag: 'Noun',
  notIf: '(#Gerund|#Copula|help)',
  reason: 'to-give-thanks'
},
// kills me
{
  match: '[#Noun] me',
  group: 0,
  tag: 'Verb',
  reason: 'kills-me'
},
// removes wrinkles
{
  match: '%Plural|Verb% %Plural|Verb%',
  tag: '#PresentTense #Plural',
  reason: 'removes-wrinkles'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/numbers/money.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [{
  match: '#Money and #Money #Currency?',
  tag: 'Money',
  reason: 'money-and-money'
},
// 6 dollars and 5 cents
{
  match: '#Value #Currency [and] #Value (cents|ore|centavos|sens)',
  group: 0,
  tag: 'money',
  reason: 'and-5-cents'
},
// maybe currencies
{
  match: '#Value (mark|rand|won|rub|ore)',
  tag: '#Money #Currency',
  reason: '4-mark'
},
// 3 pounds
{
  match: 'a pound',
  tag: '#Money #Unit',
  reason: 'a-pound'
}, {
  match: '#Value (pound|pounds)',
  tag: '#Money #Unit',
  reason: '4-pounds'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/numbers/fractions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// half a penny
{
  match: '[(half|quarter)] of? (a|an)',
  group: 0,
  tag: 'Fraction',
  reason: 'millionth'
},
// nearly half
{
  match: '#Adverb [half]',
  group: 0,
  tag: 'Fraction',
  reason: 'nearly-half'
},
// half the
{
  match: '[half] the',
  group: 0,
  tag: 'Fraction',
  reason: 'half-the'
},
// and a half
{
  match: '#Cardinal and a half',
  tag: 'Fraction',
  reason: 'and-a-half'
},
// two-halves
{
  match: '#Value (halves|halfs|quarters)',
  tag: 'Fraction',
  reason: 'two-halves'
},
// ---ordinals as fractions---
// a fifth
{
  match: 'a #Ordinal',
  tag: 'Fraction',
  reason: 'a-quarter'
},
// seven fifths
{
  match: '[#Cardinal+] (#Fraction && /s$/)',
  tag: 'Fraction',
  reason: 'seven-fifths'
},
// doc.match('(#Fraction && /s$/)').lookBefore('#Cardinal+$').tag('Fraction')
// one third of ..
{
  match: '[#Cardinal+ #Ordinal] of .',
  group: 0,
  tag: 'Fraction',
  reason: 'ordinal-of'
},
// 100th of
{
  match: '[(#NumericValue && #Ordinal)] of .',
  group: 0,
  tag: 'Fraction',
  reason: 'num-ordinal-of'
},
// a twenty fifth
{
  match: '(a|one) #Cardinal?+ #Ordinal',
  tag: 'Fraction',
  reason: 'a-ordinal'
},
// //  '3 out of 5'
{
  match: '#Cardinal+ out? of every? #Cardinal',
  tag: 'Fraction',
  reason: 'out-of'
}]; // {match:'', tag:'',reason:''},
},{}],"node_modules/compromise/src/2-two/postTagger/model/numbers/numbers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// ==== Ambiguous numbers ====
// 'second'
{
  match: "#Cardinal [second]",
  tag: 'Unit',
  reason: 'one-second'
},
//'a/an' can mean 1 - "a hour"
{
  match: '!once? [(a|an)] (#Duration|hundred|thousand|million|billion|trillion)',
  group: 0,
  tag: 'Value',
  reason: 'a-is-one'
},
// ==== PhoneNumber ====
//1 800 ...
{
  match: '1 #Value #PhoneNumber',
  tag: 'PhoneNumber',
  reason: '1-800-Value'
},
//(454) 232-9873
{
  match: '#NumericValue #PhoneNumber',
  tag: 'PhoneNumber',
  reason: '(800) PhoneNumber'
},
// ==== Currency ====
// chinese yuan
{
  match: '#Demonym #Currency',
  tag: 'Currency',
  reason: 'demonym-currency'
},
// ten bucks
{
  match: '#Value [(buck|bucks|grand)]',
  group: 0,
  tag: 'Currency',
  reason: 'value-bucks'
},
// ==== Money ====
{
  match: '[#Value+] #Currency',
  group: 0,
  tag: 'Money',
  reason: '15 usd'
},
// ==== Ordinal ====
{
  match: '[second] #Noun',
  group: 0,
  tag: 'Ordinal',
  reason: 'second-noun'
},
// ==== Units ====
//5 yan
{
  match: '#Value+ [#Currency]',
  group: 0,
  tag: 'Unit',
  reason: '5-yan'
}, {
  match: '#Value [(foot|feet)]',
  group: 0,
  tag: 'Unit',
  reason: 'foot-unit'
},
//5 kg.
{
  match: '#Value [#Abbreviation]',
  group: 0,
  tag: 'Unit',
  reason: 'value-abbr'
}, {
  match: '#Value [k]',
  group: 0,
  tag: 'Unit',
  reason: 'value-k'
}, {
  match: '#Unit an hour',
  tag: 'Unit',
  reason: 'unit-an-hour'
},
// ==== Magnitudes ====
//minus 7
{
  match: '(minus|negative) #Value',
  tag: 'Value',
  reason: 'minus-value'
},
//seven point five
{
  match: '#Value (point|decimal) #Value',
  tag: 'Value',
  reason: 'value-point-value'
},
//quarter million
{
  match: '#Determiner [(half|quarter)] #Ordinal',
  group: 0,
  tag: 'Value',
  reason: 'half-ordinal'
},
// thousand and two
{
  match: "#Multiple+ and #Value",
  tag: 'Value',
  reason: 'magnitude-and-value'
},
// ambiguous units like 'gb'
// { match: '#Value square? [(kb|mb|gb|tb|ml|pt|qt|tbl|tbsp|km|cm|mm|mi|ft|yd|kg|hg|mg|oz|lb|mph|pa|miles|yard|yards|pound|pounds)]', group: 0, tag: 'Unit', reason: '12-gb' },
// 5 miles per hour
{
  match: '#Value #Unit [(per|an) (hr|hour|sec|second|min|minute)]',
  group: 0,
  tag: 'Unit',
  reason: '12-miles-per-second'
},
// 5 square miles
{
  match: '#Value [(square|cubic)] #Unit',
  group: 0,
  tag: 'Unit',
  reason: 'square-miles'
}
// 5) The expenses
// { match: '^[#Value] (#Determiner|#Gerund)', group: 0, tag: 'Expression', unTag: 'Value', reason: 'numbered-list' },
];
},{}],"node_modules/compromise/src/2-two/postTagger/model/person/person-phrase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// ==== FirstNames ====
//is foo Smith
{
  match: '#Copula [(#Noun|#PresentTense)] #LastName',
  group: 0,
  tag: 'FirstName',
  reason: 'copula-noun-lastname'
},
//pope francis
{
  match: '(sister|pope|brother|father|aunt|uncle|grandpa|grandfather|grandma) #ProperNoun',
  tag: 'Person',
  reason: 'lady-titlecase',
  safe: true
},
// ==== Nickname ====
// Dwayne 'the rock' Johnson
{
  match: '#FirstName [#Determiner #Noun] #LastName',
  group: 0,
  tag: 'Person',
  reason: 'first-noun-last'
}, {
  match: '#ProperNoun (b|c|d|e|f|g|h|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z) #ProperNoun',
  tag: 'Person',
  reason: 'titlecase-acronym-titlecase',
  safe: true
}, {
  match: '#Acronym #LastName',
  tag: 'Person',
  reason: 'acronym-lastname',
  safe: true
}, {
  match: '#Person (jr|sr|md)',
  tag: 'Person',
  reason: 'person-honorific'
},
//remove single 'mr'
{
  match: '#Honorific #Acronym',
  tag: 'Person',
  reason: 'Honorific-TitleCase'
}, {
  match: '#Person #Person the? #RomanNumeral',
  tag: 'Person',
  reason: 'roman-numeral'
}, {
  match: '#FirstName [/^[^aiurck]$/]',
  group: 0,
  tag: ['Acronym', 'Person'],
  reason: 'john-e'
},
//j.k Rowling
{
  match: '#Noun van der? #Noun',
  tag: 'Person',
  reason: 'van der noun',
  safe: true
},
//king of spain
{
  match: '(king|queen|prince|saint|lady) of #Noun',
  tag: 'Person',
  reason: 'king-of-noun',
  safe: true
},
//lady Florence
{
  match: '(prince|lady) #Place',
  tag: 'Person',
  reason: 'lady-place'
},
//saint Foo
{
  match: '(king|queen|prince|saint) #ProperNoun',
  tag: 'Person',
  notIf: '#Place',
  reason: 'saint-foo'
},
// al sharpton
{
  match: 'al (#Person|#ProperNoun)',
  tag: 'Person',
  reason: 'al-borlen',
  safe: true
},
//ferdinand de almar
{
  match: '#FirstName de #Noun',
  tag: 'Person',
  reason: 'bill-de-noun'
},
//Osama bin Laden
{
  match: '#FirstName (bin|al) #Noun',
  tag: 'Person',
  reason: 'bill-al-noun'
},
//John L. Foo
{
  match: '#FirstName #Acronym #ProperNoun',
  tag: 'Person',
  reason: 'bill-acronym-title'
},
//Andrew Lloyd Webber
{
  match: '#FirstName #FirstName #ProperNoun',
  tag: 'Person',
  reason: 'bill-firstname-title'
},
//Mr Foo
{
  match: '#Honorific #FirstName? #ProperNoun',
  tag: 'Person',
  reason: 'dr-john-Title'
},
//peter the great
{
  match: '#FirstName the #Adjective',
  tag: 'Person',
  reason: 'name-the-great'
},
// dick van dyke
{
  match: '#ProperNoun (van|al|bin) #ProperNoun',
  tag: 'Person',
  reason: 'title-van-title',
  safe: true
},
//jose de Sucre
{
  match: '#ProperNoun (de|du) la? #ProperNoun',
  tag: 'Person',
  notIf: '#Place',
  reason: 'title-de-title'
},
//Jani K. Smith
{
  match: '#Singular #Acronym #LastName',
  tag: '#FirstName #Person .',
  reason: 'title-acro-noun',
  safe: true
},
//Foo Ford
{
  match: '[#ProperNoun] #Person',
  group: 0,
  tag: 'Person',
  reason: 'proper-person',
  safe: true
},
// john keith jones
{
  match: '#Person [#ProperNoun #ProperNoun]',
  group: 0,
  tag: 'Person',
  notIf: '#Possessive',
  reason: 'three-name-person',
  safe: true
},
//John Foo
{
  match: '#FirstName #Acronym? [#ProperNoun]',
  group: 0,
  tag: 'LastName',
  notIf: '#Possessive',
  reason: 'firstname-titlecase'
},
// john stewart
{
  match: '#FirstName [#FirstName]',
  group: 0,
  tag: 'LastName',
  reason: 'firstname-firstname'
},
//Joe K. Sombrero
{
  match: '#FirstName #Acronym #Noun',
  tag: 'Person',
  reason: 'n-acro-noun',
  safe: true
},
//Anthony de Marco
{
  match: '#FirstName [(de|di|du|van|von)] #Person',
  group: 0,
  tag: 'LastName',
  reason: 'de-firstname'
},
// baker jenna smith
// { match: '[#Actor+] #Person', group: 0, tag: 'Person', reason: 'baker-sam-smith' },
// sergeant major Harold
{
  match: '[(lieutenant|corporal|sergeant|captain|qeen|king|admiral|major|colonel|marshal|president|queen|king)+] #ProperNoun',
  group: 0,
  tag: 'Honorific',
  reason: 'seargeant-john'
},
// ==== Honorics ====
{
  match: '[(private|general|major|rear|prime|field|count|miss)] #Honorific? #Person',
  group: 0,
  tag: ['Honorific', 'Person'],
  reason: 'ambg-honorifics'
},
// dr john foobar
{
  match: '#Honorific #FirstName [#Singular]',
  group: 0,
  tag: 'LastName',
  notIf: '#Possessive',
  reason: 'dr-john-foo',
  safe: true
},
//his-excellency
{
  match: '[(his|her) (majesty|honour|worship|excellency|honorable)] #Person',
  group: 0,
  tag: 'Honorific',
  reason: 'his-excellency'
},
// Lieutenant colonel
{
  match: '#Honorific #Actor',
  tag: 'Honorific',
  reason: 'Lieutenant colonel'
},
// first lady, second admiral
{
  match: '(first|second|third|1st|2nd|3rd) #Actor',
  tag: 'Honorific',
  reason: 'first lady'
},
// Louis IV
{
  match: '#Person #RomanNumeral',
  tag: 'Person',
  reason: 'louis-IV'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/person/ambig-name.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// const personAdj = '(misty|rusty|dusty|rich|randy|sandy|young|earnest|frank|brown)'
var _default = exports.default = [
// ebenezer scrooge
{
  match: '#FirstName #Noun$',
  tag: '. #LastName',
  notIf: '(#Possessive|#Organization|#Place|#Pronoun|@hasTitleCase)',
  reason: 'firstname-noun'
},
// ===person-date===
{
  match: '%Person|Date% #Acronym? #ProperNoun',
  tag: 'Person',
  reason: 'jan-thierson'
},
// ===person-noun===
//Cliff Clavin
{
  match: '%Person|Noun% #Acronym? #ProperNoun',
  tag: 'Person',
  reason: 'switch-person',
  safe: true
},
// olive garden
{
  match: '%Person|Noun% #Organization',
  tag: 'Organization',
  reason: 'olive-garden'
},
// ===person-verb===
// ollie faroo
{
  match: '%Person|Verb% #Acronym? #ProperNoun',
  tag: 'Person',
  reason: 'verb-propernoun',
  ifNo: '#Actor'
},
// chuck will ...
{
  match: "[%Person|Verb%] (will|had|has|said|says|told|did|learned|wants|wanted)",
  group: 0,
  tag: 'Person',
  reason: 'person-said'
},
// ===person-place===
//sydney harbour
{
  match: "[%Person|Place%] (harbor|harbour|pier|town|city|place|dump|landfill)",
  group: 0,
  tag: 'Place',
  reason: 'sydney-harbour'
},
// east sydney
{
  match: "(west|east|north|south) [%Person|Place%]",
  group: 0,
  tag: 'Place',
  reason: 'east-sydney'
},
// ===person-adjective===
// rusty smith
// { match: `${personAdj} #Person`, tag: 'Person', reason: 'randy-smith' },
// rusty a. smith
// { match: `${personAdj} #Acronym? #ProperNoun`, tag: 'Person', reason: 'rusty-smith' },
// very rusty
// { match: `#Adverb [${personAdj}]`, group: 0, tag: 'Adjective', reason: 'really-rich' },

// ===person-verb===
// would wade
{
  match: "#Modal [%Person|Verb%]",
  group: 0,
  tag: 'Verb',
  reason: 'would-mark'
},
// really wade
{
  match: "#Adverb [%Person|Verb%]",
  group: 0,
  tag: 'Verb',
  reason: 'really-mark'
},
// drew closer
{
  match: "[%Person|Verb%] (#Adverb|#Comparative)",
  group: 0,
  tag: 'Verb',
  reason: 'drew-closer'
},
// wade smith
{
  match: "%Person|Verb% #Person",
  tag: 'Person',
  reason: 'rob-smith'
},
// wade m. Cooper
{
  match: "%Person|Verb% #Acronym #ProperNoun",
  tag: 'Person',
  reason: 'rob-a-smith'
},
// will go
{
  match: '[will] #Verb',
  group: 0,
  tag: 'Modal',
  reason: 'will-verb'
},
// will Pharell
{
  match: '(will && @isTitleCase) #ProperNoun',
  tag: 'Person',
  reason: 'will-name'
},
// jack layton won
{
  match: '(#FirstName && !#Possessive) [#Singular] #Verb',
  group: 0,
  safe: true,
  tag: 'LastName',
  reason: 'jack-layton'
},
// sherwood anderson told
{
  match: '^[#Singular] #Person #Verb',
  group: 0,
  safe: true,
  tag: 'Person',
  reason: 'sherwood-anderson'
},
// bought a warhol
{
  match: '(a|an) [#Person]$',
  group: 0,
  unTag: 'Person',
  reason: 'a-warhol'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/verbs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
//sometimes adverbs - 'pretty good','well above'
{
  match: '#Copula (pretty|dead|full|well|sure) (#Adjective|#Noun)',
  tag: '#Copula #Adverb #Adjective',
  reason: 'sometimes-adverb'
},
//i better ..
{
  match: '(#Pronoun|#Person) (had|#Adverb)? [better] #PresentTense',
  group: 0,
  tag: 'Modal',
  reason: 'i-better'
},
// adj -> gerund
// like
{
  match: '(#Modal|i|they|we|do) not? [like]',
  group: 0,
  tag: 'PresentTense',
  reason: 'modal-like'
},
// ==== Tense ====
//he left
{
  match: '#Noun #Adverb? [left]',
  group: 0,
  tag: 'PastTense',
  reason: 'left-verb'
},
// ==== Copula ====
//will be running (not copula)
{
  match: 'will #Adverb? not? #Adverb? [be] #Gerund',
  group: 0,
  tag: 'Copula',
  reason: 'will-be-copula'
},
//for more complex forms, just tag 'be'
{
  match: 'will #Adverb? not? #Adverb? [be] #Adjective',
  group: 0,
  tag: 'Copula',
  reason: 'be-copula'
},
// ==== Infinitive ====
//march to
{
  match: '[march] (up|down|back|toward)',
  notIf: '#Date',
  group: 0,
  tag: 'Infinitive',
  reason: 'march-to'
},
//must march
{
  match: '#Modal [march]',
  group: 0,
  tag: 'Infinitive',
  reason: 'must-march'
},
// may be
{
  match: "[may] be",
  group: 0,
  tag: 'Verb',
  reason: 'may-be'
},
// subject to
{
  match: "[(subject|subjects|subjected)] to",
  group: 0,
  tag: 'Verb',
  reason: 'subject to'
},
// subject to
{
  match: "[home] to",
  group: 0,
  tag: 'PresentTense',
  reason: 'home to'
},
// === misc==
// side with
// { match: '[(side|fool|monkey)] with', group: 0, tag: 'Infinitive', reason: 'fool-with' },
// open the door
{
  match: '[open] #Determiner',
  group: 0,
  tag: 'Infinitive',
  reason: 'open-the'
},
//were being run
{
  match: "(were|was) being [#PresentTense]",
  group: 0,
  tag: 'PastTense',
  reason: 'was-being'
},
//had been broken
{
  match: "(had|has|have) [been /en$/]",
  group: 0,
  tag: 'Auxiliary Participle',
  reason: 'had-been-broken'
},
//had been smoked
{
  match: "(had|has|have) [been /ed$/]",
  group: 0,
  tag: 'Auxiliary PastTense',
  reason: 'had-been-smoked'
},
//were being run
{
  match: "(had|has) #Adverb? [been] #Adverb? #PastTense",
  group: 0,
  tag: 'Auxiliary',
  reason: 'had-been-adj'
},
//had to walk
{
  match: "(had|has) to [#Noun] (#Determiner|#Possessive)",
  group: 0,
  tag: 'Infinitive',
  reason: 'had-to-noun'
},
// have read
{
  match: "have [#PresentTense]",
  group: 0,
  tag: 'PastTense',
  notIf: '(come|gotten)',
  reason: 'have-read'
},
// does that work
{
  match: "(does|will|#Modal) that [work]",
  group: 0,
  tag: 'PastTense',
  reason: 'does-that-work'
},
// sounds fun
{
  match: "[(sound|sounds)] #Adjective",
  group: 0,
  tag: 'PresentTense',
  reason: 'sounds-fun'
},
// look good
{
  match: "[(look|looks)] #Adjective",
  group: 0,
  tag: 'PresentTense',
  reason: 'looks-good'
},
// stops thinking
{
  match: "[(start|starts|stop|stops|begin|begins)] #Gerund",
  group: 0,
  tag: 'Verb',
  reason: 'starts-thinking'
},
// have read
{
  match: "(have|had) read",
  tag: 'Modal #PastTense',
  reason: 'read-read'
},
//were under cooked
{
  match: "(is|was|were) [(under|over) #PastTense]",
  group: 0,
  tag: 'Adverb Adjective',
  reason: 'was-under-cooked'
},
// damn them
{
  match: '[shit] (#Determiner|#Possessive|them)',
  group: 0,
  tag: 'Verb',
  reason: 'swear1-verb'
}, {
  match: '[damn] (#Determiner|#Possessive|them)',
  group: 0,
  tag: 'Verb',
  reason: 'swear2-verb'
}, {
  match: '[fuck] (#Determiner|#Possessive|them)',
  group: 0,
  tag: 'Verb',
  reason: 'swear3-verb'
},
// jobs that fit
{
  match: '#Plural that %Noun|Verb%',
  tag: '. #Preposition #Infinitive',
  reason: 'jobs-that-work'
},
// works for me
{
  match: '[works] for me',
  group: 0,
  tag: 'PresentTense',
  reason: 'works-for-me'
},
// as we please
{
  match: 'as #Pronoun [please]',
  group: 0,
  tag: 'Infinitive',
  reason: 'as-we-please'
},
// verb-prefixes - 'co write'
{
  match: '[(co|mis|de|inter|intra|pre|re|un|out|under|over|counter)] #Verb',
  group: 0,
  tag: ['Verb', 'Prefix'],
  notIf: '(#Copula|#PhrasalVerb)',
  reason: 'co-write'
},
// dressed and left
{
  match: '#PastTense and [%Adj|Past%]',
  group: 0,
  tag: 'PastTense',
  reason: 'dressed-and-left'
},
// melted and fallen
{
  match: '[%Adj|Past%] and #PastTense',
  group: 0,
  tag: 'PastTense',
  reason: 'dressed-and-left'
},
// is he stoked
{
  match: '#Copula #Pronoun [%Adj|Past%]',
  group: 0,
  tag: 'Adjective',
  reason: 'is-he-stoked'
},
// to dream of
{
  match: 'to [%Noun|Verb%] #Preposition',
  group: 0,
  tag: 'Infinitive',
  reason: 'to-dream-of'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/auxiliary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// these are some of our heaviest-used matches
var _default = exports.default = [
// ==== Auxiliary ====
// have been
{
  match: "will (#Adverb|not)+? [have] (#Adverb|not)+? #Verb",
  group: 0,
  tag: 'Auxiliary',
  reason: 'will-have-vb'
},
//was walking
{
  match: "[#Copula] (#Adverb|not)+? (#Gerund|#PastTense)",
  group: 0,
  tag: 'Auxiliary',
  reason: 'copula-walking'
},
//would walk
{
  match: "[(#Modal|did)+] (#Adverb|not)+? #Verb",
  group: 0,
  tag: 'Auxiliary',
  reason: 'modal-verb'
},
//would have had
{
  match: "#Modal (#Adverb|not)+? [have] (#Adverb|not)+? [had] (#Adverb|not)+? #Verb",
  group: 0,
  tag: 'Auxiliary',
  reason: 'would-have'
},
//support a splattering of auxillaries before a verb
{
  match: "[(has|had)] (#Adverb|not)+? #PastTense",
  group: 0,
  tag: 'Auxiliary',
  reason: 'had-walked'
},
// will walk
{
  match: '[(do|does|did|will|have|had|has|got)] (not|#Adverb)+? #Verb',
  group: 0,
  tag: 'Auxiliary',
  reason: 'have-had'
},
// about to go
{
  match: '[about to] #Adverb? #Verb',
  group: 0,
  tag: ['Auxiliary', 'Verb'],
  reason: 'about-to'
},
//would be walking
{
  match: "#Modal (#Adverb|not)+? [be] (#Adverb|not)+? #Verb",
  group: 0,
  tag: 'Auxiliary',
  reason: 'would-be'
},
//had been walking
{
  match: "[(#Modal|had|has)] (#Adverb|not)+? [been] (#Adverb|not)+? #Verb",
  group: 0,
  tag: 'Auxiliary',
  reason: 'had-been'
},
// was being driven
{
  match: '[(be|being|been)] #Participle',
  group: 0,
  tag: 'Auxiliary',
  reason: 'being-driven'
},
// may want
{
  match: '[may] #Adverb? #Infinitive',
  group: 0,
  tag: 'Auxiliary',
  reason: 'may-want'
},
// was being walked
{
  match: '#Copula (#Adverb|not)+? [(be|being|been)] #Adverb+? #PastTense',
  group: 0,
  tag: 'Auxiliary',
  reason: 'being-walked'
},
// will be walked
{
  match: 'will [be] #PastTense',
  group: 0,
  tag: 'Auxiliary',
  reason: 'will-be-x'
},
// been walking
{
  match: '[(be|been)] (#Adverb|not)+? #Gerund',
  group: 0,
  tag: 'Auxiliary',
  reason: 'been-walking'
},
// used to walk
{
  match: '[used to] #PresentTense',
  group: 0,
  tag: 'Auxiliary',
  reason: 'used-to-walk'
},
// was going to walk
{
  match: '#Copula (#Adverb|not)+? [going to] #Adverb+? #PresentTense',
  group: 0,
  tag: 'Auxiliary',
  reason: 'going-to-walk'
},
// tell me
{
  match: '#Imperative [(me|him|her)]',
  group: 0,
  tag: 'Reflexive',
  reason: 'tell-him'
},
// there is no x
{
  match: '(is|was) #Adverb? [no]',
  group: 0,
  tag: 'Negative',
  reason: 'is-no'
},
// been told
{
  match: '[(been|had|became|came)] #PastTense',
  group: 0,
  notIf: '#PhrasalVerb',
  tag: 'Auxiliary',
  reason: 'been-told'
},
// being born
{
  match: '[(being|having|getting)] #Verb',
  group: 0,
  tag: 'Auxiliary',
  reason: 'being-born'
},
// be walking
{
  match: '[be] #Gerund',
  group: 0,
  tag: 'Auxiliary',
  reason: 'be-walking'
},
// better go
{
  match: '[better] #PresentTense',
  group: 0,
  tag: 'Modal',
  notIf: '(#Copula|#Gerund)',
  reason: 'better-go'
},
// even better
{
  match: 'even better',
  tag: 'Adverb #Comparative',
  reason: 'even-better'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/phrasal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// ==== Phrasal ====
//'foo-up'
{
  match: '(#Verb && @hasHyphen) up',
  tag: 'PhrasalVerb',
  reason: 'foo-up'
}, {
  match: '(#Verb && @hasHyphen) off',
  tag: 'PhrasalVerb',
  reason: 'foo-off'
}, {
  match: '(#Verb && @hasHyphen) over',
  tag: 'PhrasalVerb',
  reason: 'foo-over'
}, {
  match: '(#Verb && @hasHyphen) out',
  tag: 'PhrasalVerb',
  reason: 'foo-out'
},
// walk in on
{
  match: '[#Verb (in|out|up|down|off|back)] (on|in)',
  notIf: '#Copula',
  tag: 'PhrasalVerb Particle',
  reason: 'walk-in-on'
},
// went on for
{
  match: '(lived|went|crept|go) [on] for',
  group: 0,
  tag: 'PhrasalVerb',
  reason: 'went-on'
},
// the curtains come down
{
  match: '#Verb (up|down|in|on|for)$',
  tag: 'PhrasalVerb #Particle',
  notIf: '#PhrasalVerb',
  reason: 'come-down$'
},
// got me thinking
// { match: '(got|had) me [#Noun]', group: 0, tag: 'Verb', reason: 'got-me-gerund' },
// help stop
{
  match: 'help [(stop|end|make|start)]',
  group: 0,
  tag: 'Infinitive',
  reason: 'help-stop'
},
// work in the office
{
  match: '#PhrasalVerb (in && #Particle) #Determiner',
  tag: '#Verb #Preposition #Determiner',
  unTag: 'PhrasalVerb',
  reason: 'work-in-the'
},
// start listening
{
  match: '[(stop|start|finish|help)] #Gerund',
  group: 0,
  tag: 'Infinitive',
  reason: 'start-listening'
},
// mis-fired
// { match: '[(mis)] #Verb', group: 0, tag: 'Verb', reason: 'mis-firedsa' },
//back it up
{
  match: '#Verb (him|her|it|us|himself|herself|itself|everything|something) [(up|down)]',
  group: 0,
  tag: 'Adverb',
  reason: 'phrasal-pronoun-advb'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/imperative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// this is really hard to do
var notIf = '(i|we|they)'; //we do not go
var _default = exports.default = [
// do not go
{
  match: '^do not? [#Infinitive #Particle?]',
  notIf: notIf,
  group: 0,
  tag: 'Imperative',
  reason: 'do-eat'
},
// please go
{
  match: '^please do? not? [#Infinitive #Particle?]',
  group: 0,
  tag: 'Imperative',
  reason: 'please-go'
},
// just go
{
  match: '^just do? not? [#Infinitive #Particle?]',
  group: 0,
  tag: 'Imperative',
  reason: 'just-go'
},
// do it better
{
  match: '^[#Infinitive] it #Comparative',
  notIf: notIf,
  group: 0,
  tag: 'Imperative',
  reason: 'do-it-better'
},
// do it again
{
  match: '^[#Infinitive] it (please|now|again|plz)',
  notIf: notIf,
  group: 0,
  tag: 'Imperative',
  reason: 'do-it-please'
},
// go quickly.
{
  match: '^[#Infinitive] (#Adjective|#Adverb)$',
  group: 0,
  tag: 'Imperative',
  notIf: '(so|such|rather|enough)',
  reason: 'go-quickly'
},
// turn down the noise
{
  match: '^[#Infinitive] (up|down|over) #Determiner',
  group: 0,
  tag: 'Imperative',
  reason: 'turn-down'
},
// eat my shorts
{
  match: '^[#Infinitive] (your|my|the|a|an|any|each|every|some|more|with|on)',
  group: 0,
  notIf: 'like',
  tag: 'Imperative',
  reason: 'eat-my-shorts'
},
// tell him the story
{
  match: '^[#Infinitive] (him|her|it|us|me|there)',
  group: 0,
  tag: 'Imperative',
  reason: 'tell-him'
},
// avoid loud noises
{
  match: '^[#Infinitive] #Adjective #Noun$',
  group: 0,
  tag: 'Imperative',
  reason: 'avoid-loud-noises'
},
// call and reserve
{
  match: '^[#Infinitive] (#Adjective|#Adverb)? and #Infinitive',
  group: 0,
  tag: 'Imperative',
  reason: 'call-and-reserve'
},
// one-word imperatives
{
  match: '^(go|stop|wait|hurry) please?$',
  tag: 'Imperative',
  reason: 'go'
},
// somebody call
{
  match: '^(somebody|everybody) [#Infinitive]',
  group: 0,
  tag: 'Imperative',
  reason: 'somebody-call'
},
// let's leave
{
  match: '^let (us|me) [#Infinitive]',
  group: 0,
  tag: 'Imperative',
  reason: 'lets-leave'
},
// shut the door
{
  match: '^[(shut|close|open|start|stop|end|keep)] #Determiner #Noun',
  group: 0,
  tag: 'Imperative',
  reason: 'shut-the-door'
},
// turn off the light
{
  match: '^[#PhrasalVerb #Particle] #Determiner #Noun',
  group: 0,
  tag: 'Imperative',
  reason: 'turn-off-the-light'
},
// go to toronto
{
  match: '^[go] to .',
  group: 0,
  tag: 'Imperative',
  reason: 'go-to-toronto'
},
// would you recommend
{
  match: '^#Modal you [#Infinitive]',
  group: 0,
  tag: 'Imperative',
  reason: 'would-you-'
},
// never say
{
  match: '^never [#Infinitive]',
  group: 0,
  tag: 'Imperative',
  reason: 'never-stop'
},
// come have a drink
{
  match: '^come #Infinitive',
  tag: 'Imperative',
  notIf: 'on',
  reason: 'come-have'
},
// come and have a drink
{
  match: '^come and? #Infinitive',
  tag: 'Imperative . Imperative',
  notIf: '#PhrasalVerb',
  reason: 'come-and-have'
},
// stay away
{
  match: '^stay (out|away|back)',
  tag: 'Imperative',
  reason: 'stay-away'
},
// stay cool
{
  match: '^[(stay|be|keep)] #Adjective',
  group: 0,
  tag: 'Imperative',
  reason: 'stay-cool'
},
// keep it silent
{
  match: '^[keep it] #Adjective',
  group: 0,
  tag: 'Imperative',
  reason: 'keep-it-cool'
},
// don't be late
{
  match: '^do not [#Infinitive]',
  group: 0,
  tag: 'Imperative',
  reason: 'do-not-be'
},
// allow yourself
{
  match: '[#Infinitive] (yourself|yourselves)',
  group: 0,
  tag: 'Imperative',
  reason: 'allow-yourself'
},
// look what
{
  match: '[#Infinitive] what .',
  group: 0,
  tag: 'Imperative',
  reason: 'look-what'
},
// continue playing
{
  match: '^[#Infinitive] #Gerund',
  group: 0,
  tag: 'Imperative',
  reason: 'keep-playing'
},
// go to it
{
  match: '^[#Infinitive] (to|for|into|toward|here|there)',
  group: 0,
  tag: 'Imperative',
  reason: 'go-to'
},
// relax and unwind
{
  match: '^[#Infinitive] (and|or) #Infinitive',
  group: 0,
  tag: 'Imperative',
  reason: 'inf-and-inf'
},
// commit to
{
  match: '^[%Noun|Verb%] to',
  group: 0,
  tag: 'Imperative',
  reason: 'commit-to'
},
// maintain eye contact
{
  match: '^[#Infinitive] #Adjective? #Singular #Singular',
  group: 0,
  tag: 'Imperative',
  reason: 'maintain-eye-contact'
},
// don't forget to clean
{
  match: 'do not (forget|omit|neglect) to [#Infinitive]',
  group: 0,
  tag: 'Imperative',
  reason: 'do-not-forget'
},
// pay attention
{
  match: '^[(ask|wear|pay|look|help|show|watch|act|fix|kill|stop|start|turn|try|win)] #Noun',
  group: 0,
  tag: 'Imperative',
  reason: 'pay-attention'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/adj-gerund.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// that were growing
{
  match: '(that|which) were [%Adj|Gerund%]',
  group: 0,
  tag: 'Gerund',
  reason: 'that-were-growing'
},
// was dissapointing
// { match: '#Copula [%Adj|Gerund%]$', group: 0, tag: 'Adjective', reason: 'was-disappointing$' },

// repairing crubling roads
{
  match: '#Gerund [#Gerund] #Plural',
  group: 0,
  tag: 'Adjective',
  reason: 'hard-working-fam'
}

// { match: '(that|which) were [%Adj|Gerund%]', group: 0, tag: 'Gerund', reason: 'that-were-growing' },
];
},{}],"node_modules/compromise/src/2-two/postTagger/model/verbs/passive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// ==== Passive voice ===
var _default = exports.default = [
// got walked, was walked, were walked
{
  match: '(got|were|was|is|are|am) (#PastTense|#Participle)',
  tag: 'Passive',
  reason: 'got-walked'
},
// was being walked
{
  match: '(was|were|is|are|am) being (#PastTense|#Participle)',
  tag: 'Passive',
  reason: 'was-being'
},
// had been walked, have been eaten
{
  match: '(had|have|has) been (#PastTense|#Participle)',
  tag: 'Passive',
  reason: 'had-been'
},
// will be cleaned
{
  match: 'will be being? (#PastTense|#Participle)',
  tag: 'Passive',
  reason: 'will-be-cleaned'
},
// suffered by the country
{
  match: '#Noun [(#PastTense|#Participle)] by (the|a) #Noun',
  group: 0,
  tag: 'Passive',
  reason: 'suffered-by'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/_misc.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// order matters
var matches = [
// u r cool
{
  match: 'u r',
  tag: '#Pronoun #Copula',
  reason: 'u r'
}, {
  match: '#Noun [(who|whom)]',
  group: 0,
  tag: 'Determiner',
  reason: 'captain-who'
},
// ==== Conditions ====
// had he survived,
{
  match: '[had] #Noun+ #PastTense',
  group: 0,
  tag: 'Condition',
  reason: 'had-he'
},
// were he to survive
{
  match: '[were] #Noun+ to #Infinitive',
  group: 0,
  tag: 'Condition',
  reason: 'were-he'
},
// some sort of
{
  match: 'some sort of',
  tag: 'Adjective Noun Conjunction',
  reason: 'some-sort-of'
},
// some of
// { match: 'some of', tag: 'Noun Conjunction', reason: 'some-of' },
// of some sort
{
  match: 'of some sort',
  tag: 'Conjunction Adjective Noun',
  reason: 'of-some-sort'
},
// such skill
{
  match: '[such] (a|an|is)? #Noun',
  group: 0,
  tag: 'Determiner',
  reason: 'such-skill'
},
// another one
// { match: '[another] (#Noun|#Value)', group: 0, tag: 'Adjective', reason: 'another-one' },
// right after
{
  match: '[right] (before|after|in|into|to|toward)',
  group: 0,
  tag: '#Adverb',
  reason: 'right-into'
},
// at about
{
  match: '#Preposition [about]',
  group: 0,
  tag: 'Adjective',
  reason: 'at-about'
},
// are ya
{
  match: '(are|#Modal|see|do|for) [ya]',
  group: 0,
  tag: 'Pronoun',
  reason: 'are-ya'
},
// long live
{
  match: '[long live] .',
  group: 0,
  tag: '#Adjective #Infinitive',
  reason: 'long-live'
},
// plenty of
{
  match: '[plenty] of',
  group: 0,
  tag: '#Uncountable',
  reason: 'plenty-of'
},
// 'there' as adjective
{
  match: '(always|nearly|barely|practically) [there]',
  group: 0,
  tag: 'Adjective',
  reason: 'always-there'
},
// existential 'there'
// there she is
{
  match: '[there] (#Adverb|#Pronoun)? #Copula',
  group: 0,
  tag: 'There',
  reason: 'there-is'
},
// is there food
{
  match: '#Copula [there] .',
  group: 0,
  tag: 'There',
  reason: 'is-there'
},
// should there
{
  match: '#Modal #Adverb? [there]',
  group: 0,
  tag: 'There',
  reason: 'should-there'
},
// do you
{
  match: '^[do] (you|we|they)',
  group: 0,
  tag: 'QuestionWord',
  reason: 'do-you'
},
// does he
{
  match: '^[does] (he|she|it|#ProperNoun)',
  group: 0,
  tag: 'QuestionWord',
  reason: 'does-he'
},
// the person who
{
  match: '#Determiner #Noun+ [who] #Verb',
  group: 0,
  tag: 'Preposition',
  reason: 'the-x-who'
},
// the person which
{
  match: '#Determiner #Noun+ [which] #Verb',
  group: 0,
  tag: 'Preposition',
  reason: 'the-x-which'
},
// a while
{
  match: 'a [while]',
  group: 0,
  tag: 'Noun',
  reason: 'a-while'
},
// guess who
{
  match: 'guess who',
  tag: '#Infinitive #QuestionWord',
  reason: 'guess-who'
},
// swear words
{
  match: '[fucking] !#Verb',
  group: 0,
  tag: '#Gerund',
  reason: 'f-as-gerund'
}];
var _default = exports.default = matches;
},{}],"node_modules/compromise/src/2-two/postTagger/model/nouns/organizations.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// import orgWords from './_orgWords.js'
// let orgMap = `(${orgWords.join('|')})`
/*
const multi = [
  'building society',
  'central bank',
  'department store',
  'institute of technology',
  'liberation army',
  'people party',
  'social club',
  'state police',
  'state university',
]
*/
var _default = exports.default = [
// Foo University
// { match: `#Noun ${orgMap}`, tag: 'Organization', safe: true, reason: 'foo-university' },
// // University of Toronto
// { match: `${orgMap} of #Place`, tag: 'Organization', safe: true, reason: 'university-of-foo' },

// // foo regional health authority
// { match: `${orgMap} (health|local|regional)+ authority`, tag: 'Organization', reason: 'regional-health' },
// // foo stock exchange
// { match: `${orgMap} (stock|mergantile)+ exchange`, tag: 'Organization', reason: 'stock-exchange' },
// // foo news service
// { match: `${orgMap} (daily|evening|local)+ news service?`, tag: 'Organization', reason: 'foo-news' },
//University of Foo
{
  match: 'university of #Place',
  tag: 'Organization',
  reason: 'university-of-Foo'
},
//John & Joe's
{
  match: '#Noun (&|n) #Noun',
  tag: 'Organization',
  reason: 'Noun-&-Noun'
},
// teachers union of Ontario
{
  match: '#Organization of the? #ProperNoun',
  tag: 'Organization',
  reason: 'org-of-place',
  safe: true
},
//walmart USA
{
  match: '#Organization #Country',
  tag: 'Organization',
  reason: 'org-country'
},
//organization
{
  match: '#ProperNoun #Organization',
  tag: 'Organization',
  notIf: '#FirstName',
  reason: 'titlecase-org'
},
//FitBit Inc
{
  match: '#ProperNoun (ltd|co|inc|dept|assn|bros)',
  tag: 'Organization',
  reason: 'org-abbrv'
},
// the OCED
{
  match: 'the [#Acronym]',
  group: 0,
  tag: 'Organization',
  reason: 'the-acronym',
  safe: true
},
// government of india
{
  match: 'government of the? [#Place+]',
  tag: 'Organization',
  reason: 'government-of-x'
},
// school board
{
  match: '(health|school|commerce) board',
  tag: 'Organization',
  reason: 'school-board'
},
// special comittee
{
  match: '(nominating|special|conference|executive|steering|central|congressional) committee',
  tag: 'Organization',
  reason: 'special-comittee'
},
// global trade union
{
  match: '(world|global|international|national|#Demonym) #Organization',
  tag: 'Organization',
  reason: 'global-org'
},
// schools
{
  match: '#Noun+ (public|private) school',
  tag: 'School',
  reason: 'noun-public-school'
},
// new york yankees
{
  match: '#Place+ #SportsTeam',
  tag: 'SportsTeam',
  reason: 'place-sportsteam'
},
// 'manchester united'
{
  match: '(dc|atlanta|minnesota|manchester|newcastle|sheffield) united',
  tag: 'SportsTeam',
  reason: 'united-sportsteam'
},
// 'toronto fc'
{
  match: '#Place+ fc',
  tag: 'SportsTeam',
  reason: 'fc-sportsteam'
},
// baltimore quilting club
{
  match: '#Place+ #Noun{0,2} (club|society|group|team|committee|commission|association|guild|crew)',
  tag: 'Organization',
  reason: 'place-noun-society'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/nouns/places.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// ==== Region ====
// West Norforlk
{
  match: '(west|north|south|east|western|northern|southern|eastern)+ #Place',
  tag: 'Region',
  reason: 'west-norfolk'
},
//some us-state acronyms (exlude: al, in, la, mo, hi, me, md, ok..)
{
  match: '#City [(al|ak|az|ar|ca|ct|dc|fl|ga|id|il|nv|nh|nj|ny|oh|pa|sc|tn|tx|ut|vt|pr)]',
  group: 0,
  tag: 'Region',
  reason: 'us-state'
},
// portland oregon
{
  match: 'portland [or]',
  group: 0,
  tag: 'Region',
  reason: 'portland-or'
},
//words removed from preTagger/placeWords
{
  match: '#ProperNoun+ (cliff|place|range|pit|place|point|room|grounds|ruins)',
  tag: 'Place',
  reason: 'foo-point'
},
// in Foo California
{
  match: 'in [#ProperNoun] #Place',
  group: 0,
  tag: 'Place',
  reason: 'propernoun-place'
},
// Address
{
  match: '#Value #Noun (st|street|rd|road|crescent|cr|way|tr|terrace|avenue|ave)',
  tag: 'Address',
  reason: 'address-st'
},
// port dover
{
  match: '(port|mount|mt) #ProperName',
  tag: 'Place',
  reason: 'port-name'
}
// generic 'oak ridge' names
// { match: '(oak|maple|spruce|pine|cedar|willow|green|sunset|sunrise) #Place', tag: 'Place', reason: 'tree-name' },
// generic 'sunset view' names
// { match: '() #Place', tag: 'Place', reason: 'tree-name' },

// Sports Arenas and Complexs
// {
//   match:
//     '(#Place+|#Place|#ProperNoun) (memorial|athletic|community|financial)? (sportsplex|stadium|sports centre|sports field|soccer complex|soccer centre|sports complex|civic centre|centre|arena|gardens|complex|coliseum|auditorium|place|building)',
//   tag: 'Place',
//   reason: 'sport-complex',
// },
];
},{}],"node_modules/compromise/src/2-two/postTagger/model/conjunctions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
// ==== Conjunctions ====
{
  match: '[so] #Noun',
  group: 0,
  tag: 'Conjunction',
  reason: 'so-conj'
},
//how he is driving
{
  match: '[(who|what|where|why|how|when)] #Noun #Copula #Adverb? (#Verb|#Adjective)',
  group: 0,
  tag: 'Conjunction',
  reason: 'how-he-is-x'
},
// when he
{
  match: '#Copula [(who|what|where|why|how|when)] #Noun',
  group: 0,
  tag: 'Conjunction',
  reason: 'when-he'
},
// says that he..
{
  match: '#Verb [that] #Pronoun',
  group: 0,
  tag: 'Conjunction',
  reason: 'said-that-he'
},
// things that are required
{
  match: '#Noun [that] #Copula',
  group: 0,
  tag: 'Conjunction',
  reason: 'that-are'
},
// things that seem cool
{
  match: '#Noun [that] #Verb #Adjective',
  group: 0,
  tag: 'Conjunction',
  reason: 'that-seem'
},
// wasn't that wide..
{
  match: '#Noun #Copula not? [that] #Adjective',
  group: 0,
  tag: 'Adverb',
  reason: 'that-adj'
},
// ==== Prepositions ====
//all students
{
  match: '#Verb #Adverb? #Noun [(that|which)]',
  group: 0,
  tag: 'Preposition',
  reason: 'that-prep'
},
//work, which has been done.
{
  match: '@hasComma [which] (#Pronoun|#Verb)',
  group: 0,
  tag: 'Preposition',
  reason: 'which-copula'
},
//folks like her
{
  match: '#Noun [like] #Noun',
  group: 0,
  tag: 'Preposition',
  reason: 'noun-like'
},
//like the time
{
  match: '^[like] #Determiner',
  group: 0,
  tag: 'Preposition',
  reason: 'like-the'
},
//a day like this
{
  match: 'a #Noun [like] (#Noun|#Determiner)',
  group: 0,
  tag: 'Preposition',
  reason: 'a-noun-like'
},
// really like
{
  match: '#Adverb [like]',
  group: 0,
  tag: 'Verb',
  reason: 'really-like'
},
// nothing like
{
  match: '(not|nothing|never) [like]',
  group: 0,
  tag: 'Preposition',
  reason: 'nothing-like'
},
// treat them like
{
  match: '#Infinitive #Pronoun [like]',
  group: 0,
  tag: 'Preposition',
  reason: 'treat-them-like'
},
// ==== Questions ====
// where
// why
// when
// who
// whom
// whose
// what
// which
//the word 'how many'
// { match: '^(how|which)', tag: 'QuestionWord', reason: 'how-question' },
// how-he, when the
{
  match: '[#QuestionWord] (#Pronoun|#Determiner)',
  group: 0,
  tag: 'Preposition',
  reason: 'how-he'
},
// when stolen
{
  match: '[#QuestionWord] #Participle',
  group: 0,
  tag: 'Preposition',
  reason: 'when-stolen'
},
// how is
{
  match: '[how] (#Determiner|#Copula|#Modal|#PastTense)',
  group: 0,
  tag: 'QuestionWord',
  reason: 'how-is'
},
// children who dance
{
  match: '#Plural [(who|which|when)] .',
  group: 0,
  tag: 'Preposition',
  reason: 'people-who'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/expressions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = [
//swear-words as non-expression POS
{
  match: 'holy (shit|fuck|hell)',
  tag: 'Expression',
  reason: 'swears-expression'
},
// well..
{
  match: '^[(well|so|okay|now)] !#Adjective?',
  group: 0,
  tag: 'Expression',
  reason: 'well-'
},
// well..
{
  match: '^come on',
  tag: 'Expression',
  reason: 'come-on'
},
// sorry
{
  match: '(say|says|said) [sorry]',
  group: 0,
  tag: 'Expression',
  reason: 'say-sorry'
},
// ok,
{
  match: '^(ok|alright|shoot|hell|anyways)',
  tag: 'Expression',
  reason: 'ok-'
},
// c'mon marge..
// { match: '^[come on] #Noun', group: 0, tag: 'Expression', reason: 'come-on' },
// say,
{
  match: '^(say && @hasComma)',
  tag: 'Expression',
  reason: 'say-'
}, {
  match: '^(like && @hasComma)',
  tag: 'Expression',
  reason: 'like-'
},
// dude we should
{
  match: '^[(dude|man|girl)] #Pronoun',
  group: 0,
  tag: 'Expression',
  reason: 'dude-i'
}];
},{}],"node_modules/compromise/src/2-two/postTagger/model/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _adjective = _interopRequireDefault(require("./adjective/adjective.js"));
var _adjAdverb = _interopRequireDefault(require("./adjective/adj-adverb.js"));
var _adjGerund = _interopRequireDefault(require("./adjective/adj-gerund.js"));
var _adjNoun = _interopRequireDefault(require("./adjective/adj-noun.js"));
var _adjVerb = _interopRequireDefault(require("./adjective/adj-verb.js"));
var _adverb = _interopRequireDefault(require("./adverb.js"));
var _datePhrase = _interopRequireDefault(require("./dates/date-phrase.js"));
var _date = _interopRequireDefault(require("./dates/date.js"));
var _nouns = _interopRequireDefault(require("./nouns/nouns.js"));
var _nounGerund = _interopRequireDefault(require("./verbs/noun-gerund.js"));
var _verbNoun = _interopRequireDefault(require("./verbs/verb-noun.js"));
var _money = _interopRequireDefault(require("./numbers/money.js"));
var _fractions = _interopRequireDefault(require("./numbers/fractions.js"));
var _numbers = _interopRequireDefault(require("./numbers/numbers.js"));
var _personPhrase = _interopRequireDefault(require("./person/person-phrase.js"));
var _ambigName = _interopRequireDefault(require("./person/ambig-name.js"));
var _verbs = _interopRequireDefault(require("./verbs/verbs.js"));
var _auxiliary = _interopRequireDefault(require("./verbs/auxiliary.js"));
var _phrasal = _interopRequireDefault(require("./verbs/phrasal.js"));
var _imperative = _interopRequireDefault(require("./verbs/imperative.js"));
var _adjGerund2 = _interopRequireDefault(require("./verbs/adj-gerund.js"));
var _passive = _interopRequireDefault(require("./verbs/passive.js"));
var _misc = _interopRequireDefault(require("./_misc.js"));
var _organizations = _interopRequireDefault(require("./nouns/organizations.js"));
var _places = _interopRequireDefault(require("./nouns/places.js"));
var _conjunctions = _interopRequireDefault(require("./conjunctions.js"));
var _expressions = _interopRequireDefault(require("./expressions.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var matches = [].concat(
// order matters top-matches can get overwritten
_passive.default, _adjective.default, _adjAdverb.default, _adjGerund.default, _adjNoun.default, _adverb.default, _date.default, _datePhrase.default, _nouns.default, _nounGerund.default, _verbNoun.default, _money.default, _fractions.default, _numbers.default, _personPhrase.default, _ambigName.default, _verbs.default, _adjVerb.default, _auxiliary.default, _phrasal.default, _imperative.default, _adjGerund2.default, _misc.default, _organizations.default, _places.default, _conjunctions.default, _expressions.default);
var _default = exports.default = {
  two: {
    matches: matches
  }
};
},{"./adjective/adjective.js":"node_modules/compromise/src/2-two/postTagger/model/adjective/adjective.js","./adjective/adj-adverb.js":"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-adverb.js","./adjective/adj-gerund.js":"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-gerund.js","./adjective/adj-noun.js":"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-noun.js","./adjective/adj-verb.js":"node_modules/compromise/src/2-two/postTagger/model/adjective/adj-verb.js","./adverb.js":"node_modules/compromise/src/2-two/postTagger/model/adverb.js","./dates/date-phrase.js":"node_modules/compromise/src/2-two/postTagger/model/dates/date-phrase.js","./dates/date.js":"node_modules/compromise/src/2-two/postTagger/model/dates/date.js","./nouns/nouns.js":"node_modules/compromise/src/2-two/postTagger/model/nouns/nouns.js","./verbs/noun-gerund.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/noun-gerund.js","./verbs/verb-noun.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/verb-noun.js","./numbers/money.js":"node_modules/compromise/src/2-two/postTagger/model/numbers/money.js","./numbers/fractions.js":"node_modules/compromise/src/2-two/postTagger/model/numbers/fractions.js","./numbers/numbers.js":"node_modules/compromise/src/2-two/postTagger/model/numbers/numbers.js","./person/person-phrase.js":"node_modules/compromise/src/2-two/postTagger/model/person/person-phrase.js","./person/ambig-name.js":"node_modules/compromise/src/2-two/postTagger/model/person/ambig-name.js","./verbs/verbs.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/verbs.js","./verbs/auxiliary.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/auxiliary.js","./verbs/phrasal.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/phrasal.js","./verbs/imperative.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/imperative.js","./verbs/adj-gerund.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/adj-gerund.js","./verbs/passive.js":"node_modules/compromise/src/2-two/postTagger/model/verbs/passive.js","./_misc.js":"node_modules/compromise/src/2-two/postTagger/model/_misc.js","./nouns/organizations.js":"node_modules/compromise/src/2-two/postTagger/model/nouns/organizations.js","./nouns/places.js":"node_modules/compromise/src/2-two/postTagger/model/nouns/places.js","./conjunctions.js":"node_modules/compromise/src/2-two/postTagger/model/conjunctions.js","./expressions.js":"node_modules/compromise/src/2-two/postTagger/model/expressions.js"}],"node_modules/compromise/src/2-two/postTagger/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var net = null;

// runs all match/tag patterns in model.two.matches
var postTagger = function postTagger(view) {
  var world = view.world;
  var model = world.model,
    methods = world.methods;
  net = net || methods.one.buildNet(model.two.matches, world);
  // perform these matches on a comma-seperated document
  var document = methods.two.quickSplit(view.document);
  var ptrs = document.map(function (terms) {
    var t = terms[0];
    return [t.index[0], t.index[1], t.index[1] + terms.length];
  });
  var m = view.update(ptrs);
  m.cache();
  m.sweep(net);
  view.uncache();
  view.unfreeze();
  return view;
};

// helper function for compute('tagger')
var tagger = function tagger(view) {
  return view.compute(['freeze', 'lexicon', 'preTagger', 'postTagger', 'unfreeze']);
};
var _default = exports.default = {
  postTagger: postTagger,
  tagger: tagger
};
},{}],"node_modules/compromise/src/2-two/postTagger/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var round = function round(n) {
  return Math.round(n * 100) / 100;
};
function _default(View) {
  // average tagger score
  View.prototype.confidence = function () {
    var sum = 0;
    var count = 0;
    this.docs.forEach(function (terms) {
      terms.forEach(function (term) {
        count += 1;
        sum += term.confidence || 1;
      });
    });
    if (count === 0) {
      return 1;
    }
    return round(sum / count);
  };

  // (re-) run the POS-tagger
  View.prototype.tagger = function () {
    return this.compute(['tagger']);
  };
}
},{}],"node_modules/compromise/src/2-two/postTagger/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./model/index.js"));
var _index2 = _interopRequireDefault(require("./compute/index.js"));
var _api = _interopRequireDefault(require("./api.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var plugin = {
  api: _api.default,
  compute: _index2.default,
  model: _index.default,
  hooks: ['postTagger']
};
var _default = exports.default = plugin;
},{"./model/index.js":"node_modules/compromise/src/2-two/postTagger/model/index.js","./compute/index.js":"node_modules/compromise/src/2-two/postTagger/compute/index.js","./api.js":"node_modules/compromise/src/2-two/postTagger/api.js"}],"node_modules/compromise/src/2-two/lazy/maybeMatch.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var getWords = function getWords(net) {
  return Object.keys(net.hooks).filter(function (w) {
    return !w.startsWith('#') && !w.startsWith('%');
  });
};
var maybeMatch = function maybeMatch(doc, net) {
  // must have *atleast* one of these words
  var words = getWords(net);
  if (words.length === 0) {
    return doc;
  }
  if (!doc._cache) {
    doc.cache();
  }
  var cache = doc._cache;
  // return sentences that have one of our needed words
  return doc.filter(function (_m, i) {
    return words.some(function (str) {
      return cache[i].has(str);
    });
  });
};
var _default = exports.default = maybeMatch;
},{}],"node_modules/compromise/src/2-two/lazy/lazyParse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _maybeMatch = _interopRequireDefault(require("./maybeMatch.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// tokenize first, then only tag sentences required
var lazyParse = function lazyParse(input, reg) {
  var net = reg;
  if (typeof reg === 'string') {
    net = this.buildNet([{
      match: reg
    }]);
  }
  var doc = this.tokenize(input);
  var m = (0, _maybeMatch.default)(doc, net);
  if (m.found) {
    m.compute(['index', 'tagger']);
    return m.match(reg);
  }
  return doc.none();
};
var _default = exports.default = lazyParse;
},{"./maybeMatch.js":"node_modules/compromise/src/2-two/lazy/maybeMatch.js"}],"node_modules/compromise/src/2-two/lazy/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lazyParse = _interopRequireDefault(require("./lazyParse.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  lib: {
    lazy: _lazyParse.default
  }
};
},{"./lazyParse.js":"node_modules/compromise/src/2-two/lazy/lazyParse.js"}],"node_modules/compromise/src/2-two/swap/api/swap-verb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var matchVerb = function matchVerb(m, lemma) {
  var conjugate = m.methods.two.transform.verb.conjugate;
  var all = conjugate(lemma, m.model);
  if (m.has('#Gerund')) {
    return all.Gerund;
  }
  if (m.has('#PastTense')) {
    return all.PastTense;
  }
  if (m.has('#PresentTense')) {
    return all.PresentTense;
  }
  if (m.has('#Gerund')) {
    return all.Gerund;
  }
  return lemma;
};
var swapVerb = function swapVerb(vb, lemma) {
  var str = lemma;
  vb.forEach(function (m) {
    if (!m.has('#Infinitive')) {
      str = matchVerb(m, lemma);
    }
    m.replaceWith(str);
  });
  return vb;
};
var _default = exports.default = swapVerb;
},{}],"node_modules/compromise/src/2-two/swap/api/swap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _swapVerb = _interopRequireDefault(require("./swap-verb.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var swapNoun = function swapNoun(m, lemma) {
  var str = lemma;
  if (m.has('#Plural')) {
    var toPlural = m.methods.two.transform.noun.toPlural;
    str = toPlural(lemma, m.model);
  }
  m.replaceWith(str, {
    possessives: true
  });
};
var swapAdverb = function swapAdverb(m, lemma) {
  var toAdverb = m.methods.two.transform.adjective.toAdverb;
  var str = lemma;
  var adv = toAdverb(str);
  if (adv) {
    m.replaceWith(adv);
  }
};
var swapAdjective = function swapAdjective(m, lemma) {
  var _m$methods$two$transf = m.methods.two.transform.adjective,
    toComparative = _m$methods$two$transf.toComparative,
    toSuperlative = _m$methods$two$transf.toSuperlative;
  var str = lemma;
  if (m.has('#Comparative')) {
    str = toComparative(str, m.model);
  } else if (m.has('#Superlative')) {
    str = toSuperlative(str, m.model);
  }
  if (str) {
    m.replaceWith(str);
  }
};
var swap = function swap(from, to, tag) {
  var reg = from.split(/ /g).map(function (str) {
    return str.toLowerCase().trim();
  });
  reg = reg.filter(function (str) {
    return str;
  });
  reg = reg.map(function (str) {
    return "{".concat(str, "}");
  }).join(' ');
  var m = this.match(reg);
  // guard against some homonyms
  if (tag) {
    m = m.if(tag);
  }
  if (m.has('#Verb')) {
    return (0, _swapVerb.default)(m, to);
  }
  if (m.has('#Noun')) {
    return swapNoun(m, to);
  }
  if (m.has('#Adverb')) {
    return swapAdverb(m, to);
  }
  if (m.has('#Adjective')) {
    return swapAdjective(m, to);
  }
  return this;
};
var _default = exports.default = swap;
},{"./swap-verb.js":"node_modules/compromise/src/2-two/swap/api/swap-verb.js"}],"node_modules/compromise/src/2-two/swap/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _swap = _interopRequireDefault(require("./api/swap.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var api = function api(View) {
  View.prototype.swap = _swap.default;
};
var _default = exports.default = {
  api: api
};
},{"./api/swap.js":"node_modules/compromise/src/2-two/swap/api/swap.js"}],"node_modules/compromise/src/two.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _one = _interopRequireDefault(require("./one.js"));
var _plugin = _interopRequireDefault(require("./2-two/preTagger/plugin.js"));
var _plugin2 = _interopRequireDefault(require("./2-two/contraction-two/plugin.js"));
var _plugin3 = _interopRequireDefault(require("./2-two/postTagger/plugin.js"));
var _plugin4 = _interopRequireDefault(require("./2-two/lazy/plugin.js"));
var _plugin5 = _interopRequireDefault(require("./2-two/swap/plugin.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
_one.default.plugin(_plugin.default); //~103kb
_one.default.plugin(_plugin2.default); //
_one.default.plugin(_plugin3.default); //~33kb
_one.default.plugin(_plugin4.default); //
_one.default.plugin(_plugin5.default); //
var _default = exports.default = _one.default;
},{"./one.js":"node_modules/compromise/src/one.js","./2-two/preTagger/plugin.js":"node_modules/compromise/src/2-two/preTagger/plugin.js","./2-two/contraction-two/plugin.js":"node_modules/compromise/src/2-two/contraction-two/plugin.js","./2-two/postTagger/plugin.js":"node_modules/compromise/src/2-two/postTagger/plugin.js","./2-two/lazy/plugin.js":"node_modules/compromise/src/2-two/lazy/plugin.js","./2-two/swap/plugin.js":"node_modules/compromise/src/2-two/swap/plugin.js"}],"node_modules/compromise/src/3-three/adjectives/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _readOnlyError(r) { throw new TypeError('"' + r + '" is read-only'); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
// guard against superlative+comparative forms
var toRoot = function toRoot(adj) {
  var _adj$methods$two$tran = adj.methods.two.transform.adjective,
    fromComparative = _adj$methods$two$tran.fromComparative,
    fromSuperlative = _adj$methods$two$tran.fromSuperlative;
  var str = adj.text('normal');
  if (adj.has('#Comparative')) {
    return fromComparative(str, adj.model);
  }
  if (adj.has('#Superlative')) {
    return fromSuperlative(str, adj.model);
  }
  return str;
};
var api = function api(View) {
  var Adjectives = /*#__PURE__*/function (_View) {
    function Adjectives(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Adjectives);
      _this = _callSuper(this, Adjectives, [document, pointer, groups]);
      _this.viewType = 'Adjectives';
      return _this;
    }
    _inherits(Adjectives, _View);
    return _createClass(Adjectives, [{
      key: "json",
      value: function json() {
        var _this2 = this;
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var _this$methods$two$tra = this.methods.two.transform.adjective,
          toAdverb = _this$methods$two$tra.toAdverb,
          toNoun = _this$methods$two$tra.toNoun,
          toSuperlative = _this$methods$two$tra.toSuperlative,
          toComparative = _this$methods$two$tra.toComparative;
        opts.normal = true;
        return this.map(function (m) {
          var json = m.toView().json(opts)[0] || {};
          var str = toRoot(m);
          json.adjective = {
            adverb: toAdverb(str, _this2.model),
            noun: toNoun(str, _this2.model),
            superlative: toSuperlative(str, _this2.model),
            comparative: toComparative(str, _this2.model)
          };
          return json;
        }, []);
      }
    }, {
      key: "adverbs",
      value: function adverbs() {
        return this.before('#Adverb+$').concat(this.after('^#Adverb+'));
      }
    }, {
      key: "conjugate",
      value: function conjugate(n) {
        var _this3 = this;
        var _this$methods$two$tra2 = this.methods.two.transform.adjective,
          toComparative = _this$methods$two$tra2.toComparative,
          toSuperlative = _this$methods$two$tra2.toSuperlative,
          toNoun = _this$methods$two$tra2.toNoun,
          toAdverb = _this$methods$two$tra2.toAdverb;
        return this.getNth(n).map(function (adj) {
          var root = toRoot(adj);
          return {
            Adjective: root,
            Comparative: toComparative(root, _this3.model),
            Superlative: toSuperlative(root, _this3.model),
            Noun: toNoun(root, _this3.model),
            Adverb: toAdverb(root, _this3.model)
          };
        }, []);
      }
    }, {
      key: "toComparative",
      value: function toComparative(n) {
        var _this4 = this;
        var toComparative = this.methods.two.transform.adjective.toComparative;
        return this.getNth(n).map(function (adj) {
          var root = toRoot(adj);
          var str = toComparative(root, _this4.model);
          return adj.replaceWith(str);
        });
      }
    }, {
      key: "toSuperlative",
      value: function toSuperlative(n) {
        var _this5 = this;
        var toSuperlative = this.methods.two.transform.adjective.toSuperlative;
        return this.getNth(n).map(function (adj) {
          var root = toRoot(adj);
          var str = toSuperlative(root, _this5.model);
          return adj.replaceWith(str);
        });
      }
    }, {
      key: "toAdverb",
      value: function toAdverb(n) {
        var _this6 = this;
        var toAdverb = this.methods.two.transform.adjective.toAdverb;
        return this.getNth(n).map(function (adj) {
          var root = toRoot(adj);
          var str = toAdverb(root, _this6.model);
          return adj.replaceWith(str);
        });
      }
    }, {
      key: "toNoun",
      value: function toNoun(n) {
        var _this7 = this;
        var toNoun = this.methods.two.transform.adjective.toNoun;
        return this.getNth(n).map(function (adj) {
          var root = toRoot(adj);
          var str = toNoun(root, _this7.model);
          return adj.replaceWith(str);
        });
      }
    }]);
  }(View);
  View.prototype.adjectives = function (n) {
    var m = this.match('#Adjective');
    m = m.getNth(n);
    return new Adjectives(m.document, m.pointer);
  };
  View.prototype.superlatives = function (n) {
    var m = this.match('#Superlative');
    m = m.getNth(n);
    return new Adjectives(m.document, m.pointer);
  };
  View.prototype.comparatives = function (n) {
    var m = this.match('#Comparative');
    m = m.getNth(n);
    return new Adjectives(m.document, m.pointer);
  };
};
var _default = exports.default = {
  api: api
};
},{}],"node_modules/compromise/src/3-three/adverbs/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
// guard against superlative+comparative forms
var toRoot = function toRoot(adj) {
  var str = adj.compute('root').text('root');
  return str;
};

// return the nth elem of a doc
var api = function api(View) {
  var Adverbs = /*#__PURE__*/function (_View) {
    function Adverbs(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Adverbs);
      _this = _callSuper(this, Adverbs, [document, pointer, groups]);
      _this.viewType = 'Adverbs';
      return _this;
    }
    _inherits(Adverbs, _View);
    return _createClass(Adverbs, [{
      key: "conjugate",
      value: function conjugate(n) {
        return this.getNth(n).map(function (adv) {
          var adj = toRoot(adv);
          return {
            Adverb: adv.text('normal'),
            Adjective: adj
          };
        }, []);
      }
    }, {
      key: "json",
      value: function json() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var fromAdverb = this.methods.two.transform.adjective.fromAdverb;
        opts.normal = true;
        return this.map(function (m) {
          var json = m.toView().json(opts)[0] || {};
          json.adverb = {
            adjective: fromAdverb(json.normal)
          };
          return json;
        }, []);
      }
    }]);
  }(View);
  View.prototype.adverbs = function (n) {
    var m = this.match('#Adverb');
    m = m.getNth(n);
    return new Adverbs(m.document, m.pointer);
  };
};
var _default = exports.default = {
  api: api
};
},{}],"node_modules/compromise/src/3-three/chunker/api/clauses.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var byComma = function byComma(doc) {
  var commas = doc.match('@hasComma');
  // remove any non-clause uses
  commas = commas.filter(function (m) {
    // don't split the first word
    if (m.growLeft('.').wordCount() === 1) {
      return false;
    }
    // don't split the last word
    if (m.growRight('. .').wordCount() === 1) {
      return false;
    }
    var more = m.grow('.'); // grow by 1 word in either direction
    more = more.ifNo('@hasComma @hasComma'); //fun, cool...
    more = more.ifNo('@hasComma (and|or) .'); //cool, and fun
    more = more.ifNo('(#City && @hasComma) #Country'); //'toronto, canada'
    more = more.ifNo('(#WeekDay && @hasComma) #Date'); //'tuesday, march 2nd'
    more = more.ifNo('(#Date+ && @hasComma) #Value'); //'july 6, 1992'
    more = more.ifNo('(#Adjective && @hasComma) #Adjective'); //nice, pretty
    // more = more.ifNo('@hasComma (too|also)$') //at end of sentence
    return more.found;
  });
  return doc.splitAfter(commas);
};

// should we split-out a clause (in brackets)?
var splitParentheses = function splitParentheses(doc) {
  var matches = doc.parentheses();
  matches = matches.filter(function (m) {
    return m.wordCount() >= 3 && m.has('#Verb') && m.has('#Noun');
  });
  return doc.splitOn(matches);
};

// split-out a long quotion, but not 'inline quotes'.
var splitQuotes = function splitQuotes(doc) {
  var matches = doc.quotations();
  matches = matches.filter(function (m) {
    return m.wordCount() >= 3 && m.has('#Verb') && m.has('#Noun');
  });
  return doc.splitOn(matches);
};
var clauses = function clauses(n) {
  var found = this;
  found = splitParentheses(found);
  found = splitQuotes(found);
  found = byComma(found);
  found = found.splitAfter('(@hasEllipses|@hasSemicolon|@hasDash|@hasColon)');

  // i said
  found = found.splitAfter('^#Pronoun (said|says)');
  // ... said John.
  found = found.splitBefore('(said|says) #ProperNoun$');

  // ... if it was
  found = found.splitBefore('. . if .{4}');

  // various conjunctions
  found = found.splitBefore('and while');
  found = found.splitBefore('now that');
  found = found.splitBefore('ever since');
  found = found.splitBefore('(supposing|although)');
  found = found.splitBefore('even (while|if|though)');
  found = found.splitBefore('(whereas|whose)');
  // found = found.splitBefore('as (far|long|much|soon) as')
  found = found.splitBefore('as (though|if)');
  found = found.splitBefore('(til|until)');

  // it is cool but it is ..
  var m = found.match('#Verb .* [but] .* #Verb', 0);
  if (m.found) {
    found = found.splitBefore(m);
  }
  // it is cool and it is ..
  // let conjunctions = found.if('#Copula #Adjective #Conjunction (#Pronoun|#Determiner) #Verb').match('#Conjunction')
  // found = found.splitBefore(conjunctions)

  // if it is this then that
  var condition = found.if('if .{2,9} then .').match('then');
  found = found.splitBefore(condition);

  // // misc clause partitions
  // found = found.splitBefore('as well as .')
  // found = found.splitBefore('such as .')
  // found = found.splitBefore('in addition to .')

  // // semicolons, dashes
  // found = found.splitAfter('@hasSemicolon')
  // found = found.splitAfter('@hasDash')

  // //
  // found = found.splitBefore('which (were|are|will)')

  // // he said [...]
  // found = found.splitAfter('#Noun (said|say|says)')

  // passive voice verb - '.. which was robbed is empty'
  // let passive = found.match('#Noun (which|that) (was|is) #Adverb? #PastTense #Adverb?')
  // if (passive.found) {
  //   found = found.splitAfter(passive)
  // }
  // //which the boy robbed
  // passive = found.match('#Noun (which|that) the? #Noun+ #Adverb? #PastTense #Adverb?')
  // if (passive.found) {
  //   found = found.splitAfter(passive)
  // }
  // does there appear to have relative/subordinate clause still?
  // let tooLong = found.filter(d => d.wordCount() > 5 && d.match('#Verb+').length >= 2)
  // if (tooLong.found) {
  //   // and after the ..
  //   found = found.splitBefore('#Conjunction #Preposition')

  //   // let m = tooLong.splitAfter('#Noun .* #Verb .* #Noun+')
  //   // found = found.splitOn(m.eq(0))
  // }
  if (typeof n === 'number') {
    found = found.get(n);
  }
  return found;
};
var _default = exports.default = clauses;
},{}],"node_modules/compromise/src/3-three/chunker/api/chunks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// split terms into Nounphrase, verbphrase, etc groups
var chunks = function chunks(doc) {
  var all = [];
  var lastOne = null;
  // first, split by comma, etc
  var m = doc.clauses();
  // loop through each clause
  m.docs.forEach(function (terms) {
    terms.forEach(function (term) {
      // new chunk
      if (!term.chunk || term.chunk !== lastOne) {
        lastOne = term.chunk;
        all.push([term.index[0], term.index[1], term.index[1] + 1]);
      } else {
        // keep the chunk going
        all[all.length - 1][2] = term.index[1] + 1;
      }
    });
    lastOne = null;
  });
  var parts = doc.update(all);
  return parts;
};
var _default = exports.default = chunks;
},{}],"node_modules/compromise/src/3-three/chunker/api/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _clauses = _interopRequireDefault(require("./clauses.js"));
var _chunks = _interopRequireDefault(require("./chunks.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var api = function api(View) {
  var Chunks = /*#__PURE__*/function (_View) {
    function Chunks(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Chunks);
      _this = _callSuper(this, Chunks, [document, pointer, groups]);
      _this.viewType = 'Chunks';
      return _this;
    }
    _inherits(Chunks, _View);
    return _createClass(Chunks, [{
      key: "isVerb",
      value: function isVerb() {
        return this.filter(function (c) {
          return c.has('<Verb>');
        });
      }
    }, {
      key: "isNoun",
      value: function isNoun() {
        return this.filter(function (c) {
          return c.has('<Noun>');
        });
      }
    }, {
      key: "isAdjective",
      value: function isAdjective() {
        return this.filter(function (c) {
          return c.has('<Adjective>');
        });
      }
    }, {
      key: "isPivot",
      value: function isPivot() {
        return this.filter(function (c) {
          return c.has('<Pivot>');
        });
      }
      // chunk-friendly debug
    }, {
      key: "debug",
      value: function debug() {
        this.toView().debug('chunks');
        return this;
      }
      // overloaded - keep Sentences class
    }, {
      key: "update",
      value: function update(pointer) {
        var m = new Chunks(this.document, pointer);
        m._cache = this._cache; // share this full thing
        return m;
      }
    }]);
  }(View);
  View.prototype.chunks = function (n) {
    var m = (0, _chunks.default)(this);
    m = m.getNth(n);
    return new Chunks(this.document, m.pointer);
  };
  View.prototype.clauses = _clauses.default;
};
var _default = exports.default = api;
},{"./clauses.js":"node_modules/compromise/src/3-three/chunker/api/clauses.js","./chunks.js":"node_modules/compromise/src/3-three/chunker/api/chunks.js"}],"node_modules/compromise/src/3-three/chunker/compute/01-easy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var byWord = {
  this: 'Noun',
  then: 'Pivot'
};

// simply chunk Nouns as <Noun>
var easyMode = function easyMode(document) {
  for (var n = 0; n < document.length; n += 1) {
    for (var t = 0; t < document[n].length; t += 1) {
      var term = document[n][t];
      if (byWord.hasOwnProperty(term.normal) === true) {
        term.chunk = byWord[term.normal];
        continue;
      }
      if (term.tags.has('Verb')) {
        term.chunk = 'Verb';
        continue;
      }
      if (term.tags.has('Noun') || term.tags.has('Determiner')) {
        term.chunk = 'Noun';
        continue;
      }
      // 100 cats
      if (term.tags.has('Value')) {
        term.chunk = 'Noun';
        continue;
      }
      //
      if (term.tags.has('QuestionWord')) {
        term.chunk = 'Pivot';
        continue;
      }
    }
  }
};
var _default = exports.default = easyMode;
},{}],"node_modules/compromise/src/3-three/chunker/compute/02-neighbours.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// simply chunk Nouns as <Noun>
var byNeighbour = function byNeighbour(document) {
  for (var n = 0; n < document.length; n += 1) {
    for (var t = 0; t < document[n].length; t += 1) {
      var term = document[n][t];
      if (term.chunk) {
        continue;
      }
      // based on next-term
      var onRight = document[n][t + 1];
      // based on last-term
      var onLeft = document[n][t - 1];

      //'is cool' vs 'the cool dog'
      if (term.tags.has('Adjective')) {
        // 'is cool'
        if (onLeft && onLeft.tags.has('Copula')) {
          term.chunk = 'Adjective';
          continue;
        }
        // 'the cool'
        if (onLeft && onLeft.tags.has('Determiner')) {
          term.chunk = 'Noun';
          continue;
        }
        // 'cool dog'
        if (onRight && onRight.tags.has('Noun')) {
          term.chunk = 'Noun';
          continue;
        }
        continue;
      }
      // 'really swimming' vs 'really cool'
      if (term.tags.has('Adverb') || term.tags.has('Negative')) {
        if (onLeft && onLeft.tags.has('Adjective')) {
          term.chunk = 'Adjective';
          continue;
        }
        if (onLeft && onLeft.tags.has('Verb')) {
          term.chunk = 'Verb';
          continue;
        }
        if (onRight && onRight.tags.has('Adjective')) {
          term.chunk = 'Adjective';
          continue;
        }
        if (onRight && onRight.tags.has('Verb')) {
          term.chunk = 'Verb';
          continue;
        }
      }
    }
  }
};
var _default = exports.default = byNeighbour;
},{}],"node_modules/compromise/src/3-three/chunker/compute/03-matcher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var rules = [
// === Conjunction ===
// that the houses
{
  match: '[that] #Determiner #Noun',
  group: 0,
  chunk: 'Pivot'
},
// estimated that
{
  match: '#PastTense [that]',
  group: 0,
  chunk: 'Pivot'
},
// so the
{
  match: '[so] #Determiner',
  group: 0,
  chunk: 'Pivot'
},
// === Adjective ===
// was really nice
{
  match: '#Copula #Adverb+? [#Adjective]',
  group: 0,
  chunk: 'Adjective'
},
// was nice
// { match: '#Copula [#Adjective]', group: 0, chunk: 'Adjective' },
// nice and cool
{
  match: '#Adjective and #Adjective',
  chunk: 'Adjective'
},
// really nice
// { match: '#Adverb+ #Adjective', chunk: 'Adjective' },

// === Verb ===
// quickly and suddenly run
{
  match: '#Adverb+ and #Adverb #Verb',
  chunk: 'Verb'
},
// sitting near
{
  match: '#Gerund #Adjective$',
  chunk: 'Verb'
},
// going to walk
{
  match: '#Gerund to #Verb',
  chunk: 'Verb'
},
// come and have a drink
{
  match: '#PresentTense and #PresentTense',
  chunk: 'Verb'
},
// really not
{
  match: '#Adverb #Negative',
  chunk: 'Verb'
},
// want to see
{
  match: '(want|wants|wanted) to #Infinitive',
  chunk: 'Verb'
},
// walk ourselves
{
  match: '#Verb #Reflexive',
  chunk: 'Verb'
},
// tell him the story
// { match: '#PresentTense [#Pronoun] #Determiner', group: 0, chunk: 'Verb' },
// tries to walk
{
  match: '#Verb [to] #Adverb? #Infinitive',
  group: 0,
  chunk: 'Verb'
},
// upon seeing
{
  match: '[#Preposition] #Gerund',
  group: 0,
  chunk: 'Verb'
},
// ensure that
{
  match: '#Infinitive [that] <Noun>',
  group: 0,
  chunk: 'Verb'
},
// === Noun ===
// the brown fox
// { match: '#Determiner #Adjective+ #Noun', chunk: 'Noun' },
// the fox
// { match: '(the|this) <Noun>', chunk: 'Noun' },
// brown fox
// { match: '#Adjective+ <Noun>', chunk: 'Noun' },
// --- of ---
// son of a gun
{
  match: '#Noun of #Determiner? #Noun',
  chunk: 'Noun'
},
// 3 beautiful women
{
  match: '#Value+ #Adverb? #Adjective',
  chunk: 'Noun'
},
// the last russian tsar
{
  match: 'the [#Adjective] #Noun',
  chunk: 'Noun'
},
// breakfast in bed
{
  match: '#Singular in #Determiner? #Singular',
  chunk: 'Noun'
},
// Some citizens in this Canadian capital
{
  match: '#Plural [in] #Determiner? #Noun',
  group: 0,
  chunk: 'Pivot'
},
// indoor and outdoor seating
{
  match: '#Noun and #Determiner? #Noun',
  notIf: '(#Possessive|#Pronoun)',
  chunk: 'Noun'
}
//  boys and girls
// { match: '#Plural and #Determiner? #Plural', chunk: 'Noun' },
// tomatoes and cheese
// { match: '#Noun and #Determiner? #Noun', notIf: '#Pronoun', chunk: 'Noun' },
// that is why
// { match: '[that] (is|was)', group: 0, chunk: 'Noun' },
];
var net = null;
var matcher = function matcher(view, _, world) {
  var methods = world.methods;
  net = net || methods.one.buildNet(rules, world);
  view.sweep(net);
};
var _default = exports.default = matcher;
},{}],"node_modules/compromise/src/3-three/chunker/compute/04-fallback.js":[function(require,module,exports) {
var process = require("process");
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var setChunk = function setChunk(term, chunk) {
  var env = typeof process === 'undefined' || !process.env ? self.env || {} : process.env;
  if (env.DEBUG_CHUNKS) {
    var str = (term.normal + "'").padEnd(8);
    console.log("  | '".concat(str, "  \u2192  \x1B[34m").concat(chunk.padEnd(12), "\x1B[0m \x1B[2m -fallback- \x1B[0m")); // eslint-disable-line
  }
  term.chunk = chunk;
};

// ensure everything has a chunk
var fallback = function fallback(document) {
  for (var n = 0; n < document.length; n += 1) {
    for (var t = 0; t < document[n].length; t += 1) {
      var term = document[n][t];
      if (term.chunk === undefined) {
        // conjunctions stand alone
        if (term.tags.has('Conjunction')) {
          setChunk(term, 'Pivot');
        } else if (term.tags.has('Preposition')) {
          setChunk(term, 'Pivot');
        } else if (term.tags.has('Adverb')) {
          setChunk(term, 'Verb');
        }
        // just take the chunk on the right?
        // else if (document[n][t + 1] && document[n][t + 1].chunk) {
        //   setChunk(term, document[n][t + 1].chunk)
        // }
        // // or take the chunk on the left
        // else if (document[n][t - 1] && document[n][t - 1].chunk) {
        //   setChunk(term, document[n][t - 1].chunk)
        else {
          //  ¯\_(ツ)_/¯
          term.chunk = 'Noun';
        }
      }
    }
  }
};
var _default = exports.default = fallback;
},{"process":"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/node_modules/process/browser.js"}],"node_modules/compromise/src/3-three/chunker/compute/05-fixUp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var fixUp = function fixUp(docs) {
  var byChunk = [];
  var current = null;
  docs.forEach(function (terms) {
    // ensure an adjective chunk is preceded by a copula
    for (var i = 0; i < terms.length; i += 1) {
      var term = terms[i];
      if (current && term.chunk === current) {
        byChunk[byChunk.length - 1].terms.push(term);
      } else {
        byChunk.push({
          chunk: term.chunk,
          terms: [term]
        });
        current = term.chunk;
      }
    }
  });
  // ensure every verb-phrase actually has a verb
  byChunk.forEach(function (c) {
    if (c.chunk === 'Verb') {
      var hasVerb = c.terms.find(function (t) {
        return t.tags.has('Verb');
      });
      if (!hasVerb) {
        c.terms.forEach(function (t) {
          return t.chunk = null;
        });
      }
    }
  });
};
var _default = exports.default = fixUp;
},{}],"node_modules/compromise/src/3-three/chunker/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _easy = _interopRequireDefault(require("./01-easy.js"));
var _neighbours = _interopRequireDefault(require("./02-neighbours.js"));
var _matcher = _interopRequireDefault(require("./03-matcher.js"));
var _fallback = _interopRequireDefault(require("./04-fallback.js"));
var _fixUp = _interopRequireDefault(require("./05-fixUp.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/* Chunks:
    Noun
    Verb
    Adjective
    Pivot
*/

var findChunks = function findChunks(view) {
  var document = view.document,
    world = view.world;
  (0, _easy.default)(document);
  (0, _neighbours.default)(document);
  (0, _matcher.default)(view, document, world);
  // matcher(view, document, world) //run it 2nd time
  (0, _fallback.default)(document, world);
  (0, _fixUp.default)(document, world);
};
var _default = exports.default = {
  chunks: findChunks
};
},{"./01-easy.js":"node_modules/compromise/src/3-three/chunker/compute/01-easy.js","./02-neighbours.js":"node_modules/compromise/src/3-three/chunker/compute/02-neighbours.js","./03-matcher.js":"node_modules/compromise/src/3-three/chunker/compute/03-matcher.js","./04-fallback.js":"node_modules/compromise/src/3-three/chunker/compute/04-fallback.js","./05-fixUp.js":"node_modules/compromise/src/3-three/chunker/compute/05-fixUp.js"}],"node_modules/compromise/src/3-three/chunker/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _api = _interopRequireDefault(require("./api/api.js"));
var _index = _interopRequireDefault(require("./compute/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  compute: _index.default,
  api: _api.default,
  hooks: ['chunks']
};
},{"./api/api.js":"node_modules/compromise/src/3-three/chunker/api/api.js","./compute/index.js":"node_modules/compromise/src/3-three/chunker/compute/index.js"}],"node_modules/compromise/src/3-three/misc/acronyms/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
// return the nth elem of a doc
var hasPeriod = /\./g;
var api = function api(View) {
  var Acronyms = /*#__PURE__*/function (_View) {
    function Acronyms(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Acronyms);
      _this = _callSuper(this, Acronyms, [document, pointer, groups]);
      _this.viewType = 'Acronyms';
      return _this;
    }
    _inherits(Acronyms, _View);
    return _createClass(Acronyms, [{
      key: "strip",
      value: function strip() {
        this.docs.forEach(function (terms) {
          terms.forEach(function (term) {
            term.text = term.text.replace(hasPeriod, '');
            term.normal = term.normal.replace(hasPeriod, '');
          });
        });
        return this;
      }
    }, {
      key: "addPeriods",
      value: function addPeriods() {
        this.docs.forEach(function (terms) {
          terms.forEach(function (term) {
            term.text = term.text.replace(hasPeriod, '');
            term.normal = term.normal.replace(hasPeriod, '');
            term.text = term.text.split('').join('.') + '.';
            term.normal = term.normal.split('').join('.') + '.';
          });
        });
        return this;
      }
    }]);
  }(View);
  View.prototype.acronyms = function (n) {
    var m = this.match('#Acronym');
    m = m.getNth(n);
    return new Acronyms(m.document, m.pointer);
  };
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/3-three/misc/parentheses/fns.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.strip = exports.find = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var hasOpen = /\(/;
var hasClosed = /\)/;
var findEnd = function findEnd(terms, i) {
  for (; i < terms.length; i += 1) {
    if (terms[i].post && hasClosed.test(terms[i].post)) {
      var _terms$i$index = _slicedToArray(terms[i].index, 2),
        index = _terms$i$index[1];
      index = index || 0;
      return index;
    }
  }
  return null;
};
var find = exports.find = function find(doc) {
  var ptrs = [];
  doc.docs.forEach(function (terms) {
    var isOpen = false;
    for (var i = 0; i < terms.length; i += 1) {
      var term = terms[i];
      if (!isOpen && term.pre && hasOpen.test(term.pre)) {
        var end = findEnd(terms, i);
        if (end !== null) {
          var _terms$i$index2 = _slicedToArray(terms[i].index, 2),
            n = _terms$i$index2[0],
            start = _terms$i$index2[1];
          ptrs.push([n, start, end + 1, terms[i].id]);
          i = end;
        }
      }
    }
  });
  return doc.update(ptrs);
};
var strip = exports.strip = function strip(m) {
  m.docs.forEach(function (terms) {
    terms[0].pre = terms[0].pre.replace(hasOpen, '');
    var last = terms[terms.length - 1];
    last.post = last.post.replace(hasClosed, '');
  });
  return m;
};
},{}],"node_modules/compromise/src/3-three/misc/parentheses/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fns = require("./fns.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var api = function api(View) {
  var Parentheses = /*#__PURE__*/function (_View) {
    function Parentheses(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Parentheses);
      _this = _callSuper(this, Parentheses, [document, pointer, groups]);
      _this.viewType = 'Possessives';
      return _this;
    }
    _inherits(Parentheses, _View);
    return _createClass(Parentheses, [{
      key: "strip",
      value: function strip() {
        return (0, _fns.strip)(this);
      }
    }]);
  }(View);
  View.prototype.parentheses = function (n) {
    var m = (0, _fns.find)(this);
    m = m.getNth(n);
    return new Parentheses(m.document, m.pointer);
  };
};
var _default = exports.default = api;
},{"./fns.js":"node_modules/compromise/src/3-three/misc/parentheses/fns.js"}],"node_modules/compromise/src/3-three/misc/possessives/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
// return the nth elem of a doc
var apostropheS = /'s$/;
var find = function find(doc) {
  var m = doc.match('#Possessive+');
  // expand it to include 'john smith's'
  if (m.has('#Person')) {
    m = m.growLeft('#Person+');
  }
  if (m.has('#Place')) {
    m = m.growLeft('#Place+');
  }
  if (m.has('#Organization')) {
    m = m.growLeft('#Organization+');
  }
  return m;
};
var api = function api(View) {
  var Possessives = /*#__PURE__*/function (_View) {
    function Possessives(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Possessives);
      _this = _callSuper(this, Possessives, [document, pointer, groups]);
      _this.viewType = 'Possessives';
      return _this;
    }
    _inherits(Possessives, _View);
    return _createClass(Possessives, [{
      key: "strip",
      value: function strip() {
        this.docs.forEach(function (terms) {
          terms.forEach(function (term) {
            term.text = term.text.replace(apostropheS, '');
            term.normal = term.normal.replace(apostropheS, '');
          });
        });
        return this;
      }
    }]);
  }(View);
  View.prototype.possessives = function (n) {
    var m = find(this);
    m = m.getNth(n);
    return new Possessives(m.document, m.pointer);
  };
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/3-three/misc/quotations/fns.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.strip = exports.find = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
/* eslint-disable regexp/no-dupe-characters-character-class */

var pairs = {
  "\"": "\"",
  // 'StraightDoubleQuotes'
  "\uFF02": "\uFF02",
  // 'StraightDoubleQuotesWide'
  "'": "'",
  // 'StraightSingleQuotes'
  "\u201C": "\u201D",
  // 'CommaDoubleQuotes'
  "\u2018": "\u2019",
  // 'CommaSingleQuotes'
  "\u201F": "\u201D",
  // 'CurlyDoubleQuotesReversed'
  "\u201B": "\u2019",
  // 'CurlySingleQuotesReversed'
  "\u201E": "\u201D",
  // 'LowCurlyDoubleQuotes'
  "\u2E42": "\u201D",
  // 'LowCurlyDoubleQuotesReversed'
  "\u201A": "\u2019",
  // 'LowCurlySingleQuotes'
  "\xAB": "\xBB",
  // 'AngleDoubleQuotes' «, »
  "\u2039": "\u203A",
  // 'AngleSingleQuotes'
  // Prime 'non quotation'
  "\u2035": "\u2032",
  // 'PrimeSingleQuotes'
  "\u2036": "\u2033",
  // 'PrimeDoubleQuotes'
  "\u2037": "\u2034",
  // 'PrimeTripleQuotes'
  // Prime 'quotation' variation
  "\u301D": "\u301E",
  // 'PrimeDoubleQuotes'
  "`": "\xB4",
  // 'PrimeSingleQuotes'
  "\u301F": "\u301E" // 'LowPrimeDoubleQuotesReversed'
};
var hasOpen = RegExp('[' + Object.keys(pairs).join('') + ']');
var hasClosed = RegExp('[' + Object.values(pairs).join('') + ']');
var findEnd = function findEnd(terms, i) {
  var have = terms[i].pre.match(hasOpen)[0] || '';
  if (!have || !pairs[have]) {
    return null;
  }
  var want = pairs[have];
  for (; i < terms.length; i += 1) {
    if (terms[i].post && terms[i].post.match(want)) {
      return i;
    }
  }
  return null;
};
var find = exports.find = function find(doc) {
  var ptrs = [];
  doc.docs.forEach(function (terms) {
    var isOpen = false;
    for (var i = 0; i < terms.length; i += 1) {
      var term = terms[i];
      if (!isOpen && term.pre && hasOpen.test(term.pre)) {
        var end = findEnd(terms, i);
        if (end !== null) {
          var _terms$i$index = _slicedToArray(terms[i].index, 2),
            n = _terms$i$index[0],
            start = _terms$i$index[1];
          ptrs.push([n, start, end + 1, terms[i].id]);
          i = end;
        }
      }
    }
  });
  return doc.update(ptrs);
};
var strip = exports.strip = function strip(m) {
  m.docs.forEach(function (terms) {
    terms[0].pre = terms[0].pre.replace(hasOpen, '');
    var lastTerm = terms[terms.length - 1];
    lastTerm.post = lastTerm.post.replace(hasClosed, '');
  });
};
},{}],"node_modules/compromise/src/3-three/misc/quotations/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fns = require("./fns.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var api = function api(View) {
  var Quotations = /*#__PURE__*/function (_View) {
    function Quotations(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Quotations);
      _this = _callSuper(this, Quotations, [document, pointer, groups]);
      _this.viewType = 'Possessives';
      return _this;
    }
    _inherits(Quotations, _View);
    return _createClass(Quotations, [{
      key: "strip",
      value: function strip() {
        return (0, _fns.strip)(this);
      }
    }]);
  }(View);
  View.prototype.quotations = function (n) {
    var m = (0, _fns.find)(this);
    m = m.getNth(n);
    return new Quotations(m.document, m.pointer);
  };
};
var _default = exports.default = api;
},{"./fns.js":"node_modules/compromise/src/3-three/misc/quotations/fns.js"}],"node_modules/compromise/src/3-three/misc/selections/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/** return anything tagged as a phone number */
var phoneNumbers = function phoneNumbers(n) {
  var m = this.splitAfter('@hasComma');
  m = m.match('#PhoneNumber+');
  m = m.getNth(n);
  return m;
};

// setup easy helper methods
var selections = [['hyphenated', '@hasHyphen .'], ['hashTags', '#HashTag'], ['emails', '#Email'], ['emoji', '#Emoji'], ['emoticons', '#Emoticon'], ['atMentions', '#AtMention'], ['urls', '#Url'],
// ['pronouns', '#Pronoun'],
['conjunctions', '#Conjunction'], ['prepositions', '#Preposition'], ['abbreviations', '#Abbreviation'], ['honorifics', '#Honorific']];

// aliases
var aliases = [['emojis', 'emoji'], ['atmentions', 'atMentions']];
var addMethods = function addMethods(View) {
  // add a list of new helper methods
  selections.forEach(function (a) {
    View.prototype[a[0]] = function (n) {
      var m = this.match(a[1]);
      return typeof n === 'number' ? m.get(n) : m;
    };
  });
  View.prototype.phoneNumbers = phoneNumbers;
  // add aliases
  aliases.forEach(function (a) {
    View.prototype[a[0]] = View.prototype[a[1]];
  });
};
var _default = exports.default = addMethods;
},{}],"node_modules/compromise/src/3-three/misc/slashes/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var hasSlash = /\//;
var api = function api(View) {
  var Slashes = /*#__PURE__*/function (_View) {
    function Slashes(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Slashes);
      _this = _callSuper(this, Slashes, [document, pointer, groups]);
      _this.viewType = 'Slashes';
      return _this;
    }
    _inherits(Slashes, _View);
    return _createClass(Slashes, [{
      key: "split",
      value: function split() {
        return this.map(function (m) {
          var str = m.text();
          var arr = str.split(hasSlash);
          m = m.replaceWith(arr.join(' '));
          return m.growRight('(' + arr.join('|') + ')+');
        });
      }
    }]);
  }(View);
  View.prototype.slashes = function (n) {
    var m = this.match('#SlashedTerm');
    m = m.getNth(n);
    return new Slashes(m.document, m.pointer);
  };
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/3-three/misc/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./acronyms/index.js"));
var _index2 = _interopRequireDefault(require("./parentheses/index.js"));
var _index3 = _interopRequireDefault(require("./possessives/index.js"));
var _index4 = _interopRequireDefault(require("./quotations/index.js"));
var _index5 = _interopRequireDefault(require("./selections/index.js"));
var _index6 = _interopRequireDefault(require("./slashes/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: function api(View) {
    (0, _index.default)(View);
    (0, _index2.default)(View);
    (0, _index3.default)(View);
    (0, _index4.default)(View);
    (0, _index5.default)(View);
    (0, _index6.default)(View);
  }
};
},{"./acronyms/index.js":"node_modules/compromise/src/3-three/misc/acronyms/index.js","./parentheses/index.js":"node_modules/compromise/src/3-three/misc/parentheses/index.js","./possessives/index.js":"node_modules/compromise/src/3-three/misc/possessives/index.js","./quotations/index.js":"node_modules/compromise/src/3-three/misc/quotations/index.js","./selections/index.js":"node_modules/compromise/src/3-three/misc/selections/index.js","./slashes/index.js":"node_modules/compromise/src/3-three/misc/slashes/index.js"}],"node_modules/compromise/src/3-three/normalize/methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var termLoop = function termLoop(view, cb) {
  view.docs.forEach(function (terms) {
    terms.forEach(cb);
  });
};
var _default = exports.default = {
  // remove titlecasing, uppercase
  'case': function _case(doc) {
    termLoop(doc, function (term) {
      term.text = term.text.toLowerCase();
    });
  },
  // visually romanize/anglicize 'Björk' into 'Bjork'.
  'unicode': function unicode(doc) {
    var world = doc.world;
    var killUnicode = world.methods.one.killUnicode;
    termLoop(doc, function (term) {
      return term.text = killUnicode(term.text, world);
    });
  },
  // remove hyphens, newlines, and force one space between words
  'whitespace': function whitespace(doc) {
    termLoop(doc, function (term) {
      // one space between words
      term.post = term.post.replace(/\s+/g, ' ');
      term.post = term.post.replace(/\s([.,?!:;])/g, '$1'); //no whitespace before a period, etc
      // no whitepace before a word
      term.pre = term.pre.replace(/\s+/g, '');
    });
  },
  // remove commas, semicolons - but keep sentence-ending punctuation
  'punctuation': function punctuation(doc) {
    termLoop(doc, function (term) {
      // turn dashes to spaces
      term.post = term.post.replace(/[–—-]/g, ' ');
      // remove comma, etc 
      term.post = term.post.replace(/[,:;]/g, '');
      // remove elipses
      term.post = term.post.replace(/\.{2,}/g, '');
      // remove repeats
      term.post = term.post.replace(/\?{2,}/g, '?');
      term.post = term.post.replace(/!{2,}/g, '!');
      // replace ?!
      term.post = term.post.replace(/\?!+/g, '?');
    });
    // trim end
    var docs = doc.docs;
    var terms = docs[docs.length - 1];
    if (terms && terms.length > 0) {
      var lastTerm = terms[terms.length - 1];
      lastTerm.post = lastTerm.post.replace(/ /g, '');
    }
  },
  // ====== subsets ===

  // turn "isn't" to "is not"
  'contractions': function contractions(doc) {
    doc.contractions().expand();
  },
  //remove periods from acronyms, like 'F.B.I.'
  'acronyms': function acronyms(doc) {
    doc.acronyms().strip();
  },
  //remove words inside brackets (like these)
  'parentheses': function parentheses(doc) {
    doc.parentheses().strip();
  },
  // turn "Google's tax return" to "Google tax return"
  'possessives': function possessives(doc) {
    doc.possessives().strip();
  },
  // turn "tax return" to tax return
  'quotations': function quotations(doc) {
    doc.quotations().strip();
  },
  // remove them
  'emoji': function emoji(doc) {
    doc.emojis().remove();
  },
  //turn 'Vice Admiral John Smith' to 'John Smith'
  'honorifics': function honorifics(doc) {
    doc.match('#Honorific+ #Person').honorifics().remove();
  },
  // remove needless adverbs
  'adverbs': function adverbs(doc) {
    doc.adverbs().remove();
  },
  // turn "batmobiles" into "batmobile"
  'nouns': function nouns(doc) {
    doc.nouns().toSingular();
  },
  // turn all verbs into Infinitive form - "I walked" → "I walk"
  'verbs': function verbs(doc) {
    doc.verbs().toInfinitive();
  },
  // turn "fifty" into "50"
  'numbers': function numbers(doc) {
    doc.numbers().toNumber();
  },
  /** remove bullets from beginning of phrase */
  'debullet': function debullet(doc) {
    var hasBullet = /^\s*([-–—*•])\s*$/;
    doc.docs.forEach(function (terms) {
      //remove bullet symbols
      if (hasBullet.test(terms[0].pre)) {
        terms[0].pre = terms[0].pre.replace(hasBullet, '');
      }
    });
    return doc;
  }
};
},{}],"node_modules/compromise/src/3-three/normalize/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _methods = _interopRequireDefault(require("./methods.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// turn presets into key-vals
var split = function split(str) {
  return str.split('|').reduce(function (h, k) {
    h[k] = true;
    return h;
  }, {});
};
var light = 'unicode|punctuation|whitespace|acronyms';
var medium = '|case|contractions|parentheses|quotations|emoji|honorifics|debullet';
var heavy = '|possessives|adverbs|nouns|verbs';
var presets = {
  light: split(light),
  medium: split(light + medium),
  heavy: split(light + medium + heavy)
};
function _default(View) {
  View.prototype.normalize = function () {
    var _this = this;
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';
    if (typeof opts === 'string') {
      opts = presets[opts];
    }
    // run each method
    Object.keys(opts).forEach(function (fn) {
      if (_methods.default.hasOwnProperty(fn)) {
        _methods.default[fn](_this, opts[fn]);
      }
    });
    return this;
  };
}
},{"./methods.js":"node_modules/compromise/src/3-three/normalize/methods.js"}],"node_modules/compromise/src/3-three/normalize/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _api = _interopRequireDefault(require("./api.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _api.default
};
},{"./api.js":"node_modules/compromise/src/3-three/normalize/api.js"}],"node_modules/compromise/src/3-three/nouns/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var findNouns = function findNouns(doc) {
  var m = doc.clauses().match('<Noun>');
  var commas = m.match('@hasComma');
  // allow toronto, ontario
  commas = commas.not('#Place');
  if (commas.found) {
    m = m.splitAfter(commas);
  }
  // yo there
  m = m.splitOn('#Expression');
  // these are individual nouns
  m = m.splitOn('(he|she|we|you|they|i)');
  // a client i saw
  m = m.splitOn('(#Noun|#Adjective) [(he|him|she|it)]', 0);
  // give him the best
  m = m.splitOn('[(he|him|she|it)] (#Determiner|#Value)', 0);
  // the noise the slide makes
  m = m.splitBefore('#Noun [(the|a|an)] #Adjective? #Noun', 0);
  // here spencer slept
  m = m.splitOn('[(here|there)] #Noun', 0);
  // put it there
  m = m.splitOn('[#Noun] (here|there)', 0);
  // its great purposes
  // give [parents] [our money]
  m = m.splitBefore('(our|my|their|your)');
  // tell my friend that he
  m = m.splitOn('#Noun [#Determiner]', 0);
  // his excuses
  // m = m.splitAfter('(his|hers|yours|ours|theirs)')
  // m = m.not('^#Determiner')
  //ensure there's actually a noun
  m = m.if('#Noun');
  return m;
};
var _default = exports.default = findNouns;
},{}],"node_modules/compromise/src/3-three/nouns/api/isSubordinate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// https://www.trentu.ca/history/subordinate-clause-and-complex-sentence
var list = ['after', 'although', 'as if', 'as long as', 'as', 'because', 'before', 'even if', 'even though', 'ever since', 'if', 'in order that', 'provided that', 'since', 'so that', 'than', 'that', 'though', 'unless', 'until', 'what', 'whatever', 'when', 'whenever', 'where', 'whereas', 'wherever', 'whether', 'which', 'whichever', 'who', 'whoever', 'whom', 'whomever', 'whose'];
var isSubordinate = function isSubordinate(m) {
  // athletes from toronto, days since december
  if (m.before('#Preposition$').found) {
    return true;
  }
  var leadIn = m.before();
  if (!leadIn.found) {
    return false;
  }
  for (var i = 0; i < list.length; i += 1) {
    if (m.has(list[i])) {
      return true;
    }
  }
  return false;
};
var _default = exports.default = isSubordinate;
},{}],"node_modules/compromise/src/3-three/nouns/api/isPlural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var notPlural = '(#Pronoun|#Place|#Value|#Person|#Uncountable|#Month|#WeekDay|#Holiday|#Possessive)';
var isPlural = function isPlural(m, root) {
  // const { looksPlural } = m.world.methods.two
  if (m.has('#Plural')) {
    return true;
  }
  // two singular nouns are plural noun phrase
  if (m.has('#Noun and #Noun')) {
    return true;
  }
  if (m.has('(we|they)')) {
    return true;
  }
  // these can't be plural
  if (root.has(notPlural) === true) {
    return false;
  }
  if (m.has('#Singular')) {
    return false;
  }
  // word-reg fallback
  var str = root.text('normal');
  // ends with a brutal s fallback
  return str.length > 3 && str.endsWith('s') && !str.endsWith('ss');
};
var _default = exports.default = isPlural;
},{}],"node_modules/compromise/src/3-three/nouns/api/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _isSubordinate = _interopRequireDefault(require("./isSubordinate.js"));
var _isPlural = _interopRequireDefault(require("./isPlural.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var getRoot = function getRoot(m) {
  var tmp = m.clone();
  tmp = tmp.match('#Noun+');
  tmp = tmp.remove('(#Adjective|#Preposition|#Determiner|#Value)');
  tmp = tmp.not('#Possessive');
  tmp = tmp.first();
  if (!tmp.found) {
    return m;
  }
  return tmp;
};
var parseNoun = function parseNoun(m) {
  var root = getRoot(m);
  return {
    determiner: m.match('#Determiner').eq(0),
    adjectives: m.match('#Adjective'),
    number: m.values(),
    isPlural: (0, _isPlural.default)(m, root),
    isSubordinate: (0, _isSubordinate.default)(m),
    root: root
  };
};
var _default = exports.default = parseNoun;
},{"./isSubordinate.js":"node_modules/compromise/src/3-three/nouns/api/isSubordinate.js","./isPlural.js":"node_modules/compromise/src/3-three/nouns/api/isPlural.js"}],"node_modules/compromise/src/3-three/nouns/api/toJSON.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _parse = _interopRequireDefault(require("./parse.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var toText = function toText(m) {
  return m.text();
};
var toArray = function toArray(m) {
  return m.json({
    terms: false,
    normal: true
  }).map(function (s) {
    return s.normal;
  });
};
var getNum = function getNum(m) {
  var num = null;
  if (!m.found) {
    return num;
  }
  var val = m.values(0);
  if (val.found) {
    var obj = val.parse()[0] || {};
    return obj.num;
  }
  return num;
};
var toJSON = function toJSON(m) {
  var res = (0, _parse.default)(m);
  return {
    root: toText(res.root),
    number: getNum(res.number),
    determiner: toText(res.determiner),
    adjectives: toArray(res.adjectives),
    isPlural: res.isPlural,
    isSubordinate: res.isSubordinate
  };
};
var _default = exports.default = toJSON;
},{"./parse.js":"node_modules/compromise/src/3-three/nouns/api/parse.js"}],"node_modules/compromise/src/3-three/nouns/api/hasPlural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var hasPlural = function hasPlural(root) {
  if (root.has('^(#Uncountable|#ProperNoun|#Place|#Pronoun|#Acronym)+$')) {
    return false;
  }
  return true;
};
var _default = exports.default = hasPlural;
},{}],"node_modules/compromise/src/3-three/nouns/api/toPlural.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _hasPlural = _interopRequireDefault(require("./hasPlural.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var keep = {
  tags: true
};
var nounToPlural = function nounToPlural(m, parsed) {
  // already plural?
  if (parsed.isPlural === true) {
    return m;
  }
  // handle "steve's"
  if (parsed.root.has('#Possessive')) {
    parsed.root = parsed.root.possessives().strip();
  }
  // is a plural appropriate?
  if (!(0, _hasPlural.default)(parsed.root)) {
    return m;
  }
  var _m$world = m.world,
    methods = _m$world.methods,
    model = _m$world.model;
  var toPlural = methods.two.transform.noun.toPlural;
  // inflect the root noun
  var str = parsed.root.text({
    keepPunct: false
  });
  var plural = toPlural(str, model);
  m.match(parsed.root).replaceWith(plural, keep).tag('Plural', 'toPlural');
  // should we change the determiner/article?
  if (parsed.determiner.has('(a|an)')) {
    // 'a captain' -> 'the captains'
    // m.replace(parsed.determiner, 'the', keep)
    m.remove(parsed.determiner);
  }
  // should we change the following copula?
  var copula = parsed.root.after('not? #Adverb+? [#Copula]', 0);
  if (copula.found) {
    if (copula.has('is')) {
      m.replace(copula, 'are');
    } else if (copula.has('was')) {
      m.replace(copula, 'were');
    }
  }
  return m;
};
var _default = exports.default = nounToPlural;
},{"./hasPlural.js":"node_modules/compromise/src/3-three/nouns/api/hasPlural.js"}],"node_modules/compromise/src/3-three/nouns/api/toSingular.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var keep = {
  tags: true
};
var nounToSingular = function nounToSingular(m, parsed) {
  // already singular?
  if (parsed.isPlural === false) {
    return m;
  }
  var _m$world = m.world,
    methods = _m$world.methods,
    model = _m$world.model;
  var toSingular = methods.two.transform.noun.toSingular;
  // inflect the root noun
  var str = parsed.root.text('normal');
  var single = toSingular(str, model);
  m.replace(parsed.root, single, keep).tag('Singular', 'toPlural');
  // should we change the determiner/article?
  // m.debug()
  return m;
};
var _default = exports.default = nounToSingular;
},{}],"node_modules/compromise/src/3-three/nouns/api/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _find = _interopRequireDefault(require("../find.js"));
var _parse = _interopRequireDefault(require("./parse.js"));
var _toJSON = _interopRequireDefault(require("./toJSON.js"));
var _toPlural2 = _interopRequireDefault(require("./toPlural.js"));
var _hasPlural = _interopRequireDefault(require("./hasPlural.js"));
var _toSingular2 = _interopRequireDefault(require("./toSingular.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var api = function api(View) {
  var Nouns = /*#__PURE__*/function (_View) {
    function Nouns(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Nouns);
      _this = _callSuper(this, Nouns, [document, pointer, groups]);
      _this.viewType = 'Nouns';
      return _this;
    }
    _inherits(Nouns, _View);
    return _createClass(Nouns, [{
      key: "parse",
      value: function parse(n) {
        return this.getNth(n).map(_parse.default);
      }
    }, {
      key: "json",
      value: function json(n) {
        var opts = _typeof(n) === 'object' ? n : {};
        return this.getNth(n).map(function (m) {
          var json = m.toView().json(opts)[0] || {};
          if (opts && opts.noun !== false) {
            json.noun = (0, _toJSON.default)(m);
          }
          return json;
        }, []);
      }
    }, {
      key: "conjugate",
      value: function conjugate(n) {
        var _this2 = this;
        var methods = this.world.methods.two.transform.noun;
        return this.getNth(n).map(function (m) {
          var parsed = (0, _parse.default)(m);
          var root = parsed.root.compute('root').text('root');
          var res = {
            Singular: root
          };
          if ((0, _hasPlural.default)(parsed.root)) {
            res.Plural = methods.toPlural(root, _this2.model);
          }
          // only show plural if one exists
          if (res.Singular === res.Plural) {
            delete res.Plural;
          }
          return res;
        }, []);
      }
    }, {
      key: "isPlural",
      value: function isPlural(n) {
        var res = this.filter(function (m) {
          return (0, _parse.default)(m).isPlural;
        });
        return res.getNth(n);
      }
    }, {
      key: "isSingular",
      value: function isSingular(n) {
        var res = this.filter(function (m) {
          return !(0, _parse.default)(m).isPlural;
        });
        return res.getNth(n);
      }
    }, {
      key: "adjectives",
      value: function adjectives(n) {
        var res = this.update([]);
        this.forEach(function (m) {
          var adj = (0, _parse.default)(m).adjectives;
          if (adj.found) {
            res = res.concat(adj);
          }
        });
        return res.getNth(n);
      }
    }, {
      key: "toPlural",
      value: function toPlural(n) {
        return this.getNth(n).map(function (m) {
          return (0, _toPlural2.default)(m, (0, _parse.default)(m));
        });
        // return new Nouns(all.document, all.pointer)
      }
    }, {
      key: "toSingular",
      value: function toSingular(n) {
        return this.getNth(n).map(function (m) {
          var res = (0, _parse.default)(m);
          return (0, _toSingular2.default)(m, res);
        });
      }
      // create a new View, from this one
    }, {
      key: "update",
      value: function update(pointer) {
        var m = new Nouns(this.document, pointer);
        m._cache = this._cache; // share this full thing
        return m;
      }
    }]);
  }(View);
  View.prototype.nouns = function (n) {
    var m = (0, _find.default)(this);
    m = m.getNth(n);
    return new Nouns(this.document, m.pointer);
  };
};
var _default = exports.default = api;
},{"../find.js":"node_modules/compromise/src/3-three/nouns/find.js","./parse.js":"node_modules/compromise/src/3-three/nouns/api/parse.js","./toJSON.js":"node_modules/compromise/src/3-three/nouns/api/toJSON.js","./toPlural.js":"node_modules/compromise/src/3-three/nouns/api/toPlural.js","./hasPlural.js":"node_modules/compromise/src/3-three/nouns/api/hasPlural.js","./toSingular.js":"node_modules/compromise/src/3-three/nouns/api/toSingular.js"}],"node_modules/compromise/src/3-three/nouns/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _api = _interopRequireDefault(require("./api/api.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _api.default
};
},{"./api/api.js":"node_modules/compromise/src/3-three/nouns/api/api.js"}],"node_modules/compromise/src/3-three/numbers/fractions/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var findFractions = function findFractions(doc, n) {
  // five eighths
  var m = doc.match('#Fraction+');
  // remove 'two and five eights'
  m = m.filter(function (r) {
    return !r.lookBehind('#Value and$').found;
  });
  // thirty seconds
  m = m.notIf('#Value seconds');
  if (typeof n === 'number') {
    m = m.eq(n);
  }
  return m;
};
var _default = exports.default = findFractions;
},{}],"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/findModifiers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5
var findModifiers = function findModifiers(str) {
  var mults = [{
    reg: /^(minus|negative)[\s-]/i,
    mult: -1
  }, {
    reg: /^(a\s)?half[\s-](of\s)?/i,
    mult: 0.5
  }
  //  {
  //   reg: /^(a\s)?quarter[\s\-]/i,
  //   mult: 0.25
  // }
  ];
  for (var i = 0; i < mults.length; i++) {
    if (mults[i].reg.test(str) === true) {
      return {
        amount: mults[i].mult,
        str: str.replace(mults[i].reg, '')
      };
    }
  }
  return {
    amount: 1,
    str: str
  };
};
var _default = exports.default = findModifiers;
},{}],"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = exports.default = {
  ones: {
    zeroth: 0,
    first: 1,
    second: 2,
    third: 3,
    fourth: 4,
    fifth: 5,
    sixth: 6,
    seventh: 7,
    eighth: 8,
    ninth: 9,
    zero: 0,
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6,
    seven: 7,
    eight: 8,
    nine: 9
  },
  teens: {
    tenth: 10,
    eleventh: 11,
    twelfth: 12,
    thirteenth: 13,
    fourteenth: 14,
    fifteenth: 15,
    sixteenth: 16,
    seventeenth: 17,
    eighteenth: 18,
    nineteenth: 19,
    ten: 10,
    eleven: 11,
    twelve: 12,
    thirteen: 13,
    fourteen: 14,
    fifteen: 15,
    sixteen: 16,
    seventeen: 17,
    eighteen: 18,
    nineteen: 19
  },
  tens: {
    twentieth: 20,
    thirtieth: 30,
    fortieth: 40,
    fourtieth: 40,
    fiftieth: 50,
    sixtieth: 60,
    seventieth: 70,
    eightieth: 80,
    ninetieth: 90,
    twenty: 20,
    thirty: 30,
    forty: 40,
    fourty: 40,
    fifty: 50,
    sixty: 60,
    seventy: 70,
    eighty: 80,
    ninety: 90
  },
  multiples: {
    hundredth: 100,
    thousandth: 1000,
    millionth: 1e6,
    billionth: 1e9,
    trillionth: 1e12,
    quadrillionth: 1e15,
    quintillionth: 1e18,
    sextillionth: 1e21,
    septillionth: 1e24,
    hundred: 100,
    thousand: 1000,
    million: 1e6,
    billion: 1e9,
    trillion: 1e12,
    quadrillion: 1e15,
    quintillion: 1e18,
    sextillion: 1e21,
    septillion: 1e24,
    grand: 1000
  }
};
},{}],"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/validate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _data = _interopRequireDefault(require("./data.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
//prevent things like 'fifteen ten', and 'five sixty'
var isValid = function isValid(w, has) {
  if (_data.default.ones.hasOwnProperty(w)) {
    if (has.ones || has.teens) {
      return false;
    }
  } else if (_data.default.teens.hasOwnProperty(w)) {
    if (has.ones || has.teens || has.tens) {
      return false;
    }
  } else if (_data.default.tens.hasOwnProperty(w)) {
    if (has.ones || has.teens || has.tens) {
      return false;
    }
  }
  return true;
};
var _default = exports.default = isValid;
},{"./data.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/data.js"}],"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/parseDecimals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _data = _interopRequireDefault(require("./data.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
//concatenate into a string with leading '0.'
var parseDecimals = function parseDecimals(arr) {
  var str = '0.';
  for (var i = 0; i < arr.length; i++) {
    var w = arr[i];
    if (_data.default.ones.hasOwnProperty(w) === true) {
      str += _data.default.ones[w];
    } else if (_data.default.teens.hasOwnProperty(w) === true) {
      str += _data.default.teens[w];
    } else if (_data.default.tens.hasOwnProperty(w) === true) {
      str += _data.default.tens[w];
    } else if (/^[0-9]$/.test(w) === true) {
      str += w;
    } else {
      return 0;
    }
  }
  return parseFloat(str);
};
var _default = exports.default = parseDecimals;
},{"./data.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/data.js"}],"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/parseNumeric.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//parse a string like "4,200.1" into Number 4200.1
var parseNumeric = function parseNumeric(str) {
  //remove ordinal - 'th/rd'
  str = str.replace(/1st$/, '1');
  str = str.replace(/2nd$/, '2');
  str = str.replace(/3rd$/, '3');
  str = str.replace(/([4567890])r?th$/, '$1');
  //remove prefixes
  str = str.replace(/^[$€¥£¢]/, '');
  //remove suffixes
  str = str.replace(/[%$€¥£¢]$/, '');
  //remove commas
  str = str.replace(/,/g, '');
  //split '5kg' from '5'
  str = str.replace(/([0-9])([a-z\u00C0-\u00FF]{1,2})$/, '$1');
  return str;
};
var _default = exports.default = parseNumeric;
},{}],"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _findModifiers = _interopRequireDefault(require("./findModifiers.js"));
var _data = _interopRequireDefault(require("./data.js"));
var _validate = _interopRequireDefault(require("./validate.js"));
var _parseDecimals = _interopRequireDefault(require("./parseDecimals.js"));
var _parseNumeric = _interopRequireDefault(require("./parseNumeric.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var improperFraction = /^([0-9,. ]+)\/([0-9,. ]+)$/;

//some numbers we know
var casualForms = {
  'a few': 3,
  'a couple': 2,
  'a dozen': 12,
  'two dozen': 24,
  zero: 0
};

// a 'section' is something like 'fifty-nine thousand'
// turn a section into something we can add to - like 59000
var section_sum = function section_sum(obj) {
  return Object.keys(obj).reduce(function (sum, k) {
    sum += obj[k];
    return sum;
  }, 0);
};

//turn a string into a number
var parse = function parse(str) {
  //convert some known-numbers
  if (casualForms.hasOwnProperty(str) === true) {
    return casualForms[str];
  }
  //'a/an' is 1
  if (str === 'a' || str === 'an') {
    return 1;
  }
  var modifier = (0, _findModifiers.default)(str);
  str = modifier.str;
  var last_mult = null;
  var has = {};
  var sum = 0;
  var isNegative = false;
  var terms = str.split(/[ -]/);
  // const isFraction = findFraction(terms)
  for (var i = 0; i < terms.length; i++) {
    var w = terms[i];
    w = (0, _parseNumeric.default)(w);
    if (!w || w === 'and') {
      continue;
    }
    if (w === '-' || w === 'negative') {
      isNegative = true;
      continue;
    }
    if (w.charAt(0) === '-') {
      isNegative = true;
      w = w.substring(1);
    }

    //decimal mode
    if (w === 'point') {
      sum += section_sum(has);
      sum += (0, _parseDecimals.default)(terms.slice(i + 1, terms.length));
      sum *= modifier.amount;
      return sum;
    }

    //improper fraction
    var fm = w.match(improperFraction);
    if (fm) {
      var num = parseFloat(fm[1].replace(/[, ]/g, ''));
      var denom = parseFloat(fm[2].replace(/[, ]/g, ''));
      if (denom) {
        sum += num / denom || 0;
      }
      continue;
    }
    // try to support 'two fifty'
    if (_data.default.tens.hasOwnProperty(w)) {
      if (has.ones && Object.keys(has).length === 1) {
        sum = has.ones * 100;
        has = {};
      }
    }

    //prevent mismatched units, like 'seven eleven' if not a fraction
    if ((0, _validate.default)(w, has) === false) {
      return null;
    }

    //buildOut section, collect 'has' values
    if (/^[0-9.]+$/.test(w)) {
      has.ones = parseFloat(w); //not technically right
    } else if (_data.default.ones.hasOwnProperty(w) === true) {
      has.ones = _data.default.ones[w];
    } else if (_data.default.teens.hasOwnProperty(w) === true) {
      has.teens = _data.default.teens[w];
    } else if (_data.default.tens.hasOwnProperty(w) === true) {
      has.tens = _data.default.tens[w];
    } else if (_data.default.multiples.hasOwnProperty(w) === true) {
      var mult = _data.default.multiples[w];

      //something has gone wrong : 'two hundred five hundred'
      //possibly because it's a fraction
      if (mult === last_mult) {
        return null;
      }
      //support 'hundred thousand'
      //this one is tricky..
      if (mult === 100 && terms[i + 1] !== undefined) {
        var w2 = terms[i + 1];
        if (_data.default.multiples[w2]) {
          mult *= _data.default.multiples[w2]; //hundredThousand/hundredMillion
          i += 1;
        }
      }
      //natural order of things
      //five thousand, one hundred..
      if (last_mult === null || mult < last_mult) {
        sum += (section_sum(has) || 1) * mult;
        last_mult = mult;
        has = {};
      } else {
        //maybe hundred .. thousand
        sum += section_sum(has);
        last_mult = mult;
        sum = (sum || 1) * mult;
        has = {};
      }
    }
  }
  //dump the remaining has values
  sum += section_sum(has);
  //post-process add modifier
  sum *= modifier.amount;
  sum *= isNegative ? -1 : 1;
  //dont return 0, if it went straight-through
  if (sum === 0 && Object.keys(has).length === 0) {
    return null;
  }
  return sum;
};
var _default = exports.default = parse;
},{"./findModifiers.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/findModifiers.js","./data.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/data.js","./validate.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/validate.js","./parseDecimals.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/parseDecimals.js","./parseNumeric.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/parseNumeric.js"}],"node_modules/compromise/src/3-three/numbers/fractions/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../numbers/parse/toNumber/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var endS = /s$/;
// just using .toNumber() again may risk an infinite-loop
var parseNumber = function parseNumber(m) {
  var str = m.text('reduced');
  return (0, _index.default)(str);
};
var mapping = {
  half: 2,
  halve: 2,
  quarter: 4
};
var slashForm = function slashForm(m) {
  var str = m.text('reduced');
  var found = str.match(/^([-+]?[0-9]+)\/([-+]?[0-9]+)(st|nd|rd|th)?s?$/);
  if (found && found[1] && found[0]) {
    return {
      numerator: Number(found[1]),
      denominator: Number(found[2])
    };
  }
  return null;
};

// parse '4 out of 4'
var nOutOfN = function nOutOfN(m) {
  var found = m.match('[<num>#Value+] out of every? [<den>#Value+]');
  if (found.found !== true) {
    return null;
  }
  var _found$groups = found.groups(),
    num = _found$groups.num,
    den = _found$groups.den;
  if (!num || !den) {
    return null;
  }
  num = parseNumber(num);
  den = parseNumber(den);
  if (!num || !den) {
    return null;
  }
  if (typeof num === 'number' && typeof den === 'number') {
    return {
      numerator: num,
      denominator: den
    };
  }
  return null;
};

// parse 'five thirds'
var nOrinalth = function nOrinalth(m) {
  var found = m.match('[<num>(#Cardinal|a)+] [<den>#Fraction+]');
  if (found.found !== true) {
    return null;
  }
  var _found$groups2 = found.groups(),
    num = _found$groups2.num,
    den = _found$groups2.den;
  // -- parse numerator---
  // quick-support for 'a third'
  if (num.has('a')) {
    num = 1;
  } else {
    // abuse the number-parser for 'thirty three'
    // let tmp = num.clone().unTag('Fraction')
    // num = tmp.numbers().get()[0]
    num = parseNumber(num);
  }
  // -- parse denominator --
  // turn 'thirds' into third
  var str = den.text('reduced');
  if (endS.test(str)) {
    str = str.replace(endS, '');
    den = den.replaceWith(str);
  }
  // support 'one half' as '1/2'
  if (mapping.hasOwnProperty(str)) {
    den = mapping[str];
  } else {
    // dem = dem.numbers().get()[0]
    den = parseNumber(den);
  }
  if (typeof num === 'number' && typeof den === 'number') {
    return {
      numerator: num,
      denominator: den
    };
  }
  return null;
};

// implied 1 in '100th of a', 'fifth of a'
var oneNth = function oneNth(m) {
  var found = m.match('^#Ordinal$');
  if (found.found !== true) {
    return null;
  }
  // ensure it's '100th of a '
  if (m.lookAhead('^of .')) {
    // let num = found.numbers().get()[0]
    var num = parseNumber(found);
    return {
      numerator: 1,
      denominator: num
    };
  }
  return null;
};

// 'half'
var named = function named(m) {
  var str = m.text('reduced');
  if (mapping.hasOwnProperty(str)) {
    return {
      numerator: 1,
      denominator: mapping[str]
    };
  }
  return null;
};
var round = function round(n) {
  var rounded = Math.round(n * 1000) / 1000;
  // don't round 1 millionth down into 0
  if (rounded === 0 && n !== 0) {
    return n;
  }
  return rounded;
};
var parseFraction = function parseFraction(m) {
  m = m.clone();
  var res = named(m) || slashForm(m) || nOutOfN(m) || nOrinalth(m) || oneNth(m) || null;
  if (res !== null) {
    // do the math
    if (res.numerator && res.denominator) {
      res.decimal = res.numerator / res.denominator;
      res.decimal = round(res.decimal);
    }
  }
  return res;
};
var _default = exports.default = parseFraction;
},{"../numbers/parse/toNumber/index.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/index.js"}],"node_modules/compromise/src/3-three/numbers/numbers/_toString.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * turn big numbers, like 2.3e+22, into a string with a ton of trailing 0's
 * */
var numToString = function numToString(n) {
  if (n < 1000000) {
    return String(n);
  }
  var str;
  if (typeof n === 'number') {
    str = n.toFixed(0);
  } else {
    str = n;
  }
  if (str.indexOf('e+') === -1) {
    return str;
  }
  return str.replace('.', '').split('e+').reduce(function (p, b) {
    return p + Array(b - p.length + 2).join(0);
  });
};
var _default = exports.default = numToString; // console.log(numToString(2.5e+22));
},{}],"node_modules/compromise/src/3-three/numbers/numbers/format/toText/data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tens_mapping = exports.sequence = exports.ones_mapping = void 0;
var tens_mapping = exports.tens_mapping = [['ninety', 90], ['eighty', 80], ['seventy', 70], ['sixty', 60], ['fifty', 50], ['forty', 40], ['thirty', 30], ['twenty', 20]];
var ones_mapping = exports.ones_mapping = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
var sequence = exports.sequence = [[1e24, 'septillion'], [1e20, 'hundred sextillion'], [1e21, 'sextillion'], [1e20, 'hundred quintillion'], [1e18, 'quintillion'], [1e17, 'hundred quadrillion'], [1e15, 'quadrillion'], [1e14, 'hundred trillion'], [1e12, 'trillion'], [1e11, 'hundred billion'], [1e9, 'billion'], [1e8, 'hundred million'], [1e6, 'million'], [100000, 'hundred thousand'], [1000, 'thousand'], [100, 'hundred'], [1, 'one']];
},{}],"node_modules/compromise/src/3-three/numbers/numbers/format/toText/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toString = _interopRequireDefault(require("../../_toString.js"));
var _data = require("./data.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * turns an integer/float into.ber, like 'fifty-five'
 */

//turn number into an array of magnitudes, like [[5, million], [2, hundred]]
var breakdown_magnitudes = function breakdown_magnitudes(num) {
  var working = num;
  var have = [];
  _data.sequence.forEach(function (a) {
    if (num >= a[0]) {
      var howmany = Math.floor(working / a[0]);
      working -= howmany * a[0];
      if (howmany) {
        have.push({
          unit: a[1],
          count: howmany
        });
      }
    }
  });
  return have;
};

//turn numbers from 100-0 into their text
var breakdown_hundred = function breakdown_hundred(num) {
  var arr = [];
  if (num > 100) {
    return arr; //something bad happened..
  }
  for (var i = 0; i < _data.tens_mapping.length; i++) {
    if (num >= _data.tens_mapping[i][1]) {
      num -= _data.tens_mapping[i][1];
      arr.push(_data.tens_mapping[i][0]);
    }
  }
  //(hopefully) we should only have 20-0 now
  if (_data.ones_mapping[num]) {
    arr.push(_data.ones_mapping[num]);
  }
  return arr;
};

/** print-out 'point eight nine'*/
var handle_decimal = function handle_decimal(num) {
  var names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
  var arr = [];
  //parse it out like a string, because js math is such shit
  var str = (0, _toString.default)(num);
  var decimal = str.match(/\.([0-9]+)/);
  if (!decimal || !decimal[0]) {
    return arr;
  }
  arr.push('point');
  var decimals = decimal[0].split('');
  for (var i = 0; i < decimals.length; i++) {
    arr.push(names[decimals[i]]);
  }
  return arr;
};

/** turns an integer into a textual number */
var toText = function toText(obj) {
  var num = obj.num;
  // handle zero, quickly
  if (num === 0 || num === '0') {
    return 'zero'; // no?
  }
  //big numbers, north of sextillion, aren't gonna work well..
  //keep them small..
  if (num > 1e21) {
    num = (0, _toString.default)(num);
  }
  var arr = [];
  //handle negative numbers
  if (num < 0) {
    arr.push('minus');
    num = Math.abs(num);
  }
  //break-down into units, counts
  var units = breakdown_magnitudes(num);
  //build-up the string from its components
  for (var i = 0; i < units.length; i++) {
    var unit_name = units[i].unit;
    if (unit_name === 'one') {
      unit_name = '';
      //put an 'and' in here
      if (arr.length > 1) {
        arr.push('and');
      }
    }
    arr = arr.concat(breakdown_hundred(units[i].count));
    arr.push(unit_name);
  }
  //also support decimals - 'point eight'
  arr = arr.concat(handle_decimal(num));
  //remove empties
  arr = arr.filter(function (s) {
    return s;
  });
  if (arr.length === 0) {
    arr[0] = '';
  }
  return arr.join(' ');
};
var _default = exports.default = toText; // console.log(to_text(-1000.8));
},{"../../_toString.js":"node_modules/compromise/src/3-three/numbers/numbers/_toString.js","./data.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toText/data.js"}],"node_modules/compromise/src/3-three/numbers/fractions/convert/toCardinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../../numbers/format/toText/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var toCardinal = function toCardinal(obj) {
  if (!obj.numerator || !obj.denominator) {
    return '';
  }
  var a = (0, _index.default)({
    num: obj.numerator
  });
  var b = (0, _index.default)({
    num: obj.denominator
  });
  return "".concat(a, " out of ").concat(b);
};
var _default = exports.default = toCardinal;
},{"../../numbers/format/toText/index.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toText/index.js"}],"node_modules/compromise/src/3-three/numbers/numbers/format/toOrdinal/textOrdinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../toText/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var irregulars = {
  one: 'first',
  two: 'second',
  three: 'third',
  five: 'fifth',
  eight: 'eighth',
  nine: 'ninth',
  twelve: 'twelfth',
  twenty: 'twentieth',
  thirty: 'thirtieth',
  forty: 'fortieth',
  fourty: 'fourtieth',
  fifty: 'fiftieth',
  sixty: 'sixtieth',
  seventy: 'seventieth',
  eighty: 'eightieth',
  ninety: 'ninetieth'
};

/**
 * convert a javascript number to 'twentieth' format
 * */
var textOrdinal = function textOrdinal(obj) {
  var words = (0, _index.default)(obj).split(' ');
  //convert the last number to an ordinal
  var last = words[words.length - 1];
  if (irregulars.hasOwnProperty(last)) {
    words[words.length - 1] = irregulars[last];
  } else {
    words[words.length - 1] = last.replace(/y$/, 'i') + 'th';
  }
  return words.join(' ');
};
var _default = exports.default = textOrdinal;
},{"../toText/index.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toText/index.js"}],"node_modules/compromise/src/3-three/numbers/fractions/convert/toOrdinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("../../numbers/format/toText/index.js"));
var _textOrdinal = _interopRequireDefault(require("../../numbers/format/toOrdinal/textOrdinal.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var toOrdinal = function toOrdinal(obj) {
  // don't divide by zero!
  if (!obj.numerator || !obj.denominator) {
    return '';
  }
  // create [two] [fifths]
  var start = (0, _index.default)({
    num: obj.numerator
  });
  var end = (0, _textOrdinal.default)({
    num: obj.denominator
  });
  // 'one secondth' -> 'one half'
  if (obj.denominator === 2) {
    end = 'half';
  }
  if (start && end) {
    if (obj.numerator !== 1) {
      end += 's';
    }
    return "".concat(start, " ").concat(end);
  }
  return '';
};
var _default = exports.default = toOrdinal;
},{"../../numbers/format/toText/index.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toText/index.js","../../numbers/format/toOrdinal/textOrdinal.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toOrdinal/textOrdinal.js"}],"node_modules/compromise/src/3-three/numbers/fractions/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _find = _interopRequireDefault(require("./find.js"));
var _parse4 = _interopRequireDefault(require("./parse.js"));
var _toCardinal2 = _interopRequireDefault(require("./convert/toCardinal.js"));
var _toOrdinal2 = _interopRequireDefault(require("./convert/toOrdinal.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var plugin = function plugin(View) {
  /**
   */
  var Fractions = /*#__PURE__*/function (_View) {
    function Fractions(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Fractions);
      _this = _callSuper(this, Fractions, [document, pointer, groups]);
      _this.viewType = 'Fractions';
      return _this;
    }
    _inherits(Fractions, _View);
    return _createClass(Fractions, [{
      key: "parse",
      value: function parse(n) {
        return this.getNth(n).map(_parse4.default);
      }
    }, {
      key: "get",
      value: function get(n) {
        return this.getNth(n).map(_parse4.default);
      }
    }, {
      key: "json",
      value: function json(n) {
        return this.getNth(n).map(function (p) {
          var json = p.toView().json(n)[0];
          var parsed = (0, _parse4.default)(p);
          json.fraction = parsed;
          return json;
        }, []);
      }
      // become 0.5
    }, {
      key: "toDecimal",
      value: function toDecimal(n) {
        this.getNth(n).forEach(function (m) {
          var _parse2 = (0, _parse4.default)(m),
            decimal = _parse2.decimal;
          m = m.replaceWith(String(decimal), true);
          m.tag('NumericValue');
          m.unTag('Fraction');
        });
        return this;
      }
    }, {
      key: "toFraction",
      value: function toFraction(n) {
        var _this2 = this;
        this.getNth(n).forEach(function (m) {
          var obj = (0, _parse4.default)(m);
          if (obj && typeof obj.numerator === 'number' && typeof obj.denominator === 'number') {
            var str = "".concat(obj.numerator, "/").concat(obj.denominator);
            _this2.replace(m, str);
          }
        });
        return this;
      }
    }, {
      key: "toOrdinal",
      value: function toOrdinal(n) {
        this.getNth(n).forEach(function (m) {
          var obj = (0, _parse4.default)(m);
          var str = (0, _toOrdinal2.default)(obj);
          if (m.after('^#Noun').found) {
            str += ' of'; // three fifths of dentists
          }
          m.replaceWith(str);
        });
        return this;
      }
    }, {
      key: "toCardinal",
      value: function toCardinal(n) {
        this.getNth(n).forEach(function (m) {
          var obj = (0, _parse4.default)(m);
          var str = (0, _toCardinal2.default)(obj);
          m.replaceWith(str);
        });
        return this;
      }
    }, {
      key: "toPercentage",
      value: function toPercentage(n) {
        this.getNth(n).forEach(function (m) {
          var _parse3 = (0, _parse4.default)(m),
            decimal = _parse3.decimal;
          var percent = decimal * 100;
          percent = Math.round(percent * 100) / 100; // round it
          m.replaceWith("".concat(percent, "%"));
        });
        return this;
      }
    }]);
  }(View);
  View.prototype.fractions = function (n) {
    var m = (0, _find.default)(this);
    m = m.getNth(n);
    return new Fractions(this.document, m.pointer);
  };
};
var _default = exports.default = plugin;
},{"./find.js":"node_modules/compromise/src/3-three/numbers/fractions/find.js","./parse.js":"node_modules/compromise/src/3-three/numbers/fractions/parse.js","./convert/toCardinal.js":"node_modules/compromise/src/3-three/numbers/fractions/convert/toCardinal.js","./convert/toOrdinal.js":"node_modules/compromise/src/3-three/numbers/fractions/convert/toOrdinal.js"}],"node_modules/compromise/src/3-three/numbers/numbers/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var ones = 'one|two|three|four|five|six|seven|eight|nine';
var tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty';
var teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen';

// this is a bit of a mess
// segment consecutive number-words into sensible chunks
var findNumbers = function findNumbers(doc) {
  var m = doc.match('#Value+');

  //"50 83"
  if (m.has('#NumericValue #NumericValue')) {
    //a comma may mean two numbers
    if (m.has('#Value @hasComma #Value')) {
      m.splitAfter('@hasComma');
    } else if (m.has('#NumericValue #Fraction')) {
      m.splitAfter('#NumericValue #Fraction');
    } else {
      m = m.splitAfter('#NumericValue');
    }
  }

  //three-length
  if (m.has('#Value #Value #Value') && !m.has('#Multiple')) {
    //twenty-five-twenty
    if (m.has('(' + tens + ') #Cardinal #Cardinal')) {
      m = m.splitAfter('(' + tens + ') #Cardinal');
    }
  }

  //two-length ones
  if (m.has('#Value #Value')) {
    //june 21st 1992 is two seperate values
    if (m.has('#NumericValue #NumericValue')) {
      m = m.splitOn('#Year');
    }
    //sixty fifteen
    if (m.has('(' + tens + ') (' + teens + ')')) {
      m = m.splitAfter('(' + tens + ')');
    }

    //"72 82"
    var double = m.match('#Cardinal #Cardinal');
    if (double.found && !m.has('(point|decimal|#Fraction)')) {
      //not 'two hundred'
      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {
        // two fifty five
        var noMultiple = m.has("(".concat(ones, ") (").concat(tens, ")"));
        // twenty one
        var tensVal = double.has('(' + tens + ') #Cardinal');
        // hundredOne
        var multVal = double.has('#Multiple #Value');
        //one proper way, 'twenty one', or 'hundred one'
        if (!noMultiple && !tensVal && !multVal) {
          // double = double.firstTerm()
          double.terms().forEach(function (d) {
            m = m.splitOn(d);
          });
        }
      }
    }

    //seventh fifth
    if (m.match('#Ordinal #Ordinal').match('#TextValue').found && !m.has('#Multiple')) {
      //the one proper way, 'twenty first'
      if (!m.has('(' + tens + ') #Ordinal')) {
        m = m.splitAfter('#Ordinal');
      }
    }
    //fifth five
    m = m.splitBefore('#Ordinal [#Cardinal]', 0);
    //five 2017 (support '5 hundred', and 'twenty 5'
    if (m.has('#TextValue #NumericValue') && !m.has('(' + tens + '|#Multiple)')) {
      m = m.splitBefore('#TextValue #NumericValue');
    }
  }

  //5-8
  m = m.splitAfter('#NumberRange');
  // june 5th 1999
  m = m.splitBefore('#Year');
  return m;
};
var _default = exports.default = findNumbers;
},{}],"node_modules/compromise/src/3-three/numbers/numbers/parse/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./toNumber/index.js"));
var _parse = _interopRequireDefault(require("../../fractions/parse.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var parseNumeric = function parseNumeric(str, m) {
  str = str.replace(/,/g, '');
  //parse a numeric-number
  var arr = str.split(/([0-9.,]*)/);
  var _arr = _slicedToArray(arr, 2),
    prefix = _arr[0],
    num = _arr[1];
  var suffix = arr.slice(2).join('');
  if (num !== '' && m.length < 2) {
    num = Number(num || str);
    //ensure that num is an actual number
    if (typeof num !== 'number') {
      num = null;
    }
    // strip an ordinal off the suffix
    suffix = suffix || '';
    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {
      suffix = '';
    }
    // support M for million, k for thousand
    // if (suffix === 'm' || suffix === 'M') {
    //   num *= 1000000
    //   suffix = ''
    // }
    // if (suffix === 'k' || suffix === 'k') {
    //   num *= 1000
    //   suffix = ''
    // }
    return {
      prefix: prefix || '',
      num: num,
      suffix: suffix
    };
  }
  return null;
};

// get a numeric value from this phrase
var parseNumber = function parseNumber(m) {
  if (typeof m === 'string') {
    return {
      num: (0, _index.default)(m)
    };
  }
  var str = m.text('reduced');
  // reach for '12 litres'
  var unit = m.growRight('#Unit').match('#Unit$').text('machine');
  // is it in '3,123' format?
  var hasComma = /[0-9],[0-9]/.test(m.text('text'));
  // parse a numeric-number like '$4.00'
  if (m.terms().length === 1 && !m.has('#Multiple')) {
    var res = parseNumeric(str, m);
    if (res !== null) {
      res.hasComma = hasComma;
      res.unit = unit;
      return res;
    }
  }
  // -- parse text-formats --
  // Fractions: remove 'and a half' etc. from the end
  var frPart = m.match('#Fraction{2,}$');
  frPart = frPart.found === false ? m.match('^#Fraction$') : frPart;
  var fraction = null;
  if (frPart.found) {
    if (frPart.has('#Value and #Value #Fraction')) {
      frPart = frPart.match('and #Value #Fraction');
    }
    fraction = (0, _parse.default)(frPart);
    // remove it from our string
    m = m.not(frPart);
    m = m.not('and$');
    str = m.text('reduced');
  }
  var num = 0;
  if (str) {
    num = (0, _index.default)(str) || 0;
  }
  // apply numeric fraction
  if (fraction && fraction.decimal) {
    num += fraction.decimal;
  }
  return {
    hasComma: hasComma,
    prefix: '',
    num: num,
    suffix: '',
    isOrdinal: m.has('#Ordinal'),
    isText: m.has('#TextValue'),
    isFraction: m.has('#Fraction'),
    isMoney: m.has('#Money'),
    unit: unit
  };
};
var _default = exports.default = parseNumber;
},{"./toNumber/index.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/toNumber/index.js","../../fractions/parse.js":"node_modules/compromise/src/3-three/numbers/fractions/parse.js"}],"node_modules/compromise/src/3-three/numbers/numbers/format/toOrdinal/numOrdinal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toString = _interopRequireDefault(require("../../_toString.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * turn a number like 5 into an ordinal like 5th
 */
var numOrdinal = function numOrdinal(obj) {
  var num = obj.num;
  if (!num && num !== 0) {
    return null;
  }
  //the teens are all 'th'
  var tens = num % 100;
  if (tens > 10 && tens < 20) {
    return String(num) + 'th';
  }
  //the rest of 'em
  var mapping = {
    0: 'th',
    1: 'st',
    2: 'nd',
    3: 'rd'
  };
  var str = (0, _toString.default)(num);
  var last = str.slice(str.length - 1, str.length);
  if (mapping[last]) {
    str += mapping[last];
  } else {
    str += 'th';
  }
  return str;
};
var _default = exports.default = numOrdinal;
},{"../../_toString.js":"node_modules/compromise/src/3-three/numbers/numbers/_toString.js"}],"node_modules/compromise/src/3-three/numbers/numbers/format/suffix.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var prefixes = {
  '¢': 'cents',
  $: 'dollars',
  '£': 'pounds',
  '¥': 'yen',
  '€': 'euros',
  '₡': 'colón',
  '฿': 'baht',
  '₭': 'kip',
  '₩': 'won',
  '₹': 'rupees',
  '₽': 'ruble',
  '₺': 'liras'
};
var suffixes = {
  '%': 'percent',
  // s: 'seconds',
  // cm: 'centimetres',
  // km: 'kilometres',
  // ft: 'feet',
  '°': 'degrees'
};
var addSuffix = function addSuffix(obj) {
  var res = {
    suffix: '',
    prefix: obj.prefix
  };
  // $5 to 'five dollars'
  if (prefixes.hasOwnProperty(obj.prefix)) {
    res.suffix += ' ' + prefixes[obj.prefix];
    res.prefix = '';
  }
  // 5% to 'five percent'
  if (suffixes.hasOwnProperty(obj.suffix)) {
    res.suffix += ' ' + suffixes[obj.suffix];
  }
  if (res.suffix && obj.num === 1) {
    res.suffix = res.suffix.replace(/s$/, '');
  }
  // misc other suffixes
  if (!res.suffix && obj.suffix) {
    res.suffix += ' ' + obj.suffix;
  }
  return res;
};
var _default = exports.default = addSuffix;
},{}],"node_modules/compromise/src/3-three/numbers/numbers/format/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _numOrdinal = _interopRequireDefault(require("./toOrdinal/numOrdinal.js"));
var _textOrdinal = _interopRequireDefault(require("./toOrdinal/textOrdinal.js"));
var _index = _interopRequireDefault(require("./toText/index.js"));
var _suffix2 = _interopRequireDefault(require("./suffix.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var format = function format(obj, fmt) {
  if (fmt === 'TextOrdinal') {
    var _makeSuffix = (0, _suffix2.default)(obj),
      prefix = _makeSuffix.prefix,
      suffix = _makeSuffix.suffix;
    return prefix + (0, _textOrdinal.default)(obj) + suffix;
  }
  if (fmt === 'Ordinal') {
    return obj.prefix + (0, _numOrdinal.default)(obj) + obj.suffix;
  }
  if (fmt === 'TextCardinal') {
    var _makeSuffix2 = (0, _suffix2.default)(obj),
      _prefix = _makeSuffix2.prefix,
      _suffix = _makeSuffix2.suffix;
    return _prefix + (0, _index.default)(obj) + _suffix;
  }
  // assume Cardinal
  var num = obj.num;
  if (obj.hasComma) {
    num = num.toLocaleString();
  }
  return obj.prefix + String(num) + obj.suffix;
};
var _default = exports.default = format;
},{"./toOrdinal/numOrdinal.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toOrdinal/numOrdinal.js","./toOrdinal/textOrdinal.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toOrdinal/textOrdinal.js","./toText/index.js":"node_modules/compromise/src/3-three/numbers/numbers/format/toText/index.js","./suffix.js":"node_modules/compromise/src/3-three/numbers/numbers/format/suffix.js"}],"node_modules/compromise/src/3-three/numbers/numbers/isUnit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./parse/index.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var isArray = function isArray(arr) {
  return Object.prototype.toString.call(arr) === '[object Array]';
};

// turn anything into {foo:true} format
var coerceToObject = function coerceToObject(input) {
  if (typeof input === 'string' || typeof input === 'number') {
    var tmp = {};
    tmp[input] = true;
    return tmp;
  }
  if (isArray(input)) {
    return input.reduce(function (h, s) {
      h[s] = true;
      return h;
    }, {});
  }
  return input || {};
};

// only return values with the given unit
var isUnit = function isUnit(doc) {
  var input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  input = coerceToObject(input);
  return doc.filter(function (p) {
    var _parse = (0, _index.default)(p),
      unit = _parse.unit;
    if (unit && input[unit] === true) {
      return true;
    }
    return false;
  });
};
var _default = exports.default = isUnit;
},{"./parse/index.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/index.js"}],"node_modules/compromise/src/3-three/numbers/numbers/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _find = _interopRequireDefault(require("./find.js"));
var _index = _interopRequireDefault(require("./parse/index.js"));
var _index2 = _interopRequireDefault(require("./format/index.js"));
var _isUnit2 = _interopRequireDefault(require("./isUnit.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var addMethod = function addMethod(View) {
  /**   */
  var Numbers = /*#__PURE__*/function (_View) {
    function Numbers(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Numbers);
      _this = _callSuper(this, Numbers, [document, pointer, groups]);
      _this.viewType = 'Numbers';
      return _this;
    }
    _inherits(Numbers, _View);
    return _createClass(Numbers, [{
      key: "parse",
      value: function parse(n) {
        return this.getNth(n).map(_index.default);
      }
    }, {
      key: "get",
      value: function get(n) {
        return this.getNth(n).map(_index.default).map(function (o) {
          return o.num;
        });
      }
    }, {
      key: "json",
      value: function json(n) {
        var opts = _typeof(n) === 'object' ? n : {};
        return this.getNth(n).map(function (p) {
          var json = p.toView().json(opts)[0];
          var parsed = (0, _index.default)(p);
          json.number = {
            prefix: parsed.prefix,
            num: parsed.num,
            suffix: parsed.suffix,
            hasComma: parsed.hasComma,
            unit: parsed.unit
          };
          return json;
        }, []);
      }
      /** any known measurement unit, for the number */
    }, {
      key: "units",
      value: function units() {
        return this.growRight('#Unit').match('#Unit$');
      }
      /** return values that match a given unit */
    }, {
      key: "isUnit",
      value: function isUnit(allowed) {
        return (0, _isUnit2.default)(this, allowed);
      }
      /** return only ordinal numbers */
    }, {
      key: "isOrdinal",
      value: function isOrdinal() {
        return this.if('#Ordinal');
      }
      /** return only cardinal numbers*/
    }, {
      key: "isCardinal",
      value: function isCardinal() {
        return this.if('#Cardinal');
      }

      /** convert to numeric form like '8' or '8th' */
    }, {
      key: "toNumber",
      value: function toNumber() {
        var _this2 = this;
        var res = this.map(function (val) {
          if (!_this2.has('#TextValue')) {
            return val;
          }
          var obj = (0, _index.default)(val);
          if (obj.num === null) {
            return val;
          }
          var fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';
          var str = (0, _index2.default)(obj, fmt);
          val.replaceWith(str, {
            tags: true
          });
          return val.tag('NumericValue');
        });
        return new Numbers(res.document, res.pointer);
      }
      /** add commas, or nicer formatting for numbers */
    }, {
      key: "toLocaleString",
      value: function toLocaleString() {
        var m = this;
        m.forEach(function (val) {
          var obj = (0, _index.default)(val);
          if (obj.num === null) {
            return;
          }
          var num = obj.num.toLocaleString();
          // support ordinal ending, too
          if (val.has('#Ordinal')) {
            var str = (0, _index2.default)(obj, 'Ordinal');
            var end = str.match(/[a-z]+$/);
            if (end) {
              num += end[0] || '';
            }
          }
          val.replaceWith(num, {
            tags: true
          });
        });
        return this;
      }
      /** convert to numeric form like 'eight' or 'eighth' */
    }, {
      key: "toText",
      value: function toText() {
        var m = this;
        var res = m.map(function (val) {
          if (val.has('#TextValue')) {
            return val;
          }
          var obj = (0, _index.default)(val);
          if (obj.num === null) {
            return val;
          }
          var fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';
          var str = (0, _index2.default)(obj, fmt);
          val.replaceWith(str, {
            tags: true
          });
          val.tag('TextValue');
          return val;
        });
        return new Numbers(res.document, res.pointer);
      }
      /** convert ordinal to cardinal form, like 'eight', or '8' */
    }, {
      key: "toCardinal",
      value: function toCardinal() {
        var m = this;
        var res = m.map(function (val) {
          if (!val.has('#Ordinal')) {
            return val;
          }
          var obj = (0, _index.default)(val);
          if (obj.num === null) {
            return val;
          }
          var fmt = val.has('#TextValue') ? 'TextCardinal' : 'Cardinal';
          var str = (0, _index2.default)(obj, fmt);
          val.replaceWith(str, {
            tags: true
          });
          val.tag('Cardinal');
          return val;
        });
        return new Numbers(res.document, res.pointer);
      }
      /** convert cardinal to ordinal form, like 'eighth', or '8th' */
    }, {
      key: "toOrdinal",
      value: function toOrdinal() {
        var m = this;
        var res = m.map(function (val) {
          if (val.has('#Ordinal')) {
            return val;
          }
          var obj = (0, _index.default)(val);
          if (obj.num === null) {
            return val;
          }
          var fmt = val.has('#TextValue') ? 'TextOrdinal' : 'Ordinal';
          var str = (0, _index2.default)(obj, fmt);
          val.replaceWith(str, {
            tags: true
          });
          val.tag('Ordinal');
          return val;
        });
        return new Numbers(res.document, res.pointer);
      }

      /** return only numbers that are == n */
    }, {
      key: "isEqual",
      value: function isEqual(n) {
        return this.filter(function (val) {
          var num = (0, _index.default)(val).num;
          return num === n;
        });
      }
      /** return only numbers that are > n*/
    }, {
      key: "greaterThan",
      value: function greaterThan(n) {
        return this.filter(function (val) {
          var num = (0, _index.default)(val).num;
          return num > n;
        });
      }
      /** return only numbers that are < n*/
    }, {
      key: "lessThan",
      value: function lessThan(n) {
        return this.filter(function (val) {
          var num = (0, _index.default)(val).num;
          return num < n;
        });
      }
      /** return only numbers > min and < max */
    }, {
      key: "between",
      value: function between(min, max) {
        return this.filter(function (val) {
          var num = (0, _index.default)(val).num;
          return num > min && num < max;
        });
      }
      /** set these number to n */
    }, {
      key: "set",
      value: function set(n) {
        if (n === undefined) {
          return this; // don't bother
        }
        if (typeof n === 'string') {
          n = (0, _index.default)(n).num;
        }
        var m = this;
        var res = m.map(function (val) {
          var obj = (0, _index.default)(val);
          obj.num = n;
          if (obj.num === null) {
            return val;
          }
          var fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';
          if (val.has('#TextValue')) {
            fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';
          }
          var str = (0, _index2.default)(obj, fmt);
          // add commas to number
          if (obj.hasComma && fmt === 'Cardinal') {
            str = Number(str).toLocaleString();
          }
          val = val.not('#Currency');
          val.replaceWith(str, {
            tags: true
          });
          // handle plural/singular unit
          // agreeUnits(agree, val, obj)
          return val;
        });
        return new Numbers(res.document, res.pointer);
      }
    }, {
      key: "add",
      value: function add(n) {
        if (!n) {
          return this; // don't bother
        }
        if (typeof n === 'string') {
          n = (0, _index.default)(n).num;
        }
        var m = this;
        var res = m.map(function (val) {
          var obj = (0, _index.default)(val);
          if (obj.num === null) {
            return val;
          }
          obj.num += n;
          var fmt = val.has('#Ordinal') ? 'Ordinal' : 'Cardinal';
          if (obj.isText) {
            fmt = val.has('#Ordinal') ? 'TextOrdinal' : 'TextCardinal';
          }
          var str = (0, _index2.default)(obj, fmt);
          val.replaceWith(str, {
            tags: true
          });
          // handle plural/singular unit
          // agreeUnits(agree, val, obj)
          return val;
        });
        return new Numbers(res.document, res.pointer);
      }
      /** decrease each number by n*/
    }, {
      key: "subtract",
      value: function subtract(n, agree) {
        return this.add(n * -1, agree);
      }
      /** increase each number by 1 */
    }, {
      key: "increment",
      value: function increment(agree) {
        return this.add(1, agree);
      }
      /** decrease each number by 1 */
    }, {
      key: "decrement",
      value: function decrement(agree) {
        return this.add(-1, agree);
      }
      // overloaded - keep Numbers class
    }, {
      key: "update",
      value: function update(pointer) {
        var m = new Numbers(this.document, pointer);
        m._cache = this._cache; // share this full thing
        return m;
      }
    }]);
  }(View); // aliases
  Numbers.prototype.toNice = Numbers.prototype.toLocaleString;
  Numbers.prototype.isBetween = Numbers.prototype.between;
  Numbers.prototype.minus = Numbers.prototype.subtract;
  Numbers.prototype.plus = Numbers.prototype.add;
  Numbers.prototype.equals = Numbers.prototype.isEqual;
  View.prototype.numbers = function (n) {
    var m = (0, _find.default)(this);
    m = m.getNth(n);
    return new Numbers(this.document, m.pointer);
  };
  View.prototype.percentages = function (n) {
    var m = (0, _find.default)(this);
    m = m.filter(function (v) {
      return v.has('#Percent') || v.after('^percent');
    });
    m = m.getNth(n);
    return new Numbers(this.document, m.pointer);
  };
  View.prototype.money = function (n) {
    var m = (0, _find.default)(this);
    m = m.filter(function (v) {
      return v.has('#Money') || v.after('^#Currency');
    });
    m = m.getNth(n);
    return new Numbers(this.document, m.pointer);
  };
  // alias
  View.prototype.values = View.prototype.numbers;
};
var _default = exports.default = addMethod;
},{"./find.js":"node_modules/compromise/src/3-three/numbers/numbers/find.js","./parse/index.js":"node_modules/compromise/src/3-three/numbers/numbers/parse/index.js","./format/index.js":"node_modules/compromise/src/3-three/numbers/numbers/format/index.js","./isUnit.js":"node_modules/compromise/src/3-three/numbers/numbers/isUnit.js"}],"node_modules/compromise/src/3-three/numbers/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _api = _interopRequireDefault(require("./fractions/api.js"));
var _api2 = _interopRequireDefault(require("./numbers/api.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var api = function api(View) {
  (0, _api.default)(View);
  (0, _api2.default)(View);
};
var _default = exports.default = {
  api: api

  // add @greaterThan, @lessThan
  // mutate: world => {
  //   let termMethods = world.methods.one.termMethods

  //   termMethods.lessThan = function (term) {
  //     return false //TODO: implement
  //     // return /[aeiou]/.test(term.text)
  //   }
  // },
};
},{"./fractions/api.js":"node_modules/compromise/src/3-three/numbers/fractions/api.js","./numbers/api.js":"node_modules/compromise/src/3-three/numbers/numbers/api.js"}],"node_modules/compromise/src/3-three/redact/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var defaults = {
  people: true,
  emails: true,
  phoneNumbers: true,
  places: true
};
var redact = function redact() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  opts = Object.assign({}, defaults, opts);
  if (opts.people !== false) {
    this.people().replaceWith('██████████');
  }
  if (opts.emails !== false) {
    this.emails().replaceWith('██████████');
  }
  if (opts.places !== false) {
    this.places().replaceWith('██████████');
  }
  if (opts.phoneNumbers !== false) {
    this.phoneNumbers().replaceWith('███████');
  }
  return this;
};
var plugin = {
  api: function api(View) {
    View.prototype.redact = redact;
  }
};
var _default = exports.default = plugin;
},{}],"node_modules/compromise/src/3-three/sentences/questions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//is this sentence asking a question?
var isQuestion = function isQuestion(doc) {
  var clauses = doc.clauses();

  // Has ellipsis at the end means it's probably not a question
  // e.g., Is this just fantasy...
  if (/\.\.$/.test(doc.out('text'))) {
    return false;
  }

  // Starts with question word, but has a comma, so probably not a question
  // e.g., Why are we caught in a land slide, no escape from reality
  if (doc.has('^#QuestionWord') && doc.has('@hasComma')) {
    return false;
  }

  // do you see it or not
  if (doc.has('or not$')) {
    return true;
  }

  // Starts with a #QuestionWord
  // e.g., What open your eyes look up to the skies and see
  if (doc.has('^#QuestionWord')) {
    return true;
  }

  // Second word is a #QuestionWord
  // e.g., I'm what a poor boy
  // case ts.has('^\w+\s#QuestionWord'):
  // return true;

  // is it, do you - start of sentence
  // e.g., Do I need no sympathy
  if (doc.has('^(do|does|did|is|was|can|could|will|would|may) #Noun')) {
    return true;
  }

  // these are a little more loose..
  // e.g., Must I be come easy come easy go
  if (doc.has('^(have|must) you')) {
    return true;
  }

  // Clause starts with a question word
  // e.g., Anyway the wind blows, what doesn't really matter to me
  // if (clauses.has('^#QuestionWord')) {
  //   return true
  // }

  //is wayne gretskzy alive
  if (clauses.has('(do|does|is|was) #Noun+ #Adverb? (#Adjective|#Infinitive)$')) {
    return true;
  }

  // Probably not a question
  return false;
};
var findQuestions = function findQuestions(view) {
  var hasQ = /\?/;
  var document = view.document;
  return view.filter(function (m) {
    var terms = m.docs[0] || [];
    var lastTerm = terms[terms.length - 1];
    // is it not a full sentence?
    if (!lastTerm || document[lastTerm.index[0]].length !== terms.length) {
      return false;
    }
    // does it end with a question mark?
    if (hasQ.test(lastTerm.post)) {
      return true;
    }
    // try to guess a sentence without a question-mark
    return isQuestion(m);
  });
};
var _default = exports.default = findQuestions;
},{}],"node_modules/compromise/src/3-three/sentences/parse/mainClause.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// if a clause starts with these, it's not a main clause
var subordinate = "(after|although|as|because|before|if|since|than|that|though|when|whenever|where|whereas|wherever|whether|while|why|unless|until|once)";
var relative = "(that|which|whichever|who|whoever|whom|whose|whomever)";

//try to remove secondary clauses
var mainClause = function mainClause(s) {
  var m = s;
  if (m.length === 1) {
    return m;
  }
  // if there's no verb, it's dependent
  m = m.if('#Verb');
  if (m.length === 1) {
    return m;
  }
  // this is a signal for subordinate-clauses
  m = m.ifNo(subordinate);
  m = m.ifNo('^even (if|though)');
  m = m.ifNo('^so that');
  m = m.ifNo('^rather than');
  m = m.ifNo('^provided that');
  if (m.length === 1) {
    return m;
  }
  // relative clauses
  m = m.ifNo(relative);
  if (m.length === 1) {
    return m;
  }

  // check for subordinating conjunctions -- must be at the beginning of the clause
  m = m.ifNo('(^despite|^during|^before|^through|^throughout)');
  if (m.length === 1) {
    return m;
  }

  // check for clauses beginning with Gerund ("Taking ..., ...")
  m = m.ifNo('^#Gerund');
  if (m.length === 1) {
    return m;
  }

  // did we go too far?
  if (m.length === 0) {
    m = s;
  }
  // choose the first one?
  return m.eq(0);
};
var _default = exports.default = mainClause;
},{}],"node_modules/compromise/src/3-three/sentences/parse/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _mainClause = _interopRequireDefault(require("./mainClause.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var grammar = function grammar(vb) {
  var tense = null;
  if (vb.has('#PastTense')) {
    tense = 'PastTense';
  } else if (vb.has('#FutureTense')) {
    tense = 'FutureTense';
  } else if (vb.has('#PresentTense')) {
    tense = 'PresentTense';
  }
  return {
    tense: tense
  };
};
var parse = function parse(s) {
  var clauses = s.clauses();
  var main = (0, _mainClause.default)(clauses);
  var chunks = main.chunks();
  var subj = s.none();
  var verb = s.none();
  var pred = s.none();
  chunks.forEach(function (ch, i) {
    if (i === 0 && !ch.has('<Verb>')) {
      subj = ch;
      return;
    }
    if (!verb.found && ch.has('<Verb>')) {
      verb = ch;
      return;
    }
    if (verb.found) {
      pred = pred.concat(ch);
    }
  });
  // cleanup a missed parse
  if (verb.found && !subj.found) {
    subj = verb.before('<Noun>+').first();
  }
  return {
    subj: subj,
    verb: verb,
    pred: pred,
    grammar: grammar(verb)
  };
};
var _default = exports.default = parse;
},{"./mainClause.js":"node_modules/compromise/src/3-three/sentences/parse/mainClause.js"}],"node_modules/compromise/src/3-three/sentences/conjugate/toPast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var toPast = function toPast(s) {
  var verbs = s.verbs();
  // translate the first verb, no-stress
  var first = verbs.eq(0);
  // already past
  if (first.has('#PastTense')) {
    return s;
  }
  first.toPastTense();

  // force agreement with any 2nd/3rd verbs:
  if (verbs.length > 1) {
    verbs = verbs.slice(1);
    // remove any sorta infinitive - 'to engage'
    verbs = verbs.filter(function (v) {
      return !v.lookBehind('to$').found;
    });

    // keep -ing verbs
    verbs = verbs.if('#PresentTense');
    verbs = verbs.notIf('#Gerund');

    //run-on infinitive-list - 'to walk, sit and eat'
    var list = s.match('to #Verb+ #Conjunction #Verb').terms();
    verbs = verbs.not(list);

    // otherwise, I guess so?
    if (verbs.found) {
      verbs.verbs().toPastTense();
    }
  }

  // s.compute('chunks')
  return s;
};
var _default = exports.default = toPast;
},{}],"node_modules/compromise/src/3-three/sentences/conjugate/toPresent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var toPresent = function toPresent(s) {
  var verbs = s.verbs();
  // translate the first verb, no-stress
  var first = verbs.eq(0);
  // already present
  // if (first.has('#PresentTense')) {
  //   return s
  // }
  first.toPresentTense();

  // force agreement with any 2nd/3rd verbs:
  if (verbs.length > 1) {
    verbs = verbs.slice(1);
    // remove any sorta infinitive - 'to engage'
    verbs = verbs.filter(function (v) {
      return !v.lookBehind('to$').found;
    });

    // keep -ing verbs
    // verbs = verbs.if('#PresentTense')
    verbs = verbs.notIf('#Gerund');

    //run-on infinitive-list - 'to walk, sit and eat'
    // let list = s.match('to #Verb+ #Conjunction #Verb').terms()
    // verbs = verbs.not(list)

    // otherwise, I guess so?
    if (verbs.found) {
      verbs.verbs().toPresentTense();
    }
  }

  // s.compute('chunks')
  return s;
};
var _default = exports.default = toPresent;
},{}],"node_modules/compromise/src/3-three/sentences/conjugate/toFuture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var toFuture = function toFuture(s) {
  var verbs = s.verbs();
  // translate the first verb, no-stress
  var first = verbs.eq(0);
  first.toFutureTense();
  s = s.fullSentence();
  verbs = s.verbs(); //re-do it
  // verbs.debug()
  // force agreement with any 2nd/3rd verbs:
  if (verbs.length > 1) {
    verbs = verbs.slice(1);
    // which following-verbs should we also change?
    var toChange = verbs.filter(function (vb) {
      // remove any sorta infinitive - 'to engage'
      if (vb.lookBehind('to$').found) {
        return false;
      }
      // is watching
      if (vb.has('#Copula #Gerund')) {
        return true;
      }
      // keep -ing verbs
      if (vb.has('#Gerund')) {
        return false;
      }
      // he is green and he is friendly
      if (vb.has('#Copula')) {
        return true;
      }
      // 'he will see when he watches'
      if (vb.has('#PresentTense') && !vb.has('#Infinitive') && vb.lookBefore('(he|she|it|that|which)$').found) {
        return false;
      }
      return true;
    });
    // otherwise, change em too
    if (toChange.found) {
      toChange.forEach(function (m) {
        //extra rules for 'is'
        if (m.has('#Copula')) {
          // when he was out..
          m.match('was').replaceWith('is');
          // when he is out
          m.match('is').replaceWith('will be');
          return;
        }
        // if (m.has('#PastTense')) {
        //   m.toPresentTense()
        //   return
        // }
        m.toInfinitive();
      });
    }
  }
  return s;
};
var _default = exports.default = toFuture;
},{}],"node_modules/compromise/src/3-three/sentences/conjugate/toNegative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toPositive = exports.toNegative = void 0;
var toNegative = exports.toNegative = function toNegative(s) {
  s.verbs().first().toNegative().compute('chunks');
  return s;
};
var toPositive = exports.toPositive = function toPositive(s) {
  s.verbs().first().toPositive().compute('chunks');
  return s;
};
},{}],"node_modules/compromise/src/3-three/sentences/conjugate/toInfinitive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var toInfinitive = function toInfinitive(s) {
  s.verbs().toInfinitive();
  // s.compute('chunks')
  return s;
};
var _default = exports.default = toInfinitive;
},{}],"node_modules/compromise/src/3-three/sentences/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _questions = _interopRequireDefault(require("./questions.js"));
var _index = _interopRequireDefault(require("./parse/index.js"));
var _toPast = _interopRequireDefault(require("./conjugate/toPast.js"));
var _toPresent = _interopRequireDefault(require("./conjugate/toPresent.js"));
var _toFuture = _interopRequireDefault(require("./conjugate/toFuture.js"));
var _toNegative2 = require("./conjugate/toNegative.js");
var _toInfinitive2 = _interopRequireDefault(require("./conjugate/toInfinitive.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var api = function api(View) {
  var Sentences = /*#__PURE__*/function (_View) {
    function Sentences(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Sentences);
      _this = _callSuper(this, Sentences, [document, pointer, groups]);
      _this.viewType = 'Sentences';
      return _this;
    }
    _inherits(Sentences, _View);
    return _createClass(Sentences, [{
      key: "json",
      value: function json() {
        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return this.map(function (m) {
          var json = m.toView().json(opts)[0] || {};
          var _parse = (0, _index.default)(m),
            subj = _parse.subj,
            verb = _parse.verb,
            pred = _parse.pred,
            grammar = _parse.grammar;
          json.sentence = {
            subject: subj.text('normal'),
            verb: verb.text('normal'),
            predicate: pred.text('normal'),
            grammar: grammar
          };
          return json;
        }, []);
      }
    }, {
      key: "toPastTense",
      value: function toPastTense(n) {
        return this.getNth(n).map(function (s) {
          var parsed = (0, _index.default)(s);
          return (0, _toPast.default)(s, parsed);
        });
      }
    }, {
      key: "toPresentTense",
      value: function toPresentTense(n) {
        return this.getNth(n).map(function (s) {
          var parsed = (0, _index.default)(s);
          return (0, _toPresent.default)(s, parsed);
        });
      }
    }, {
      key: "toFutureTense",
      value: function toFutureTense(n) {
        return this.getNth(n).map(function (s) {
          var parsed = (0, _index.default)(s);
          s = (0, _toFuture.default)(s, parsed);
          return s;
        });
      }
    }, {
      key: "toInfinitive",
      value: function toInfinitive(n) {
        return this.getNth(n).map(function (s) {
          var parsed = (0, _index.default)(s);
          return (0, _toInfinitive2.default)(s, parsed);
        });
      }
    }, {
      key: "toNegative",
      value: function toNegative(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          return (0, _toNegative2.toNegative)(vb, parsed);
        });
      }
    }, {
      key: "toPositive",
      value: function toPositive(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          return (0, _toNegative2.toPositive)(vb, parsed);
        });
      }
    }, {
      key: "isQuestion",
      value: function isQuestion(n) {
        return this.questions(n);
      }
    }, {
      key: "isExclamation",
      value: function isExclamation(n) {
        var res = this.filter(function (s) {
          return s.lastTerm().has('@hasExclamation');
        });
        return res.getNth(n);
      }
    }, {
      key: "isStatement",
      value: function isStatement(n) {
        var res = this.filter(function (s) {
          return !s.isExclamation().found && !s.isQuestion().found;
        });
        return res.getNth(n);
      }
      // overloaded - keep Sentences class
    }, {
      key: "update",
      value: function update(pointer) {
        var m = new Sentences(this.document, pointer);
        m._cache = this._cache; // share this full thing
        return m;
      }
    }]);
  }(View); // aliases
  Sentences.prototype.toPresent = Sentences.prototype.toPresentTense;
  Sentences.prototype.toPast = Sentences.prototype.toPastTense;
  Sentences.prototype.toFuture = Sentences.prototype.toFutureTense;
  var methods = {
    sentences: function sentences(n) {
      var m = this.map(function (s) {
        return s.fullSentence();
      });
      m = m.getNth(n);
      return new Sentences(this.document, m.pointer);
    },
    questions: function questions(n) {
      var m = (0, _questions.default)(this);
      return m.getNth(n);
    }
  };
  Object.assign(View.prototype, methods);
};
var _default = exports.default = api;
},{"./questions.js":"node_modules/compromise/src/3-three/sentences/questions.js","./parse/index.js":"node_modules/compromise/src/3-three/sentences/parse/index.js","./conjugate/toPast.js":"node_modules/compromise/src/3-three/sentences/conjugate/toPast.js","./conjugate/toPresent.js":"node_modules/compromise/src/3-three/sentences/conjugate/toPresent.js","./conjugate/toFuture.js":"node_modules/compromise/src/3-three/sentences/conjugate/toFuture.js","./conjugate/toNegative.js":"node_modules/compromise/src/3-three/sentences/conjugate/toNegative.js","./conjugate/toInfinitive.js":"node_modules/compromise/src/3-three/sentences/conjugate/toInfinitive.js"}],"node_modules/compromise/src/3-three/sentences/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _api = _interopRequireDefault(require("./api.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _api.default
};
},{"./api.js":"node_modules/compromise/src/3-three/sentences/api.js"}],"node_modules/compromise/src/3-three/topics/people/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var find = function find(doc) {
  var m = doc.splitAfter('@hasComma');
  m = m.match('#Honorific+? #Person+');
  // Spencer's King
  var poss = m.match('#Possessive').notIf('(his|her)'); //her majesty ...
  m = m.splitAfter(poss);
  return m;
};
var _default = exports.default = find;
},{}],"node_modules/compromise/src/3-three/topics/people/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var parse = function parse(m) {
  var res = {};
  res.firstName = m.match('#FirstName+');
  res.lastName = m.match('#LastName+');
  res.honorific = m.match('#Honorific+');
  var last = res.lastName;
  var first = res.firstName;
  if (!first.found || !last.found) {
    // let p = m.clone()
    // assume 'Mr Springer' is a last-name
    if (!first.found && !last.found && m.has('^#Honorific .$')) {
      res.lastName = m.match('.$');
      return res;
    }
  }
  return res;
};
var _default = exports.default = parse;
},{}],"node_modules/compromise/src/3-three/topics/people/gender.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/*
  Important notice - 
  this method makes many assumptions about gender-identity, in-order to assign grammatical gender.
  it should not be used for any other purposes, other than resolving pronouns in english
*/
var m = 'male';
var f = 'female';

// known gendered honorifics
var honorifics = {
  mr: m,
  mrs: f,
  miss: f,
  madam: f,
  // british stuff
  king: m,
  queen: f,
  duke: m,
  duchess: f,
  baron: m,
  baroness: f,
  count: m,
  countess: f,
  prince: m,
  princess: f,
  sire: m,
  dame: f,
  lady: f,
  ayatullah: m,
  //i think?

  congressman: m,
  congresswoman: f,
  'first lady': f,
  // marked as non-binary
  mx: null
};
var predictGender = function predictGender(parsed, person) {
  var firstName = parsed.firstName,
    honorific = parsed.honorific;
  // use first-name as signal-signal
  if (firstName.has('#FemaleName')) {
    return f;
  }
  if (firstName.has('#MaleName')) {
    return m;
  }
  // use honorics as gender-signal
  if (honorific.found) {
    var hon = honorific.text('normal');
    hon = hon.replace(/\./g, ''); //clean it up a bit
    if (honorifics.hasOwnProperty(hon)) {
      return honorifics[hon];
    }
    // her excelency
    if (/^her /.test(hon)) {
      return f;
    }
    if (/^his /.test(hon)) {
      return m;
    }
  }
  // offer used-pronouns as a signal
  var after = person.after();
  if (!after.has('#Person') && after.has('#Pronoun')) {
    var pro = after.match('#Pronoun');
    // manual use of gender-neutral
    if (pro.has('(they|their)')) {
      return null;
    }
    var hasMasc = pro.has('(he|his)');
    var hasFem = pro.has('(she|her|hers)');
    if (hasMasc && !hasFem) {
      return m;
    }
    if (hasFem && !hasMasc) {
      return f;
    }
  }
  return null;
};
var _default = exports.default = predictGender;
},{}],"node_modules/compromise/src/3-three/topics/people/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _find = _interopRequireDefault(require("./find.js"));
var _parse2 = _interopRequireDefault(require("./parse.js"));
var _gender = _interopRequireDefault(require("./gender.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var addMethod = function addMethod(View) {
  /**
   *
   */
  var People = /*#__PURE__*/function (_View) {
    function People(document, pointer, groups) {
      var _this;
      _classCallCheck(this, People);
      _this = _callSuper(this, People, [document, pointer, groups]);
      _this.viewType = 'People';
      return _this;
    }
    _inherits(People, _View);
    return _createClass(People, [{
      key: "parse",
      value: function parse(n) {
        return this.getNth(n).map(_parse2.default);
      }
    }, {
      key: "json",
      value: function json(n) {
        var opts = _typeof(n) === 'object' ? n : {};
        return this.getNth(n).map(function (p) {
          var json = p.toView().json(opts)[0];
          var parsed = (0, _parse2.default)(p);
          json.person = {
            firstName: parsed.firstName.text('normal'),
            lastName: parsed.lastName.text('normal'),
            honorific: parsed.honorific.text('normal'),
            presumed_gender: (0, _gender.default)(parsed, p)
          };
          return json;
        }, []);
      }
      // used for co-reference resolution only
    }, {
      key: "presumedMale",
      value: function presumedMale() {
        return this.filter(function (m) {
          return m.has('(#MaleName|mr|mister|sr|jr|king|pope|prince|sir)'); //todo configure these in .world
        });
      }
    }, {
      key: "presumedFemale",
      value: function presumedFemale() {
        return this.filter(function (m) {
          return m.has('(#FemaleName|mrs|miss|queen|princess|madam)');
        });
      }
      // overloaded - keep People class
    }, {
      key: "update",
      value: function update(pointer) {
        var m = new People(this.document, pointer);
        m._cache = this._cache; // share this full thing
        return m;
      }
    }]);
  }(View);
  View.prototype.people = function (n) {
    var m = (0, _find.default)(this);
    m = m.getNth(n);
    return new People(this.document, m.pointer);
  };
};
var _default = exports.default = addMethod;
},{"./find.js":"node_modules/compromise/src/3-three/topics/people/find.js","./parse.js":"node_modules/compromise/src/3-three/topics/people/parse.js","./gender.js":"node_modules/compromise/src/3-three/topics/people/gender.js"}],"node_modules/compromise/src/3-three/topics/places/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var find = function find(doc) {
  var m = doc.match('(#Place|#Address)+');

  // split all commas except for 'paris, france'
  var splits = m.match('@hasComma');
  splits = splits.filter(function (c) {
    // split 'europe, china'
    if (c.has('(asia|africa|europe|america)$')) {
      return true;
    }
    // don't split 'paris, france'
    if (c.has('(#City|#Region|#ProperNoun)$') && c.after('^(#Country|#Region)').found) {
      return false;
    }
    return true;
  });
  m = m.splitAfter(splits);
  return m;
};
var _default = exports.default = find;
},{}],"node_modules/compromise/src/3-three/topics/places/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _find = _interopRequireDefault(require("./find.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var addMethod = function addMethod(View) {
  View.prototype.places = function (n) {
    var m = (0, _find.default)(this);
    m = m.getNth(n);
    return new View(this.document, m.pointer);
  };
};
var _default = exports.default = addMethod;
},{"./find.js":"node_modules/compromise/src/3-three/topics/places/find.js"}],"node_modules/compromise/src/3-three/topics/orgs/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var api = function api(View) {
  View.prototype.organizations = function (n) {
    var m = this.match('#Organization+');
    return m.getNth(n);
  };
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/3-three/topics/topics.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//combine them with .topics() method
var find = function find(n) {
  var r = this.clauses();
  // Find people, places, and organizations
  var m = r.people();
  m = m.concat(r.places());
  m = m.concat(r.organizations());
  m = m.not('(someone|man|woman|mother|brother|sister|father)');
  //return them to normal ordering
  m = m.sort('seq');
  // m = m.unique()
  m = m.getNth(n);
  return m;
};
var api = function api(View) {
  View.prototype.topics = find;
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/3-three/topics/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _api = _interopRequireDefault(require("./people/api.js"));
var _api2 = _interopRequireDefault(require("./places/api.js"));
var _api3 = _interopRequireDefault(require("./orgs/api.js"));
var _topics = _interopRequireDefault(require("./topics.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var api = function api(View) {
  (0, _api.default)(View);
  (0, _api2.default)(View);
  (0, _api3.default)(View);
  (0, _topics.default)(View);
};
var _default = exports.default = {
  api: api
};
},{"./people/api.js":"node_modules/compromise/src/3-three/topics/people/api.js","./places/api.js":"node_modules/compromise/src/3-three/topics/places/api.js","./orgs/api.js":"node_modules/compromise/src/3-three/topics/orgs/api.js","./topics.js":"node_modules/compromise/src/3-three/topics/topics.js"}],"node_modules/compromise/src/3-three/verbs/find.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var findVerbs = function findVerbs(doc) {
  var m = doc.match('<Verb>');
  // want to see
  m = m.not('#Conjunction');
  // by walking
  m = m.not('#Preposition');
  m = m.splitAfter('@hasComma');

  // the reason he will is ...
  // all i do is talk
  m = m.splitAfter('[(do|did|am|was|is|will)] (is|was)', 0);
  // m = m.splitAfter('[(do|did|am|was|is|will)] #PresentTense', 0)

  // cool

  // like being pampered
  m = m.splitBefore('(#Verb && !#Copula) [being] #Verb', 0);
  // like to be pampered
  m = m.splitBefore('#Verb [to be] #Verb', 0);

  // implicit conjugation - 'help fix'

  m = m.splitAfter('[help] #PresentTense', 0);
  // what i can sell is..
  m = m.splitBefore('(#PresentTense|#PastTense) [#Copula]$', 0);
  // what i can sell will be
  m = m.splitBefore('(#PresentTense|#PastTense) [will be]$', 0);
  // directing had
  m = m.splitBefore('(#PresentTense|#PastTense) [(had|has)]', 0);

  // 'allow yourself'
  m = m.not('#Reflexive$');
  // sitting near
  m = m.not('#Adjective');

  // pastTense-pastTense
  // Everyone he [met] [told] him
  m = m.splitAfter('[#PastTense] #PastTense', 0);
  // Everyone he [met] had [told] him
  m = m.splitAfter('[#PastTense] #Auxiliary+ #PastTense', 0);

  // fans that were blowing felt amazing
  m = m.splitAfter('#Copula [#Gerund] #PastTense', 0);

  // managed to see
  // m = m.splitOn('#PastTense [to] #Infinitive', 0)

  //ensure there's actually a verb
  m = m.if('#Verb');
  // the reason he will is ...
  // ensure it's not two verbs
  // held annually is called
  if (m.has('(#Verb && !#Auxiliary) #Adverb+? #Copula')) {
    m = m.splitBefore('#Copula');
  }
  return m;
};
var _default = exports.default = findVerbs;
},{}],"node_modules/compromise/src/3-three/verbs/api/parse/root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// find the main verb, from a verb phrase
var getMain = function getMain(vb) {
  var root = vb;
  if (vb.wordCount() > 1) {
    root = vb.not('(#Negative|#Auxiliary|#Modal|#Adverb|#Prefix)');
  }
  // fallback to just the last word, sometimes
  if (root.length > 1 && !root.has('#Phrasal #Particle')) {
    root = root.last();
  }
  // look for more modals
  root = root.not('(want|wants|wanted) to');

  // fallback
  if (!root.found) {
    root = vb.not('#Negative');
    return root;
  }
  return root;
};
var _default = exports.default = getMain;
},{}],"node_modules/compromise/src/3-three/verbs/api/parse/adverbs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// split adverbs as before/after the root
var getAdverbs = function getAdverbs(vb, root) {
  var res = {
    pre: vb.none(),
    post: vb.none()
  };
  if (!vb.has('#Adverb')) {
    return res;
  }
  // pivot on the main verb
  var parts = vb.splitOn(root);
  if (parts.length === 3) {
    return {
      pre: parts.eq(0).adverbs(),
      post: parts.eq(2).adverbs()
    };
  }
  // it must be the second one
  if (parts.eq(0).isDoc(root)) {
    res.post = parts.eq(1).adverbs();
    return res;
  }
  res.pre = parts.eq(0).adverbs();
  return res;
};
var _default = exports.default = getAdverbs;
},{}],"node_modules/compromise/src/3-three/verbs/api/parse/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _root = _interopRequireDefault(require("./root.js"));
var _adverbs = _interopRequireDefault(require("./adverbs.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var getAuxiliary = function getAuxiliary(vb, root) {
  var parts = vb.splitBefore(root);
  if (parts.length <= 1) {
    return vb.none();
  }
  var aux = parts.eq(0);
  aux = aux.not('(#Adverb|#Negative|#Prefix)');
  return aux;
};
var getNegative = function getNegative(vb) {
  return vb.match('#Negative');
};

// pull-apart phrasal-verb into verb-particle
var getPhrasal = function getPhrasal(root) {
  if (!root.has('(#Particle|#PhrasalVerb)')) {
    return {
      verb: root.none(),
      particle: root.none()
    };
  }
  var particle = root.match('#Particle$');
  return {
    verb: root.not(particle),
    particle: particle
  };
};
var parseVerb = function parseVerb(view) {
  var vb = view.clone();
  vb.contractions().expand();
  var root = (0, _root.default)(vb);
  var res = {
    root: root,
    prefix: vb.match('#Prefix'),
    adverbs: (0, _adverbs.default)(vb, root),
    auxiliary: getAuxiliary(vb, root),
    negative: getNegative(vb),
    phrasal: getPhrasal(root)
  };
  return res;
};
var _default = exports.default = parseVerb;
},{"./root.js":"node_modules/compromise/src/3-three/verbs/api/parse/root.js","./adverbs.js":"node_modules/compromise/src/3-three/verbs/api/parse/adverbs.js"}],"node_modules/compromise/src/3-three/verbs/api/parse/grammar/forms.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var present = {
  tense: 'PresentTense'
};
var conditional = {
  conditional: true
};
var future = {
  tense: 'FutureTense'
};
var prog = {
  progressive: true
};
var past = {
  tense: 'PastTense'
};
var complete = {
  complete: true,
  progressive: false
};
var passive = {
  passive: true
};
var plural = {
  plural: true
};
var singular = {
  plural: false
};
var getData = function getData(tags) {
  var data = {};
  tags.forEach(function (o) {
    Object.assign(data, o);
  });
  return data;
};
var verbForms = {
  // === Simple ===
  'imperative': [
  // walk!
  ['#Imperative', []]],
  'want-infinitive': [['^(want|wants|wanted) to #Infinitive$', [present]], ['^wanted to #Infinitive$', [past]], ['^will want to #Infinitive$', [future]]],
  'gerund-phrase': [
  // started looking
  ['^#PastTense #Gerund$', [past]],
  // starts looking
  ['^#PresentTense #Gerund$', [present]],
  // start looking
  ['^#Infinitive #Gerund$', [present]],
  // will start looking
  ['^will #Infinitive #Gerund$', [future]],
  // have started looking
  ['^have #PastTense #Gerund$', [past]],
  // will have started looking
  ['^will have #PastTense #Gerund$', [past]]],
  'simple-present': [
  // he walks',
  ['^#PresentTense$', [present]],
  // we walk
  ['^#Infinitive$', [present]]],
  'simple-past': [
  // he walked',
  ['^#PastTense$', [past]]],
  'simple-future': [
  // he will walk
  ['^will #Adverb? #Infinitive', [future]]],
  // === Progressive ===
  'present-progressive': [
  // he is walking
  ['^(is|are|am) #Gerund$', [present, prog]]],
  'past-progressive': [
  // he was walking
  ['^(was|were) #Gerund$', [past, prog]]],
  'future-progressive': [
  // he will be
  ['^will be #Gerund$', [future, prog]]],
  // === Perfect ===
  'present-perfect': [
  // he has walked
  ['^(has|have) #PastTense$', [past, complete]] //past?
  ],
  'past-perfect': [
  // he had walked
  ['^had #PastTense$', [past, complete]],
  // had been to see
  ['^had #PastTense to #Infinitive', [past, complete]]],
  'future-perfect': [
  // he will have
  ['^will have #PastTense$', [future, complete]]],
  // === Progressive-perfect ===
  'present-perfect-progressive': [
  // he has been walking
  ['^(has|have) been #Gerund$', [past, prog]] //present?
  ],
  'past-perfect-progressive': [
  // he had been
  ['^had been #Gerund$', [past, prog]]],
  'future-perfect-progressive': [
  // will have been
  ['^will have been #Gerund$', [future, prog]]],
  // ==== Passive ===
  'passive-past': [
  // got walked, was walked, were walked
  ['(got|were|was) #Passive', [past, passive]],
  // was being walked
  ['^(was|were) being #Passive', [past, passive]],
  // had been walked, have been eaten
  ['^(had|have) been #Passive', [past, passive]]],
  'passive-present': [
  // is walked, are stolen
  ['^(is|are|am) #Passive', [present, passive]],
  // is being walked
  ['^(is|are|am) being #Passive', [present, passive]],
  // has been cleaned
  ['^has been #Passive', [present, passive]]],
  'passive-future': [
  // will have been walked
  ['will have been #Passive', [future, passive, conditional]],
  // will be cleaned
  ['will be being? #Passive', [future, passive, conditional]]],
  // === Conditional ===
  'present-conditional': [
  // would be walked
  ['would be #PastTense', [present, conditional]]],
  'past-conditional': [
  // would have been walked
  ['would have been #PastTense', [past, conditional]]],
  // ==== Auxiliary ===
  'auxiliary-future': [
  // going to drink
  ['(is|are|am|was) going to (#Infinitive|#PresentTense)', [future]]],
  'auxiliary-past': [
  // he did walk
  ['^did #Infinitive$', [past, singular]],
  // used to walk
  ['^used to #Infinitive$', [past, complete]]],
  'auxiliary-present': [
  // we do walk
  ['^(does|do) #Infinitive$', [present, complete, plural]]],
  // === modals ===
  'modal-past': [
  // he could have walked
  ['^(could|must|should|shall) have #PastTense$', [past]]],
  'modal-infinitive': [
  // he can walk
  ['^#Modal #Infinitive$', []]],
  'infinitive': [
  // walk
  ['^#Infinitive$', []]]
};
var list = [];
Object.keys(verbForms).map(function (k) {
  verbForms[k].forEach(function (a) {
    list.push({
      name: k,
      match: a[0],
      data: getData(a[1])
    });
  });
});
var _default = exports.default = list;
},{}],"node_modules/compromise/src/3-three/verbs/api/parse/grammar/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _forms = _interopRequireDefault(require("./forms.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var cleanUp = function cleanUp(vb, res) {
  vb = vb.clone();
  // remove adverbs
  if (res.adverbs.post && res.adverbs.post.found) {
    vb.remove(res.adverbs.post);
  }
  if (res.adverbs.pre && res.adverbs.pre.found) {
    vb.remove(res.adverbs.pre);
  }
  // remove negatives
  if (vb.has('#Negative')) {
    vb = vb.remove('#Negative');
  }
  // remove prefixes like 'anti'
  if (vb.has('#Prefix')) {
    vb = vb.remove('#Prefix');
  }
  // cut-off phrasal-verb
  if (res.root.has('#PhrasalVerb #Particle')) {
    vb.remove('#Particle$');
  }
  // did we miss any of these?
  // vb = vb.remove('#Adverb')
  vb = vb.not('#Adverb');
  return vb;
};

// 'learned [to code]'
var isInfinitive = function isInfinitive(vb) {
  if (vb.has('#Infinitive')) {
    var m = vb.growLeft('to');
    if (m.has('^to #Infinitive')) {
      return true;
    }
  }
  return false;
};
var getGrammar = function getGrammar(vb, res) {
  var grammar = {};
  // make it easy to classify, first
  vb = cleanUp(vb, res);
  for (var i = 0; i < _forms.default.length; i += 1) {
    var todo = _forms.default[i];
    if (vb.has(todo.match) === true) {
      grammar.form = todo.name;
      Object.assign(grammar, todo.data);
      break; //only match one
    }
  }
  // did we find nothing?
  if (!grammar.form) {
    if (vb.has('^#Verb$')) {
      grammar.form = 'infinitive';
    }
  }
  // fallback to 'naiive' tense detection
  if (!grammar.tense) {
    grammar.tense = res.root.has('#PastTense') ? 'PastTense' : 'PresentTense';
  }
  grammar.copula = res.root.has('#Copula');
  // 'learn to code'
  grammar.isInfinitive = isInfinitive(vb);
  return grammar;
};
var _default = exports.default = getGrammar;
},{"./forms.js":"node_modules/compromise/src/3-three/verbs/api/parse/grammar/forms.js"}],"node_modules/compromise/src/3-three/verbs/api/parse/getSubject.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var shouldSkip = function shouldSkip(last) {
  // is it our only choice?
  if (last.length <= 1) {
    return false;
  }
  var obj = last.parse()[0] || {};
  return obj.isSubordinate;
};

// try to chop-out any obvious conditional phrases
// he wore, [if it was raining], a raincoat.
var noSubClause = function noSubClause(before) {
  var parts = before.clauses();
  parts = parts.filter(function (m, i) {
    // if it was raining..
    if (m.has('^(if|unless|while|but|for|per|at|by|that|which|who|from)')) {
      return false;
    }
    // bowed to her,
    if (i > 0 && m.has('^#Verb . #Noun+$')) {
      return false;
    }
    // the fog, suddenly increasing in..
    if (i > 0 && m.has('^#Adverb')) {
      return false;
    }
    return true;
  });
  // don't drop the whole thing.
  if (parts.length === 0) {
    return before;
  }
  return parts;
};

//
var lastNoun = function lastNoun(vb) {
  var before = vb.before();
  // try to drop any mid-sentence clauses
  before = noSubClause(before);
  // parse-out our preceding nouns
  var nouns = before.nouns();
  // look for any dead-ringers
  var last = nouns.last();
  // i/she/he/they are very strong
  var pronoun = last.match('(i|he|she|we|you|they)');
  if (pronoun.found) {
    return pronoun.nouns();
  }
  // these are also good hints
  var det = nouns.if('^(that|this|those)');
  if (det.found) {
    return det;
  }
  if (nouns.found === false) {
    det = before.match('^(that|this|those)');
    if (det.found) {
      return det;
    }
  }

  // should we skip a subbordinate clause or two?
  last = nouns.last();
  if (shouldSkip(last)) {
    nouns.remove(last);
    last = nouns.last();
  }
  // i suppose we can skip two?
  if (shouldSkip(last)) {
    nouns.remove(last);
    last = nouns.last();
  }
  return last;
};
var isPlural = function isPlural(subj, vb) {
  // 'we are' vs 'he is'
  if (vb.has('(are|were|does)')) {
    return true;
  }
  if (subj.has('(those|they|we)')) {
    return true;
  }
  if (subj.found && subj.isPlural) {
    return subj.isPlural().found;
  }
  return false;
};
var getSubject = function getSubject(vb) {
  var subj = lastNoun(vb);
  return {
    subject: subj,
    plural: isPlural(subj, vb)
  };
};
var _default = exports.default = getSubject;
},{}],"node_modules/compromise/src/3-three/verbs/api/lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doDoes = void 0;
Object.defineProperty(exports, "getSubject", {
  enumerable: true,
  get: function () {
    return _getSubject3.default;
  }
});
exports.wasWere = exports.toInf = exports.noop = exports.noWill = exports.isPlural = exports.isAreAm = exports.getTense = void 0;
var _getSubject3 = _interopRequireDefault(require("./parse/getSubject.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var noop = exports.noop = function noop(vb) {
  return vb;
};
var isPlural = exports.isPlural = function isPlural(vb, parsed) {
  var subj = (0, _getSubject3.default)(vb, parsed);
  var m = subj.subject;
  if (m.has('i') || m.has('we')) {
    return true;
  }
  return subj.plural;
};
var wasWere = exports.wasWere = function wasWere(vb, parsed) {
  var _getSubject = (0, _getSubject3.default)(vb, parsed),
    subject = _getSubject.subject,
    plural = _getSubject.plural;
  if (plural || subject.has('we')) {
    return 'were';
  }
  return 'was';
};

// present-tense copula
var isAreAm = exports.isAreAm = function isAreAm(vb, parsed) {
  // 'people were' -> 'people are'
  if (vb.has('were')) {
    return 'are';
  }
  // 'i was' -> i am
  var _getSubject2 = (0, _getSubject3.default)(vb, parsed),
    subject = _getSubject2.subject,
    plural = _getSubject2.plural;
  if (subject.has('i')) {
    return 'am';
  }
  if (subject.has('we') || plural) {
    return 'are';
  }
  // 'he was' -> he is
  return 'is';
};
var doDoes = exports.doDoes = function doDoes(vb, parsed) {
  var subj = (0, _getSubject3.default)(vb, parsed);
  var m = subj.subject;
  if (m.has('i') || m.has('we')) {
    return 'do';
  }
  if (subj.plural) {
    return 'do';
  }
  return 'does';
};
var getTense = exports.getTense = function getTense(m) {
  if (m.has('#Infinitive')) {
    return 'Infinitive';
  }
  if (m.has('#Participle')) {
    return 'Participle';
  }
  if (m.has('#PastTense')) {
    return 'PastTense';
  }
  if (m.has('#Gerund')) {
    return 'Gerund';
  }
  if (m.has('#PresentTense')) {
    return 'PresentTense';
  }
  return undefined;
};
var toInf = exports.toInf = function toInf(vb, parsed) {
  var toInfinitive = vb.methods.two.transform.verb.toInfinitive;
  var str = parsed.root.text({
    keepPunct: false
  });
  str = toInfinitive(str, vb.model, getTense(vb));
  if (str) {
    vb.replace(parsed.root, str);
  }
  return vb;
};

// i will start looking -> i started looking
// i will not start looking -> i did not start looking
var noWill = exports.noWill = function noWill(vb) {
  if (vb.has('will not')) {
    return vb.replace('will not', 'have not');
  }
  return vb.remove('will');
};
},{"./parse/getSubject.js":"node_modules/compromise/src/3-three/verbs/api/parse/getSubject.js"}],"node_modules/compromise/src/3-three/verbs/api/toJSON.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./parse/index.js"));
var _index2 = _interopRequireDefault(require("./parse/grammar/index.js"));
var _lib = require("./lib.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var toArray = function toArray(m) {
  if (!m || !m.isView) {
    return [];
  }
  var opts = {
    normal: true,
    terms: false,
    text: false
  };
  return m.json(opts).map(function (s) {
    return s.normal;
  });
};
var toText = function toText(m) {
  if (!m || !m.isView) {
    return '';
  }
  return m.text('normal');
};
var toInf = function toInf(root) {
  var toInfinitive = root.methods.two.transform.verb.toInfinitive;
  var str = root.text('normal');
  return toInfinitive(str, root.model, (0, _lib.getTense)(root));
};
var toJSON = function toJSON(vb) {
  var parsed = (0, _index.default)(vb);
  vb = vb.clone().toView();
  var info = (0, _index2.default)(vb, parsed);
  return {
    root: parsed.root.text(),
    preAdverbs: toArray(parsed.adverbs.pre),
    postAdverbs: toArray(parsed.adverbs.post),
    auxiliary: toText(parsed.auxiliary),
    negative: parsed.negative.found,
    prefix: toText(parsed.prefix),
    infinitive: toInf(parsed.root),
    grammar: info
  };
};
var _default = exports.default = toJSON;
},{"./parse/index.js":"node_modules/compromise/src/3-three/verbs/api/parse/index.js","./parse/grammar/index.js":"node_modules/compromise/src/3-three/verbs/api/parse/grammar/index.js","./lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/conjugate/toInfinitive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../lib.js");
var keep = {
  tags: true
};

// all verb forms are the same
var toInf = function toInf(vb, parsed) {
  var toInfinitive = vb.methods.two.transform.verb.toInfinitive;
  var root = parsed.root,
    auxiliary = parsed.auxiliary;
  var aux = auxiliary.terms().harden();
  var str = root.text('normal');
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  if (str) {
    vb.replace(root, str, keep).tag('Verb').firstTerm().tag('Infinitive');
  }
  // remove any auxiliary terms
  if (aux.found) {
    vb.remove(aux);
  }
  // there is no real way to do this
  // 'i not walk'?  'i walk not'?
  if (parsed.negative.found) {
    if (!vb.has('not')) {
      vb.prepend('not');
    }
    var does = (0, _lib.doDoes)(vb, parsed);
    vb.prepend(does);
  }
  vb.fullSentence().compute(['freeze', 'lexicon', 'preTagger', 'postTagger', 'unfreeze', 'chunks']);
  return vb;
};
var _default = exports.default = toInf;
},{"../lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/conjugate/toPast.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../lib.js");
var keep = {
  tags: true
};
var fns = {
  noAux: function noAux(vb, parsed) {
    if (parsed.auxiliary.found) {
      vb = vb.remove(parsed.auxiliary);
    }
    return vb;
  },
  // walk->walked
  simple: function simple(vb, parsed) {
    var _vb$methods$two$trans = vb.methods.two.transform.verb,
      conjugate = _vb$methods$two$trans.conjugate,
      toInfinitive = _vb$methods$two$trans.toInfinitive;
    var root = parsed.root;
    // 'i may'
    if (root.has('#Modal')) {
      return vb;
    }
    var str = root.text({
      keepPunct: false
    });
    str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
    var all = conjugate(str, vb.model);
    // 'driven' || 'drove'
    str = all.PastTense;
    // all.Participle || all.PastTense
    // but skip the 'is' participle..
    str = str === 'been' ? 'was' : str;
    if (str === 'was') {
      str = (0, _lib.wasWere)(vb, parsed);
    }
    if (str) {
      vb.replace(root, str, keep);
    }
    return vb;
  },
  both: function both(vb, parsed) {
    // 'he did not walk'
    if (parsed.negative.found) {
      vb.replace('will', 'did');
      return vb;
    }
    // 'he walked'
    vb = fns.simple(vb, parsed);
    vb = fns.noAux(vb, parsed);
    return vb;
  },
  hasHad: function hasHad(vb) {
    vb.replace('has', 'had', keep);
    return vb;
  },
  // some verbs have this weird past-tense form
  // drive -> driven, (!drove)
  hasParticiple: function hasParticiple(vb, parsed) {
    var _vb$methods$two$trans2 = vb.methods.two.transform.verb,
      conjugate = _vb$methods$two$trans2.conjugate,
      toInfinitive = _vb$methods$two$trans2.toInfinitive;
    var root = parsed.root;
    var str = root.text('normal');
    str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
    return conjugate(str, vb.model).Participle;
  }
};
var forms = {
  // walk -> walked
  'infinitive': fns.simple,
  // he walks -> he walked
  'simple-present': fns.simple,
  // he walked
  'simple-past': _lib.noop,
  // he will walk -> he walked
  'simple-future': fns.both,
  // he is walking
  'present-progressive': function presentProgressive(vb) {
    vb.replace('are', 'were', keep);
    vb.replace('(is|are|am)', 'was', keep);
    return vb;
  },
  // he was walking
  'past-progressive': _lib.noop,
  // he will be walking
  'future-progressive': function futureProgressive(vb, parsed) {
    vb.match(parsed.root).insertBefore('was');
    vb.remove('(will|be)');
    return vb;
  },
  // has walked -> had walked (?)
  'present-perfect': fns.hasHad,
  // had walked
  'past-perfect': _lib.noop,
  // will have walked -> had walked
  'future-perfect': function futurePerfect(vb, parsed) {
    vb.match(parsed.root).insertBefore('had');
    if (vb.has('will')) {
      vb = (0, _lib.noWill)(vb);
    }
    vb.remove('have');
    return vb;
  },
  // has been walking -> had been
  'present-perfect-progressive': fns.hasHad,
  // had been walking
  'past-perfect-progressive': _lib.noop,
  // will have been -> had
  'future-perfect-progressive': function futurePerfectProgressive(vb) {
    vb.remove('will');
    vb.replace('have', 'had', keep);
    return vb;
  },
  // got walked
  'passive-past': function passivePast(vb) {
    // 'have been walked' -> 'had been walked'
    vb.replace('have', 'had', keep);
    return vb;
  },
  // is being walked  -> 'was being walked'
  'passive-present': function passivePresent(vb) {
    vb.replace('(is|are)', 'was', keep);
    return vb;
  },
  // will be walked -> had been walked
  'passive-future': function passiveFuture(vb, parsed) {
    if (parsed.auxiliary.has('will be')) {
      vb.match(parsed.root).insertBefore('had been');
      vb.remove('(will|be)');
    }
    // will have been walked -> had been walked
    if (parsed.auxiliary.has('will have been')) {
      vb.replace('have', 'had', keep);
      vb.remove('will');
    }
    return vb;
  },
  // would be walked -> 'would have been walked'
  'present-conditional': function presentConditional(vb) {
    vb.replace('be', 'have been');
    return vb;
  },
  // would have been walked
  'past-conditional': _lib.noop,
  // is going to drink -> was going to drink
  'auxiliary-future': function auxiliaryFuture(vb) {
    vb.replace('(is|are|am)', 'was', keep);
    return vb;
  },
  // used to walk
  'auxiliary-past': _lib.noop,
  // we do walk -> we did walk
  'auxiliary-present': function auxiliaryPresent(vb) {
    vb.replace('(do|does)', 'did', keep);
    return vb;
  },
  // must walk -> 'must have walked'
  'modal-infinitive': function modalInfinitive(vb, parsed) {
    // this modal has a clear tense
    if (vb.has('can')) {
      // can drive -> could drive
      vb.replace('can', 'could', keep);
    } else {
      // otherwise, 
      //  walk -> have walked
      //  drive -> have driven
      fns.simple(vb, parsed);
      vb.match('#Modal').insertAfter('have').tag('Auxiliary');
    }
    return vb;
  },
  // must have walked
  'modal-past': _lib.noop,
  // wanted to walk
  'want-infinitive': function wantInfinitive(vb) {
    vb.replace('(want|wants)', 'wanted', keep);
    vb.remove('will');
    return vb;
  },
  // started looking
  'gerund-phrase': function gerundPhrase(vb, parsed) {
    parsed.root = parsed.root.not('#Gerund$');
    fns.simple(vb, parsed);
    (0, _lib.noWill)(vb);
    return vb;
  }
};
var toPast = function toPast(vb, parsed, form) {
  // console.log(form)
  if (forms.hasOwnProperty(form)) {
    vb = forms[form](vb, parsed);
    vb.fullSentence().compute(['tagger', 'chunks']);
    return vb;
  }
  // do nothing i guess?
  return vb;
};
var _default = exports.default = toPast;
},{"../lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/conjugate/toParticiple.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../lib.js");
var haveHas = function haveHas(vb, parsed) {
  var subj = (0, _lib.getSubject)(vb, parsed);
  var m = subj.subject;
  if (m.has('(i|we|you)')) {
    return 'have';
  }
  // the dog has
  if (subj.plural === false) {
    return 'has';
  }
  // spencer has
  if (m.has('he') || m.has('she') || m.has('#Person')) {
    return 'has';
  }
  return 'have';
};

// walk-> has walked
var simple = function simple(vb, parsed) {
  var _vb$methods$two$trans = vb.methods.two.transform.verb,
    conjugate = _vb$methods$two$trans.conjugate,
    toInfinitive = _vb$methods$two$trans.toInfinitive;
  var root = parsed.root,
    auxiliary = parsed.auxiliary;
  // 'i may'
  if (root.has('#Modal')) {
    return vb;
  }
  var str = root.text({
    keepPunct: false
  });
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  var all = conjugate(str, vb.model);
  // 'driven' || 'drove'
  str = all.Participle || all.PastTense;
  if (str) {
    vb = vb.replace(root, str);
    // 'have/had/has eaten'
    var have = haveHas(vb, parsed);
    vb.prepend(have).match(have).tag('Auxiliary');
    vb.remove(auxiliary);
  }
  return vb;
};
var forms = {
  // walk -> walked
  'infinitive': simple,
  // he walks -> he walked
  'simple-present': simple,
  // he walked
  // 'simple-past': noop,
  // he will walk -> he walked
  'simple-future': function simpleFuture(vb, parsed) {
    return vb.replace('will', haveHas(vb, parsed));
  },
  // he is walking
  // 'present-progressive': noop,
  // he was walking
  // 'past-progressive': noop,
  // he will be walking
  // 'future-progressive': noop,

  // has walked -> had walked (?)
  'present-perfect': _lib.noop,
  // had walked
  'past-perfect': _lib.noop,
  // will have walked -> had walked
  'future-perfect': function futurePerfect(vb, parsed) {
    return vb.replace('will have', haveHas(vb, parsed));
  },
  // has been walking -> had been
  'present-perfect-progressive': _lib.noop,
  // had been walking
  'past-perfect-progressive': _lib.noop,
  // will have been -> had
  'future-perfect-progressive': _lib.noop

  // got walked
  // 'passive-past': noop,
  // is being walked  -> 'was being walked'
  // 'passive-present': noop,
  // will be walked -> had been walked
  // 'passive-future': noop,

  // would be walked -> 'would have been walked'
  // 'present-conditional': noop,
  // would have been walked
  // 'past-conditional': noop,

  // is going to drink -> was going to drink
  // 'auxiliary-future': noop,
  // used to walk
  // 'auxiliary-past': noop,
  // we do walk -> we did walk
  // 'auxiliary-present': noop,

  // must walk -> 'must have walked'
  // 'modal-infinitive': noop,
  // must have walked
  // 'modal-past': noop,
  // wanted to walk
  // 'want-infinitive': noop,
  // started looking
  // 'gerund-phrase': noop,
};
var toPast = function toPast(vb, parsed, form) {
  // console.log(form)
  if (forms.hasOwnProperty(form)) {
    vb = forms[form](vb, parsed);
    vb.fullSentence().compute(['tagger', 'chunks']);
    return vb;
  }
  // do the simple form
  vb = simple(vb, parsed, form);
  vb.fullSentence().compute(['tagger', 'chunks']);
  // do nothing, then
  return vb;
};
var _default = exports.default = toPast;
},{"../lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/conjugate/toPresent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../lib.js");
var keep = {
  tags: true
};

// walk->walked
var simple = function simple(vb, parsed) {
  var _vb$methods$two$trans = vb.methods.two.transform.verb,
    conjugate = _vb$methods$two$trans.conjugate,
    toInfinitive = _vb$methods$two$trans.toInfinitive;
  var root = parsed.root;
  var str = root.text('normal');
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  // 'i walk' vs 'he walks'
  if ((0, _lib.isPlural)(vb, parsed) === false) {
    str = conjugate(str, vb.model).PresentTense;
  }
  // handle copula
  if (root.has('#Copula')) {
    str = (0, _lib.isAreAm)(vb, parsed);
  }
  if (str) {
    vb = vb.replace(root, str, keep);
    vb.not('#Particle').tag('PresentTense');
  }
  // vb.replace('not ' + str, str + ' not')
  return vb;
};
var toGerund = function toGerund(vb, parsed) {
  var _vb$methods$two$trans2 = vb.methods.two.transform.verb,
    conjugate = _vb$methods$two$trans2.conjugate,
    toInfinitive = _vb$methods$two$trans2.toInfinitive;
  var root = parsed.root;
  var str = root.text('normal');
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  // 'i walk' vs 'he walks'
  if ((0, _lib.isPlural)(vb, parsed) === false) {
    str = conjugate(str, vb.model).Gerund;
  }
  if (str) {
    vb = vb.replace(root, str, keep);
    vb.not('#Particle').tag('Gerund');
  }
  return vb;
};
var vbToInf = function vbToInf(vb, parsed) {
  var toInfinitive = vb.methods.two.transform.verb.toInfinitive;
  var root = parsed.root;
  var str = parsed.root.text('normal');
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  if (str) {
    vb = vb.replace(parsed.root, str, keep);
  }
  return vb;
};
var forms = {
  // walk
  'infinitive': simple,
  // he walks -> he walked
  'simple-present': function simplePresent(vb, parsed) {
    var conjugate = vb.methods.two.transform.verb.conjugate;
    var root = parsed.root;
    // is it *only* a infinitive? - 'we buy' etc
    if (root.has('#Infinitive')) {
      var subj = (0, _lib.getSubject)(vb, parsed);
      var m = subj.subject;
      if ((0, _lib.isPlural)(vb, parsed) || m.has('i')) {
        // keep it infinitive
        return vb;
      }
      var str = root.text('normal');
      var pres = conjugate(str, vb.model).PresentTense;
      if (str !== pres) {
        vb.replace(root, pres, keep);
      }
    } else {
      return simple(vb, parsed);
    }
    return vb;
  },
  // he walked
  'simple-past': simple,
  // he will walk -> he walked
  'simple-future': function simpleFuture(vb, parsed) {
    var root = parsed.root,
      auxiliary = parsed.auxiliary;
    // handle 'will be'
    if (auxiliary.has('will') && root.has('be')) {
      var str = (0, _lib.isAreAm)(vb, parsed);
      vb.replace(root, str);
      vb = vb.remove('will');
      vb.replace('not ' + str, str + ' not');
    } else {
      simple(vb, parsed);
      vb = vb.remove('will');
    }
    return vb;
  },
  // is walking ->
  'present-progressive': _lib.noop,
  // was walking -> is walking
  'past-progressive': function pastProgressive(vb, parsed) {
    var str = (0, _lib.isAreAm)(vb, parsed);
    return vb.replace('(were|was)', str, keep);
  },
  // will be walking -> is walking
  'future-progressive': function futureProgressive(vb) {
    vb.match('will').insertBefore('is');
    vb.remove('be');
    return vb.remove('will');
  },
  // has walked ->  (?)
  'present-perfect': function presentPerfect(vb, parsed) {
    simple(vb, parsed);
    vb = vb.remove('(have|had|has)');
    return vb;
  },
  // had walked -> has walked
  'past-perfect': function pastPerfect(vb, parsed) {
    // not 'we has walked'
    var subj = (0, _lib.getSubject)(vb, parsed);
    var m = subj.subject;
    if ((0, _lib.isPlural)(vb, parsed) || m.has('i')) {
      vb = (0, _lib.toInf)(vb, parsed); // we walk
      vb.remove('had');
      return vb;
    }
    vb.replace('had', 'has', keep);
    return vb;
  },
  // will have walked -> has walked
  'future-perfect': function futurePerfect(vb) {
    vb.match('will').insertBefore('has');
    return vb.remove('have').remove('will');
  },
  // has been walking
  'present-perfect-progressive': _lib.noop,
  // had been walking
  'past-perfect-progressive': function pastPerfectProgressive(vb) {
    return vb.replace('had', 'has', keep);
  },
  // will have been -> has been
  'future-perfect-progressive': function futurePerfectProgressive(vb) {
    vb.match('will').insertBefore('has');
    return vb.remove('have').remove('will');
  },
  // got walked -> is walked
  // was walked -> is walked
  // had been walked -> is walked
  'passive-past': function passivePast(vb, parsed) {
    var str = (0, _lib.isAreAm)(vb, parsed);
    if (vb.has('(had|have|has)') && vb.has('been')) {
      vb.replace('(had|have|has)', str, keep);
      vb.replace('been', 'being');
      return vb;
    }
    return vb.replace('(got|was|were)', str);
  },
  // is being walked  ->
  'passive-present': _lib.noop,
  // will be walked -> is being walked
  'passive-future': function passiveFuture(vb) {
    vb.replace('will', 'is');
    return vb.replace('be', 'being');
  },
  // would be walked ->
  'present-conditional': _lib.noop,
  // would have been walked ->
  'past-conditional': function pastConditional(vb) {
    vb.replace('been', 'be');
    return vb.remove('have');
  },
  // is going to drink -> is drinking
  'auxiliary-future': function auxiliaryFuture(vb, parsed) {
    toGerund(vb, parsed);
    vb.remove('(going|to)');
    return vb;
  },
  // used to walk -> is walking
  // did walk -> is walking
  'auxiliary-past': function auxiliaryPast(vb, parsed) {
    // 'did provide' -> 'does provide'
    if (parsed.auxiliary.has('did')) {
      var str = (0, _lib.doDoes)(vb, parsed);
      vb.replace(parsed.auxiliary, str);
      return vb;
    }
    toGerund(vb, parsed);
    vb.replace(parsed.auxiliary, 'is');
    return vb;
  },
  // we do walk ->
  'auxiliary-present': _lib.noop,
  // must walk -> 'must have walked'
  'modal-infinitive': _lib.noop,
  // must have walked
  'modal-past': function modalPast(vb, parsed) {
    vbToInf(vb, parsed);
    return vb.remove('have');
  },
  // started looking
  'gerund-phrase': function gerundPhrase(vb, parsed) {
    parsed.root = parsed.root.not('#Gerund$');
    simple(vb, parsed);
    return vb.remove('(will|have)');
  },
  // wanted to walk
  'want-infinitive': function wantInfinitive(vb, parsed) {
    var str = 'wants';
    if ((0, _lib.isPlural)(vb, parsed)) {
      str = 'want'; //we want
    }
    vb.replace('(want|wanted|wants)', str, keep);
    vb.remove('will');
    return vb;
  }
};
var toPresent = function toPresent(vb, parsed, form) {
  // console.log(form)
  if (forms.hasOwnProperty(form)) {
    vb = forms[form](vb, parsed);
    vb.fullSentence().compute(['tagger', 'chunks']);
    return vb;
  }
  return vb;
};
var _default = exports.default = toPresent;
},{"../lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/conjugate/toFuture.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../lib.js");
var keep = {
  tags: true
};
var simple = function simple(vb, parsed) {
  var toInfinitive = vb.methods.two.transform.verb.toInfinitive;
  var root = parsed.root,
    auxiliary = parsed.auxiliary;
  // 'i may'
  if (root.has('#Modal')) {
    return vb;
  }
  var str = root.text('normal');
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  if (str) {
    vb = vb.replace(root, str, keep);
    vb.not('#Particle').tag('Verb');
  }
  vb.prepend('will').match('will').tag('Auxiliary');
  vb.remove(auxiliary);
  return vb;
};

// 'will be walking'
var progressive = function progressive(vb, parsed) {
  var _vb$methods$two$trans = vb.methods.two.transform.verb,
    conjugate = _vb$methods$two$trans.conjugate,
    toInfinitive = _vb$methods$two$trans.toInfinitive;
  var root = parsed.root,
    auxiliary = parsed.auxiliary;
  var str = root.text('normal');
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  if (str) {
    str = conjugate(str, vb.model).Gerund;
    vb.replace(root, str, keep);
    vb.not('#Particle').tag('PresentTense');
  }
  vb.remove(auxiliary);
  vb.prepend('will be').match('will be').tag('Auxiliary');
  return vb;
};
var forms = {
  // walk ->
  'infinitive': simple,
  // he walks ->
  'simple-present': simple,
  // he walked
  'simple-past': simple,
  // he will walk ->
  'simple-future': _lib.noop,
  // is walking ->
  'present-progressive': progressive,
  // was walking ->
  'past-progressive': progressive,
  // will be walking ->
  'future-progressive': _lib.noop,
  // has walked ->
  'present-perfect': function presentPerfect(vb) {
    vb.match('(have|has)').replaceWith('will have');
    return vb;
  },
  // had walked ->
  'past-perfect': function pastPerfect(vb) {
    return vb.replace('(had|has)', 'will have');
  },
  // will have walked ->
  'future-perfect': _lib.noop,
  // has been walking
  'present-perfect-progressive': function presentPerfectProgressive(vb) {
    return vb.replace('has', 'will have');
  },
  // had been walking
  'past-perfect-progressive': function pastPerfectProgressive(vb) {
    return vb.replace('had', 'will have');
  },
  // will have been ->
  'future-perfect-progressive': _lib.noop,
  // got walked ->
  // was walked ->
  // was being walked ->
  // had been walked ->
  'passive-past': function passivePast(vb) {
    if (vb.has('got')) {
      return vb.replace('got', 'will get');
    }
    if (vb.has('(was|were)')) {
      vb.replace('(was|were)', 'will be');
      return vb.remove('being');
    }
    if (vb.has('(have|has|had) been')) {
      return vb.replace('(have|has|had) been', 'will be');
    }
    return vb;
  },
  // is being walked  ->
  'passive-present': function passivePresent(vb) {
    vb.replace('being', 'will be');
    vb.remove('(is|are|am)');
    return vb;
  },
  // will be walked ->
  'passive-future': _lib.noop,
  // would be walked ->
  'present-conditional': function presentConditional(vb) {
    return vb.replace('would', 'will');
  },
  // would have been walked ->
  'past-conditional': function pastConditional(vb) {
    return vb.replace('would', 'will');
  },
  // is going to drink ->
  'auxiliary-future': _lib.noop,
  // used to walk -> is walking
  // did walk -> is walking
  'auxiliary-past': function auxiliaryPast(vb) {
    if (vb.has('used') && vb.has('to')) {
      vb.replace('used', 'will');
      return vb.remove('to');
    }
    vb.replace('did', 'will');
    return vb;
  },
  // we do walk ->
  // he does walk ->
  'auxiliary-present': function auxiliaryPresent(vb) {
    return vb.replace('(do|does)', 'will');
  },
  // must walk ->
  'modal-infinitive': _lib.noop,
  // must have walked
  'modal-past': _lib.noop,
  // started looking
  'gerund-phrase': function gerundPhrase(vb, parsed) {
    parsed.root = parsed.root.not('#Gerund$');
    simple(vb, parsed);
    return vb.remove('(had|have)');
  },
  // wanted to walk
  'want-infinitive': function wantInfinitive(vb) {
    vb.replace('(want|wants|wanted)', 'will want');
    return vb;
  }
};
var toFuture = function toFuture(vb, parsed, form) {
  // console.log(form)
  // is it already future-tense?
  if (vb.has('will') || vb.has('going to')) {
    return vb;
  }
  if (forms.hasOwnProperty(form)) {
    vb = forms[form](vb, parsed);
    vb.fullSentence().compute(['tagger', 'chunks']);
    return vb;
  }
  return vb;
};
var _default = exports.default = toFuture;
},{"../lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/conjugate/toGerund.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../lib.js");
var keep = {
  tags: true
};

// all verb forms are the same
var toGerund = function toGerund(vb, parsed) {
  // console.log(form)
  var _vb$methods$two$trans = vb.methods.two.transform.verb,
    toInfinitive = _vb$methods$two$trans.toInfinitive,
    conjugate = _vb$methods$two$trans.conjugate;
  var root = parsed.root,
    auxiliary = parsed.auxiliary;
  if (vb.has('#Gerund')) {
    return vb;
  }

  // conjugate '-ing' verb
  var str = root.text('normal');
  str = toInfinitive(str, vb.model, (0, _lib.getTense)(root));
  var gerund = conjugate(str, vb.model).Gerund;
  // 'are walking', 'is walking'
  if (gerund) {
    var aux = (0, _lib.isAreAm)(vb, parsed);
    vb.replace(root, gerund, keep);
    vb.remove(auxiliary);
    vb.prepend(aux); //.match(aux)
  }
  // remove any existing auxiliary
  // if (auxiliary.found) {
  // vb.match(auxiliary).debug()
  // vb.remove(auxiliary)
  // }

  vb.replace('not is', 'is not');
  vb.replace('not are', 'are not');
  vb.fullSentence().compute(['tagger', 'chunks']);
  return vb;
};
var _default = exports.default = toGerund;
},{"../lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/conjugate/toNegative.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("../lib.js");
var keep = {
  tags: true
};

// do/does not walk 
var doesNot = function doesNot(vb, parsed) {
  var does = (0, _lib.doDoes)(vb, parsed);
  vb.prepend(does + ' not');
  return vb;
};
var isWas = function isWas(vb) {
  // not be
  var m = vb.match('be');
  if (m.found) {
    m.prepend('not');
    return vb;
  }
  // will not
  m = vb.match('(is|was|am|are|will|were)');
  if (m.found) {
    m.append('not');
    return vb;
  }
  return vb;
};
var hasCopula = function hasCopula(vb) {
  return vb.has('(is|was|am|are|will|were|be)');
};

//vaguely, turn 'he is cool' into 'he is not cool'
var forms = {
  // he walks' -> 'he does not walk'
  'simple-present': function simplePresent(vb, parsed) {
    // is/was
    if (hasCopula(vb) === true) {
      return isWas(vb, parsed);
    }
    // he walk
    vb = (0, _lib.toInf)(vb, parsed);
    // does not 
    vb = doesNot(vb, parsed);
    return vb;
  },
  // 'he walked' -> 'he did not walk'
  'simple-past': function simplePast(vb, parsed) {
    // is/was
    if (hasCopula(vb) === true) {
      return isWas(vb, parsed);
    }
    // he walk
    vb = (0, _lib.toInf)(vb, parsed);
    // vb.debug()
    // did not walk
    vb.prepend('did not');
    return vb;
  },
  // walk! -> 'do not walk'
  'imperative': function imperative(vb) {
    vb.prepend('do not');
    return vb;
  },
  // walk -> does not walk
  'infinitive': function infinitive(vb, parsed) {
    if (hasCopula(vb) === true) {
      return isWas(vb, parsed);
    }
    return doesNot(vb, parsed);
  },
  'passive-past': function passivePast(vb) {
    // got walked -> did not get walked
    if (vb.has('got')) {
      vb.replace('got', 'get', keep);
      vb.prepend('did not');
      return vb;
    }
    // was walked, were walked
    // was being walked
    // had been walked, have been eaten
    var m = vb.match('(was|were|had|have)');
    if (m.found) {
      m.append('not');
    }
    return vb;
  },
  'auxiliary-past': function auxiliaryPast(vb) {
    // used to walk
    if (vb.has('used')) {
      vb.prepend('did not');
      return vb;
    }
    // he did walk
    var m = vb.match('(did|does|do)');
    if (m.found) {
      m.append('not');
    }
    return vb;
  },
  // wants to walk
  'want-infinitive': function wantInfinitive(vb, parsed) {
    // does not 
    vb = doesNot(vb, parsed);
    // want
    vb = vb.replace('wants', 'want', keep);
    return vb;
  }
};
var toNegative = function toNegative(vb, parsed, form) {
  // console.log(form)
  if (vb.has('#Negative')) {
    return vb;
  }
  if (forms.hasOwnProperty(form)) {
    vb = forms[form](vb, parsed);
    return vb;
  }

  // 'not be'
  var m = vb.matchOne('be');
  if (m.found) {
    m.prepend('not');
    return vb;
  }
  // is/was not
  if (hasCopula(vb) === true) {
    return isWas(vb, parsed);
  }

  // 'would not'
  m = vb.matchOne('(will|had|have|has|did|does|do|#Modal)');
  if (m.found) {
    m.append('not');
    return vb;
  }
  // do nothing i guess?
  return vb;
};
var _default = exports.default = toNegative;
},{"../lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/api/api.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _find = _interopRequireDefault(require("../find.js"));
var _toJSON = _interopRequireDefault(require("./toJSON.js"));
var _index = _interopRequireDefault(require("./parse/index.js"));
var _toInfinitive = _interopRequireDefault(require("./conjugate/toInfinitive.js"));
var _toPast = _interopRequireDefault(require("./conjugate/toPast.js"));
var _toParticiple = _interopRequireDefault(require("./conjugate/toParticiple.js"));
var _toPresent = _interopRequireDefault(require("./conjugate/toPresent.js"));
var _toFuture = _interopRequireDefault(require("./conjugate/toFuture.js"));
var _toGerund2 = _interopRequireDefault(require("./conjugate/toGerund.js"));
var _getSubject = _interopRequireDefault(require("./parse/getSubject.js"));
var _index2 = _interopRequireDefault(require("./parse/grammar/index.js"));
var _toNegative2 = _interopRequireDefault(require("./conjugate/toNegative.js"));
var _lib = require("./lib.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _readOnlyError(r) { throw new TypeError('"' + r + '" is read-only'); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var api = function api(View) {
  var Verbs = /*#__PURE__*/function (_View) {
    function Verbs(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Verbs);
      _this = _callSuper(this, Verbs, [document, pointer, groups]);
      _this.viewType = 'Verbs';
      return _this;
    }
    _inherits(Verbs, _View);
    return _createClass(Verbs, [{
      key: "parse",
      value: function parse(n) {
        return this.getNth(n).map(_index.default);
      }
    }, {
      key: "json",
      value: function json(opts, n) {
        var m = this.getNth(n);
        var arr = m.map(function (vb) {
          var json = vb.toView().json(opts)[0] || {};
          json.verb = (0, _toJSON.default)(vb);
          return json;
        }, []);
        return arr;
      }
    }, {
      key: "subjects",
      value: function subjects(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          return (0, _getSubject.default)(vb, parsed).subject;
        });
      }
    }, {
      key: "adverbs",
      value: function adverbs(n) {
        return this.getNth(n).map(function (vb) {
          return vb.match('#Adverb');
        });
      }
    }, {
      key: "isSingular",
      value: function isSingular(n) {
        return this.getNth(n).filter(function (vb) {
          return (0, _getSubject.default)(vb).plural !== true;
        });
      }
    }, {
      key: "isPlural",
      value: function isPlural(n) {
        return this.getNth(n).filter(function (vb) {
          return (0, _getSubject.default)(vb).plural === true;
        });
      }
    }, {
      key: "isImperative",
      value: function isImperative(n) {
        return this.getNth(n).filter(function (vb) {
          return vb.has('#Imperative');
        });
      }
    }, {
      key: "toInfinitive",
      value: function toInfinitive(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          return (0, _toInfinitive.default)(vb, parsed, info.form);
        });
      }
    }, {
      key: "toPresentTense",
      value: function toPresentTense(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          if (info.isInfinitive) {
            return vb;
          }
          return (0, _toPresent.default)(vb, parsed, info.form);
        });
      }
    }, {
      key: "toPastTense",
      value: function toPastTense(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          if (info.isInfinitive) {
            return vb;
          }
          return (0, _toPast.default)(vb, parsed, info.form);
        });
      }
    }, {
      key: "toFutureTense",
      value: function toFutureTense(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          if (info.isInfinitive) {
            return vb;
          }
          return (0, _toFuture.default)(vb, parsed, info.form);
        });
      }
    }, {
      key: "toGerund",
      value: function toGerund(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          if (info.isInfinitive) {
            return vb;
          }
          return (0, _toGerund2.default)(vb, parsed, info.form);
        });
      }
    }, {
      key: "toPastParticiple",
      value: function toPastParticiple(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          if (info.isInfinitive) {
            return vb;
          }
          return (0, _toParticiple.default)(vb, parsed, info.form);
        });
      }
    }, {
      key: "conjugate",
      value: function conjugate(n) {
        var _this$world$methods$t = this.world.methods.two.transform.verb,
          conjugate = _this$world$methods$t.conjugate,
          toInfinitive = _this$world$methods$t.toInfinitive;
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          // allow imperatives like 'go!' to be conjugated here (only)
          if (info.form === 'imperative') {
            info.form = 'simple-present';
          }
          var inf = parsed.root.text('normal');
          if (!parsed.root.has('#Infinitive')) {
            var tense = (0, _lib.getTense)(parsed.root);
            inf = toInfinitive(inf, vb.model, tense) || inf;
          }
          return conjugate(inf, vb.model);
        }, []);
      }

      /** return only verbs with 'not'*/
    }, {
      key: "isNegative",
      value: function isNegative() {
        return this.if('#Negative');
      }
      /**  return only verbs without 'not'*/
    }, {
      key: "isPositive",
      value: function isPositive() {
        return this.ifNo('#Negative');
      }
      /** remove 'not' from these verbs */
    }, {
      key: "toPositive",
      value: function toPositive() {
        var m = this.match('do not #Verb');
        if (m.found) {
          m.remove('do not');
        }
        return this.remove('#Negative');
      }
    }, {
      key: "toNegative",
      value: function toNegative(n) {
        return this.getNth(n).map(function (vb) {
          var parsed = (0, _index.default)(vb);
          var info = (0, _index2.default)(vb, parsed);
          return (0, _toNegative2.default)(vb, parsed, info.form);
        });
      }
      // overloaded - keep Verb class
    }, {
      key: "update",
      value: function update(pointer) {
        var m = new Verbs(this.document, pointer);
        m._cache = this._cache; // share this full thing
        return m;
      }
    }]);
  }(View);
  Verbs.prototype.toPast = Verbs.prototype.toPastTense;
  Verbs.prototype.toPresent = Verbs.prototype.toPresentTense;
  Verbs.prototype.toFuture = Verbs.prototype.toFutureTense;
  View.prototype.verbs = function (n) {
    var vb = (0, _find.default)(this);
    vb = vb.getNth(n);
    return new Verbs(this.document, vb.pointer);
  };
};
var _default = exports.default = api;
},{"../find.js":"node_modules/compromise/src/3-three/verbs/find.js","./toJSON.js":"node_modules/compromise/src/3-three/verbs/api/toJSON.js","./parse/index.js":"node_modules/compromise/src/3-three/verbs/api/parse/index.js","./conjugate/toInfinitive.js":"node_modules/compromise/src/3-three/verbs/api/conjugate/toInfinitive.js","./conjugate/toPast.js":"node_modules/compromise/src/3-three/verbs/api/conjugate/toPast.js","./conjugate/toParticiple.js":"node_modules/compromise/src/3-three/verbs/api/conjugate/toParticiple.js","./conjugate/toPresent.js":"node_modules/compromise/src/3-three/verbs/api/conjugate/toPresent.js","./conjugate/toFuture.js":"node_modules/compromise/src/3-three/verbs/api/conjugate/toFuture.js","./conjugate/toGerund.js":"node_modules/compromise/src/3-three/verbs/api/conjugate/toGerund.js","./parse/getSubject.js":"node_modules/compromise/src/3-three/verbs/api/parse/getSubject.js","./parse/grammar/index.js":"node_modules/compromise/src/3-three/verbs/api/parse/grammar/index.js","./conjugate/toNegative.js":"node_modules/compromise/src/3-three/verbs/api/conjugate/toNegative.js","./lib.js":"node_modules/compromise/src/3-three/verbs/api/lib.js"}],"node_modules/compromise/src/3-three/verbs/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _api = _interopRequireDefault(require("./api/api.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  api: _api.default
};
},{"./api/api.js":"node_modules/compromise/src/3-three/verbs/api/api.js"}],"node_modules/compromise/src/3-three/coreference/compute/lib.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prevSentence = exports.findChained = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
// borrow a reference from another pronoun
// 'mike is tall, [he] climbs and [he] swims'
var findChained = exports.findChained = function findChained(want, s) {
  var m = s.match(want);
  if (m.found) {
    var ref = m.pronouns().refersTo();
    if (ref.found) {
      return ref;
    }
  }
  return s.none();
};
var prevSentence = exports.prevSentence = function prevSentence(m) {
  if (!m.found) {
    return m;
  }
  var _m$fullPointer$ = _slicedToArray(m.fullPointer[0], 1),
    n = _m$fullPointer$[0];
  if (n && n > 0) {
    return m.update([[n - 1]]);
  }
  return m.none();
};
},{}],"node_modules/compromise/src/3-three/coreference/compute/findPerson.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("./lib.js");
// only filter if we know a gender
// ambiguous names like 'jamie smith' will refer to either he or she
var byGender = function byGender(ppl, gender) {
  if (gender === 'm') {
    return ppl.filter(function (m) {
      return !m.presumedFemale().found;
    });
  } else if (gender === 'f') {
    return ppl.filter(function (m) {
      return !m.presumedMale().found;
    });
  }
  return ppl;
};
var getPerson = function getPerson(s, gender) {
  // look at current sentence
  var people = s.people();
  people = byGender(people, gender);
  if (people.found) {
    return people.last();
  }
  // non-named people, like 'the cowboy'
  people = s.nouns('#Actor');
  if (people.found) {
    return people.last();
  }
  // existing pronouns
  if (gender === 'f') {
    return (0, _lib.findChained)('(she|her|hers)', s);
  }
  if (gender === 'm') {
    return (0, _lib.findChained)('(he|him|his)', s);
  }
  return s.none();
};
var _default = exports.default = getPerson;
},{"./lib.js":"node_modules/compromise/src/3-three/coreference/compute/lib.js"}],"node_modules/compromise/src/3-three/coreference/compute/findThey.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lib = require("./lib.js");
// find best reference for 'they' & 'their'
var getThey = function getThey(s) {
  var nouns = s.nouns();

  // 'the bananas'
  var things = nouns.isPlural().notIf('#Pronoun');
  if (things.found) {
    return things.last();
  }
  // re-use existing pronoun reference
  var chain = (0, _lib.findChained)('(they|their|theirs)', s);
  if (chain.found) {
    return chain;
  }

  // they can also refer to a singular noun
  // "the restaurant sold their food"
  // "a choir sang their song"

  // somebody shaved their head
  things = nouns.match('(somebody|nobody|everybody|anybody|someone|noone|everyone|anyone)');
  if (things.found) {
    return things.last();
  }
  return s.none();
};
var _default = exports.default = getThey;
},{"./lib.js":"node_modules/compromise/src/3-three/coreference/compute/lib.js"}],"node_modules/compromise/src/3-three/coreference/compute/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _findPerson = _interopRequireDefault(require("./findPerson.js"));
var _findThey = _interopRequireDefault(require("./findThey.js"));
var _lib = require("./lib.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// import getIt from './findIt.js'

var addReference = function addReference(pron, m) {
  if (m && m.found) {
    // add reference on the pronoun
    var term = pron.docs[0][0]; //pronouns are 1 word only
    term.reference = m.ptrs[0];
  }
};
var stepBack = function stepBack(m, cb) {
  // 1st - in same sentence
  var s = m.before();
  var res = cb(s);
  if (res.found) {
    return res;
  }
  // 2nd - previous sentence
  s = (0, _lib.prevSentence)(m);
  res = cb(s);
  if (res.found) {
    return res;
  }
  // 3rd - two sentences back
  s = (0, _lib.prevSentence)(s);
  res = cb(s);
  if (res.found) {
    return res;
  }
  return m.none();
};
var coreference = function coreference(view) {
  var pronouns = view.pronouns().if('(he|him|his|she|her|hers|they|their|theirs|it|its)');
  pronouns.forEach(function (pron) {
    var res = null;
    // connect pronoun to its reference
    if (pron.has('(he|him|his)')) {
      res = stepBack(pron, function (m) {
        return (0, _findPerson.default)(m, 'm');
      });
    } else if (pron.has('(she|her|hers)')) {
      res = stepBack(pron, function (m) {
        return (0, _findPerson.default)(m, 'f');
      });
    } else if (pron.has('(they|their|theirs)')) {
      res = stepBack(pron, _findThey.default);
    }
    if (res && res.found) {
      addReference(pron, res);
    }
  });
};
var _default = exports.default = coreference;
},{"./findPerson.js":"node_modules/compromise/src/3-three/coreference/compute/findPerson.js","./findThey.js":"node_modules/compromise/src/3-three/coreference/compute/findThey.js","./lib.js":"node_modules/compromise/src/3-three/coreference/compute/lib.js"}],"node_modules/compromise/src/3-three/coreference/api/pronouns.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var api = function api(View) {
  var Pronouns = /*#__PURE__*/function (_View) {
    function Pronouns(document, pointer, groups) {
      var _this;
      _classCallCheck(this, Pronouns);
      _this = _callSuper(this, Pronouns, [document, pointer, groups]);
      _this.viewType = 'Pronouns';
      return _this;
    }
    _inherits(Pronouns, _View);
    return _createClass(Pronouns, [{
      key: "hasReference",
      value: function hasReference() {
        this.compute('coreference');
        return this.filter(function (m) {
          var term = m.docs[0][0];
          return term.reference;
        });
      }
      // get the noun-phrase this pronoun refers to
    }, {
      key: "refersTo",
      value: function refersTo() {
        //calculate links
        this.compute('coreference');
        // return them
        return this.map(function (m) {
          if (!m.found) {
            return m.none();
          }
          var term = m.docs[0][0];
          if (term.reference) {
            return m.update([term.reference]);
          }
          return m.none();
        });
      }
      // overloaded - keep Numbers class
    }, {
      key: "update",
      value: function update(pointer) {
        var m = new Pronouns(this.document, pointer);
        m._cache = this._cache; // share this full thing
        return m;
      }
    }]);
  }(View);
  View.prototype.pronouns = function (n) {
    var m = this.match('#Pronoun');
    m = m.getNth(n);
    return new Pronouns(m.document, m.pointer);
  };
};
var _default = exports.default = api;
},{}],"node_modules/compromise/src/3-three/coreference/plugin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _index = _interopRequireDefault(require("./compute/index.js"));
var _pronouns = _interopRequireDefault(require("./api/pronouns.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
var _default = exports.default = {
  compute: {
    coreference: _index.default
  },
  api: _pronouns.default
};
},{"./compute/index.js":"node_modules/compromise/src/3-three/coreference/compute/index.js","./api/pronouns.js":"node_modules/compromise/src/3-three/coreference/api/pronouns.js"}],"node_modules/compromise/src/three.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _two = _interopRequireDefault(require("./two.js"));
var _plugin = _interopRequireDefault(require("./3-three/adjectives/plugin.js"));
var _plugin2 = _interopRequireDefault(require("./3-three/adverbs/plugin.js"));
var _plugin3 = _interopRequireDefault(require("./3-three/chunker/plugin.js"));
var _plugin4 = _interopRequireDefault(require("./3-three/misc/plugin.js"));
var _plugin5 = _interopRequireDefault(require("./3-three/normalize/plugin.js"));
var _plugin6 = _interopRequireDefault(require("./3-three/nouns/plugin.js"));
var _plugin7 = _interopRequireDefault(require("./3-three/numbers/plugin.js"));
var _plugin8 = _interopRequireDefault(require("./3-three/redact/plugin.js"));
var _plugin9 = _interopRequireDefault(require("./3-three/sentences/plugin.js"));
var _plugin10 = _interopRequireDefault(require("./3-three/topics/plugin.js"));
var _plugin11 = _interopRequireDefault(require("./3-three/verbs/plugin.js"));
var _plugin12 = _interopRequireDefault(require("./3-three/coreference/plugin.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
_two.default.plugin(_plugin.default); //
_two.default.plugin(_plugin2.default); //
_two.default.plugin(_plugin3.default); //
_two.default.plugin(_plugin12.default);
_two.default.plugin(_plugin4.default); //
_two.default.plugin(_plugin5.default); //
_two.default.plugin(_plugin6.default); //
_two.default.plugin(_plugin7.default); //
_two.default.plugin(_plugin8.default); //
_two.default.plugin(_plugin9.default); //
_two.default.plugin(_plugin10.default); //
_two.default.plugin(_plugin11.default); //
var _default = exports.default = _two.default;
},{"./two.js":"node_modules/compromise/src/two.js","./3-three/adjectives/plugin.js":"node_modules/compromise/src/3-three/adjectives/plugin.js","./3-three/adverbs/plugin.js":"node_modules/compromise/src/3-three/adverbs/plugin.js","./3-three/chunker/plugin.js":"node_modules/compromise/src/3-three/chunker/plugin.js","./3-three/misc/plugin.js":"node_modules/compromise/src/3-three/misc/plugin.js","./3-three/normalize/plugin.js":"node_modules/compromise/src/3-three/normalize/plugin.js","./3-three/nouns/plugin.js":"node_modules/compromise/src/3-three/nouns/plugin.js","./3-three/numbers/plugin.js":"node_modules/compromise/src/3-three/numbers/plugin.js","./3-three/redact/plugin.js":"node_modules/compromise/src/3-three/redact/plugin.js","./3-three/sentences/plugin.js":"node_modules/compromise/src/3-three/sentences/plugin.js","./3-three/topics/plugin.js":"node_modules/compromise/src/3-three/topics/plugin.js","./3-three/verbs/plugin.js":"node_modules/compromise/src/3-three/verbs/plugin.js","./3-three/coreference/plugin.js":"node_modules/compromise/src/3-three/coreference/plugin.js"}],"modelo/tokenizacion.js":[function(require,module,exports) {
"use strict";

var _compromise = _interopRequireDefault(require("compromise"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// Tokenización y vocabulario
var vocabulario = new Map();
var indice = 1;
function tokenizarTexto(texto) {
  var doc = (0, _compromise.default)(texto);
  return doc.terms().out("array");
}
function agregarAlVocabulario(palabras) {
  palabras.forEach(function (palabra) {
    if (!vocabulario.has(palabra)) {
      vocabulario.set(palabra, indice);
      indice++;
    }
  });
}
function textoANumeros(texto) {
  var palabras = tokenizarTexto(texto);
  return palabras.map(function (palabra) {
    return vocabulario.get(palabra) || 0;
  });
}

// Cargar el modelo de TensorFlow.js
var model;
function cargarModelo() {
  return _cargarModelo.apply(this, arguments);
} // Predecir intención
function _cargarModelo() {
  _cargarModelo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return tf.loadLayersModel("ruta/al/modelo.json");
        case 2:
          model = _context.sent;
        case 3:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _cargarModelo.apply(this, arguments);
}
function predecirIntencion(_x) {
  return _predecirIntencion.apply(this, arguments);
} // Función principal del chatbot
function _predecirIntencion() {
  _predecirIntencion = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(texto) {
    var numeros, tensor, prediccion, intencion;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          numeros = textoANumeros(texto);
          tensor = tf.tensor2d([numeros]);
          prediccion = model.predict(tensor);
          intencion = tf.argMax(prediccion).dataSync()[0];
          return _context2.abrupt("return", intencion);
        case 5:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _predecirIntencion.apply(this, arguments);
}
function simularRespuestaBot(_x2) {
  return _simularRespuestaBot.apply(this, arguments);
} // Cargar el modelo al iniciar
function _simularRespuestaBot() {
  _simularRespuestaBot = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(opcion) {
    var loadingDiv, intencion, response;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          loadingDiv = document.createElement("div");
          loadingDiv.classList.add("msg-chat", "bot-typing");
          loadingDiv.innerHTML = "<p>Escribiendo...</p>";
          panelInbox.appendChild(loadingDiv);

          // Predecir la intención
          _context3.next = 6;
          return predecirIntencion(opcion);
        case 6:
          intencion = _context3.sent;
          _context3.next = 9;
          return fetch("procesarIntencion.php", {
            method: "POST",
            headers: {
              "Content-Type": "application/x-www-form-urlencoded"
            },
            body: "intencion=".concat(intencion, "&userInput=").concat(encodeURIComponent(opcion))
          }).then(function (res) {
            return res.json();
          });
        case 9:
          response = _context3.sent;
          // Mostrar la respuesta
          loadingDiv.remove();
          mostrarRespuestaBot(response.respuesta);
          scrollToBottom();
        case 13:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _simularRespuestaBot.apply(this, arguments);
}
cargarModelo();
},{"compromise":"node_modules/compromise/src/three.js"}],"C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "58360" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["C:/Users/Alejandro/AppData/Local/nvm/v23.10.0/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","modelo/tokenizacion.js"], null)
//# sourceMappingURL=/tokenizacion.57001e80.js.map